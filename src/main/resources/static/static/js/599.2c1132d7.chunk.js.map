{"version":3,"file":"static/js/599.2c1132d7.chunk.js","mappings":"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","sources":["components/uquvbulimi/AssistantUsers.jsx"],"sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\r\nimport styled from \"styled-components\";\r\nimport axios from \"axios\";\r\nimport {BASE_URL, getHeaders, mainColor} from \"../../utills/ServiceUrls\";\r\nimport {DataGrid, GridToolbar} from \"@mui/x-data-grid\";\r\nimport {Card, CardContent, Stack, TextField} from \"@mui/material\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport {AiFillDelete} from \"react-icons/ai\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Box from \"@mui/material/Box\";\r\nimport {FaUser, FaUserPlus} from \"react-icons/fa\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport {IoClose} from \"react-icons/io5\";\r\nimport {toast} from \"react-toastify\";\r\nimport {extrasmall} from \"../../responsiv\";\r\nimport Autocomplete from \"@mui/material/Autocomplete\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nconst AssistantUsers = () => {\r\n    const columns = [\r\n        {\r\n            field: 'count',\r\n            headerName: 'â„–',\r\n            sortable: true,\r\n            width: 50,\r\n            align: 'center',\r\n            justifyContent: 'center',\r\n        },\r\n        {\r\n            minWidth: 250,\r\n            flex: 1,\r\n            field: 'fullName',\r\n            headerName: 'Full name',\r\n            sortable: true,\r\n            align: 'center',\r\n            justifyContent: 'center'\r\n        },\r\n        {\r\n            minWidth: 250,\r\n            flex: 0.5,\r\n            field: 'action',\r\n            headerName: 'Action',\r\n            sortable: true,\r\n            align: 'center',\r\n            justifyContent: 'center',\r\n            renderCell: (cellValue) => {\r\n                return <Stack direction={\"row\"} spacing={2} justifyContent=\"center\">\r\n                    <IconButton\r\n                        aria-label=\"delete\"\r\n                        color=\"error\"\r\n                        onClick={() => handleOpenDelete(cellValue.row.id)}\r\n                    >\r\n                        <AiFillDelete/>\r\n                    </IconButton>\r\n                </Stack>\r\n            }\r\n        },\r\n\r\n\r\n    ]\r\n    const [users, setUsers] = useState([])\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const {headers} = getHeaders()\r\n    const [createUserModal, setCreateUserModal] = useState(false)\r\n    const [autocompleteValue, setAutocompleteValue] = useState(null);\r\n    const [autocompleteInputValue, setAutocompleteInputValue] = useState('');\r\n    const [options, setOptions] = useState([])\r\n    const [deleteId, setDeleteId] = useState(null)\r\n    const [openDelete, setOpenDelete] = useState(false)\r\n    const cancelTokenSourceRef = useRef(null);\r\n    const [roleName, setRoleName] = useState('ROLE_MONITORING_ASSISTANT')\r\n    const handleOpen = () => {\r\n        setCreateUserModal(true)\r\n    }\r\n    const handleClose = () => {\r\n        setCreateUserModal(false)\r\n    }\r\n    const getUsersData = () => {\r\n        setIsLoading(true)\r\n        axios.get(BASE_URL + '/dataOfLastActive/getAssistants', {headers})\r\n            .then(res => {\r\n                console.log(res.data.obj)\r\n                setUsers(res.data.obj?.map((item, index) => ({...item, count: index + 1})))\r\n            })\r\n            .catch(err => console.log(err))\r\n            .finally(() => {\r\n                setIsLoading(false)\r\n            })\r\n    }\r\n    const fetchUserOptions = async (inputValue) => {\r\n\r\n        const newCancelTokenSource = axios.CancelToken.source();\r\n        cancelTokenSourceRef.current = newCancelTokenSource;\r\n\r\n        const delayDebounceFn = setTimeout(() => {\r\n            if (inputValue.length >= 4) {\r\n                axios.get(`${BASE_URL}/user/getUserForTeacherSavingSearch?keyword=${inputValue}`, {\r\n                    headers,\r\n                    cancelToken: newCancelTokenSource.token,\r\n                })\r\n                    .then((response) => {\r\n                        const userData = response.data.obj;\r\n                        setOptions(userData);\r\n                    })\r\n                    .catch((err) => {\r\n                        if (axios.isCancel(err)) {\r\n                            console.log('Request canceled:', err.message);\r\n                        } else {\r\n                            console.error(err);\r\n                        }\r\n                    });\r\n            }\r\n        }, 300);\r\n\r\n        return () => {\r\n            if (newCancelTokenSource) {\r\n                newCancelTokenSource.cancel('Operation canceled due to component unmount.');\r\n            }\r\n            clearTimeout(delayDebounceFn);\r\n        };\r\n    };\r\n    const handleOpenDelete = (id) => {\r\n        setDeleteId(id);\r\n        setOpenDelete(true);\r\n    }\r\n    const handleDelete = () => {\r\n        deleteId && axios.delete(BASE_URL + '/dataOfLastActive/deleteAssistant/' + deleteId, {headers})\r\n            .then(res => {\r\n                console.log(res.data)\r\n                toast.success('Deleted assistant')\r\n                getUsersData()\r\n                setOpenDelete(false)\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n                toast.error('Error')\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        getUsersData()\r\n    }, []);\r\n    const handleAddUser = () => {\r\n        if (autocompleteValue) {\r\n            const body = {\r\n                userId: autocompleteValue.value,\r\n                roleName,\r\n            }\r\n            console.log(body)\r\n            axios.post(`${BASE_URL}/dataOfLastActive/createAssistant`, body, {headers})\r\n                .then((res) => {\r\n                    console.log(res);\r\n                    toast.success('Add user');\r\n                    getUsersData();\r\n                    setAutocompleteValue(null)\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                    toast.error('Error adding user');\r\n                });\r\n        }\r\n\r\n        setCreateUserModal(false);\r\n    };\r\n    const handleCloseDelete = () => {\r\n        setDeleteId(null);\r\n        setOpenDelete(false);\r\n    }\r\n    return (\r\n        <Container>\r\n            <Title>\r\n                <FaUser size={23}/>\r\n                <h1>Assistants</h1>\r\n            </Title>\r\n            <Card>\r\n                <CardContent>\r\n                    <Box sx={{display: 'flex', justifyContent: 'end', mb: 2}}>\r\n                        <Button\r\n                            onClick={handleOpen}\r\n                            variant={'contained'}\r\n                            color={'success'}\r\n                            endIcon={<FaUserPlus/>}>\r\n                            Add User\r\n                        </Button>\r\n                    </Box>\r\n                    <DataGrid\r\n                        columns={columns}\r\n                        rows={users || []}\r\n                        loading={isLoading}\r\n                        components={{Toolbar: GridToolbar}}\r\n                        rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n                        autoHeight\r\n                        initialState={{ // hide items\r\n                            columns: {\r\n                                columnVisibilityModel: {\r\n                                    action: false,\r\n                                },\r\n                            },\r\n                        }}\r\n                    />\r\n                </CardContent>\r\n            </Card>\r\n\r\n            {/*Modal add user*/}\r\n            <Modal\r\n                open={createUserModal}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"keep-mounted-modal-title\"\r\n                aria-describedby=\"keep-mounted-modal-description\"\r\n            >\r\n                <Box sx={styleAddUser} component={styleAddSm}>\r\n                    <ModalTitle>\r\n                        <h4> Add user</h4>\r\n                        <CloseBtnModal onClick={handleClose}> <IoClose size={22}/></CloseBtnModal>\r\n                    </ModalTitle>\r\n                    <Box>\r\n                        <Box sx={{\r\n                            marginY: 3,\r\n                            display: 'flex',\r\n                            flexDirection: 'column',\r\n                            gap: 3,\r\n                        }}>\r\n                            <Autocomplete\r\n                                value={autocompleteValue}\r\n                                fullWidth\r\n                                onChange={(event, newValue) => {\r\n                                    setAutocompleteValue(newValue);\r\n                                }}\r\n                                inputValue={autocompleteInputValue}\r\n                                onInputChange={(event, newInputValue) => {\r\n                                    setAutocompleteInputValue(newInputValue);\r\n                                    fetchUserOptions(newInputValue);\r\n                                }}\r\n                                id=\"user-autocomplete\"\r\n                                options={options || []}\r\n                                getOptionLabel={(option) => option?.label}\r\n                                getOptionSelected={(option, value) => option?.value === value?.value}\r\n                                renderInput={(params) => <TextField {...params} label=\"Select User\"/>}\r\n                            />\r\n                            <TextField\r\n                                size={'small'}\r\n                                label={'Role'}\r\n                                fullWidth\r\n                                value={roleName}\r\n                                onChange={(e) => setRoleName(e.target.value)}\r\n                                disabled/>\r\n                        </Box>\r\n\r\n                        <Stack direction=\"row\" spacing={2} justifyContent=\"flex-end\"\r\n                               alignItems=\"center\">\r\n                            <Button variant=\"outlined\" onClick={handleClose}>Cancel</Button>\r\n                            <Button variant=\"contained\" onClick={handleAddUser}>\r\n                                save\r\n                            </Button>\r\n                        </Stack>\r\n                    </Box>\r\n                </Box>\r\n            </Modal>\r\n\r\n            {/*modal delete*/}\r\n            <Modal\r\n                open={openDelete}\r\n                onClose={handleCloseDelete}\r\n                aria-labelledby=\"modal-modal-title\"\r\n                aria-describedby=\"modal-modal-description\"\r\n            >\r\n                <Box sx={style} component={style2}>\r\n                    <ModalTitle>\r\n                        <h5>\r\n                            Delete\r\n                        </h5>\r\n                        <CloseBtnModal onClick={handleCloseDelete}> <IoClose size={22}/></CloseBtnModal>\r\n                    </ModalTitle>\r\n                    <Box>\r\n                        <Stack sx={{height: \"100px\"}} direction=\"row\" justifyContent=\"center\" alignItems=\"center\">\r\n                            <Typography variant=\"h6\" color=\"black\">\r\n                                Do you want to delete !\r\n                            </Typography>\r\n                        </Stack>\r\n\r\n                        <Stack direction=\"row\" spacing={2} justifyContent=\"flex-end\"\r\n                               alignItems=\"center\">\r\n                            <Button variant=\"outlined\" onClick={handleCloseDelete}>Cancel</Button>\r\n                            <Button variant=\"contained\" color=\"error\" onClick={handleDelete}>\r\n                                Ok\r\n                            </Button>\r\n                        </Stack>\r\n                    </Box>\r\n                </Box>\r\n            </Modal>\r\n\r\n        </Container>\r\n    );\r\n};\r\n\r\nconst style2 = styled.div`\r\n    ${extrasmall({\r\n        width: \"95% !important\",\r\n    })}\r\n`\r\nconst style = {\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: 500,\r\n    bgcolor: 'background.paper',\r\n    boxShadow: 24,\r\n    padding: \"15px\",\r\n    borderRadius: \"8px\",\r\n};\r\nconst ModalTitle = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n\r\n    h4 {\r\n        color: black;\r\n    }\r\n\r\n    h5 {\r\n        color: red;\r\n    }\r\n\r\n`\r\nconst styleAddSm = styled.div`\r\n    ${extrasmall({\r\n        width: \"97% !important\"\r\n    })}\r\n`\r\nconst styleAddUser = {\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: 500,\r\n    bgcolor: 'background.paper',\r\n    boxShadow: 24,\r\n    padding: \"15px\",\r\n    borderRadius: \"8px\",\r\n};\r\nconst CloseBtnModal = styled.button`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding: 5px;\r\n    border-radius: 50%;\r\n    border: none;\r\n    background-color: ${mainColor};\r\n    color: white;\r\n    font-size: 12px;\r\n`\r\nconst Title = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: start;\r\n    gap: 5px;\r\n    color: ${mainColor};\r\n\r\n    h1 {\r\n        font-size: 22px;\r\n    }\r\n`\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    padding: 1rem;\r\n\r\n    .MuiDataGrid-columnHeaderTitleContainer {\r\n        justify-content: center;\r\n    }\r\n`;\r\nexport default AssistantUsers;"],"names":["style2","styled","extrasmall","width","style","position","top","left","transform","bgcolor","boxShadow","padding","borderRadius","ModalTitle","styleAddSm","styleAddUser","CloseBtnModal","mainColor","Title","Container","columns","field","headerName","sortable","align","justifyContent","minWidth","flex","renderCell","cellValue","direction","spacing","color","onClick","handleOpenDelete","row","id","useState","users","setUsers","isLoading","setIsLoading","headers","getHeaders","createUserModal","setCreateUserModal","autocompleteValue","setAutocompleteValue","autocompleteInputValue","setAutocompleteInputValue","options","setOptions","deleteId","setDeleteId","openDelete","setOpenDelete","cancelTokenSourceRef","useRef","roleName","setRoleName","handleClose","getUsersData","axios","BASE_URL","then","res","console","log","data","obj","map","item","index","count","catch","err","finally","fetchUserOptions","inputValue","newCancelTokenSource","current","delayDebounceFn","setTimeout","length","cancelToken","token","response","userData","message","error","cancel","clearTimeout","useEffect","handleCloseDelete","size","sx","display","mb","variant","endIcon","rows","loading","components","Toolbar","GridToolbar","rowsPerPageOptions","autoHeight","initialState","columnVisibilityModel","action","open","onClose","component","marginY","flexDirection","gap","value","fullWidth","onChange","event","newValue","onInputChange","newInputValue","getOptionLabel","option","label","getOptionSelected","renderInput","params","e","target","disabled","alignItems","body","userId","toast","height"],"sourceRoot":""}