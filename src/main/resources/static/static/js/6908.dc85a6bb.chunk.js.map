{"version":3,"file":"static/js/6908.dc85a6bb.chunk.js","mappings":"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","sources":["components/student/results/StudentResults.jsx"],"sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport styled from \"styled-components\";\r\nimport {BASE_URL, mainColor} from \"../../../utills/ServiceUrls\";\r\nimport {FaClipboardList} from \"react-icons/fa\";\r\nimport {Card, CardContent} from \"@mui/material\";\r\nimport {DataGrid, GridToolbar} from \"@mui/x-data-grid\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Box from \"@mui/material/Box\";\r\nimport axios from \"axios\";\r\nimport {useSelector} from \"react-redux\";\r\n\r\nconst StudentResults = () => {\r\n    const userId = useSelector(state => state.user?.user?.id)\r\n    const allGrade = (percentage) => {\r\n        const grade = [\r\n            {\r\n                alph: \"A+\",\r\n                Min: 95,\r\n                Max: 100,\r\n            },\r\n            {\r\n                alph: \"A\",\r\n                Min: 90,\r\n                Max: 94,\r\n            },\r\n            {\r\n                alph: \"B+\",\r\n                Min: 85,\r\n                Max: 89,\r\n            },\r\n            {\r\n                alph: \"B\",\r\n                Min: 80,\r\n                Max: 84,\r\n            },\r\n            {\r\n                alph: \"C+\",\r\n                Min: 75,\r\n                Max: 79,\r\n            },\r\n            {\r\n                alph: \"C\",\r\n                Min: 70,\r\n                Max: 74,\r\n            },\r\n            {\r\n                alph: \"D+\",\r\n                Min: 65,\r\n                Max: 69,\r\n            },\r\n            {\r\n                alph: \"D\",\r\n                Min: 60,\r\n                Max: 64,\r\n            },\r\n            {\r\n                alph: \"F\",\r\n                Min: 0,\r\n                Max: 59,\r\n            },\r\n            {\r\n                alph: \"FA\",\r\n                Min: 0,\r\n                Max: 0,\r\n            },\r\n        ]\r\n\r\n        const score = parseInt(percentage)\r\n        if (score !== 0) {\r\n            return grade.find(item => item.Min <= score)\r\n        }\r\n        return grade.find(item => item.Min <= score && item.Max <= score)\r\n\r\n    }\r\n    const columns = [\r\n        {\r\n            field: 'count',\r\n            headerName: 'â„–',\r\n            sortable: true,\r\n            width: 50,\r\n            align: 'center',\r\n        },\r\n        {\r\n            minWidth: 100,\r\n            flex: 0.3,\r\n            sortable: true,\r\n            field: 'year',\r\n            headerName: 'Year',\r\n            editable: false,\r\n        },\r\n        {\r\n            minWidth: 90,\r\n            flex: 0.3,\r\n            field: 'semester',\r\n            headerName: 'Semester',\r\n            sortable: true,\r\n            align: 'center',\r\n        },\r\n        {\r\n            minWidth: 200,\r\n            flex: 1,\r\n            field: 'subject',\r\n            headerName: 'Subject',\r\n            sortable: true,\r\n            align: 'center',\r\n        },\r\n        {\r\n            minWidth: 80,\r\n            flex: 0.3,\r\n            field: 'credit',\r\n            headerName: 'Credit',\r\n            sortable: true,\r\n            align: 'center',\r\n        },\r\n        {\r\n            minWidth: 80,\r\n            flex: 0.3,\r\n            field: 'score',\r\n            headerName: 'Score',\r\n            sortable: true,\r\n            align: 'center',\r\n        },\r\n        {\r\n            minWidth: 100,\r\n            flex: 0.4,\r\n            field: 'grade',\r\n            headerName: 'Grade',\r\n            editable: false,\r\n            sortable: false,\r\n            align: 'center',\r\n        },\r\n    ];\r\n    const [data, setData] = useState([]);\r\n    const [gpa, setGpa] = useState(null)\r\n    const [isLoading, setIsLoading] = useState(false)\r\n\r\n    function getRating(rating) {\r\n        axios.get(BASE_URL + `/otherService/studentsResults/${rating}`)\r\n            .then(res => {\r\n                const resData = res.data.obj?.obj?.map((row, index) => ({\r\n                    ...row,\r\n                    count: index + 1,\r\n                    grade:allGrade(row?.score)?.alph\r\n                }));\r\n                setData(resData)\r\n\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n            .finally(() => {\r\n                setIsLoading(false)\r\n            })\r\n    }\r\n    function getGpaData(id) {\r\n        axios.get(BASE_URL + `/otherService/studentsGPA/${id}`)\r\n            .then(res => {\r\n                const resData = res.data.obj?.obj[0]?.stGpa\r\n                setGpa(resData)\r\n\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n    useEffect(() => {\r\n        setIsLoading(true)\r\n        getRating(userId)\r\n        getGpaData(userId)\r\n\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <Container>\r\n            <Box display={'flex'} justifyContent={'end'}>\r\n                <Button size={'small'} variant={'contained'} color={'inherit'}>\r\n                    GPA:{gpa ? gpa :0}\r\n                </Button>\r\n            </Box>\r\n            <Title>\r\n                <FaClipboardList size={25}/>\r\n                <h1>Rating</h1>\r\n            </Title>\r\n            <Card>\r\n                <CardContent>\r\n                    <DataGrid\r\n                        loading={isLoading}\r\n                        components={{Toolbar: GridToolbar}}\r\n                        columns={columns}\r\n                        rows={data}\r\n                        pageSize={30}\r\n                        className=\"data-grid-container\"\r\n                        rowsPerPageOptions={[30, 60, 100]}\r\n                        autoHeight\r\n                    />\r\n                </CardContent>\r\n            </Card>\r\n        </Container>\r\n    );\r\n};\r\n\r\nconst Title = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  color: ${mainColor};\r\n  gap: 5px;\r\n\r\n  h1 {\r\n    margin: 0;\r\n    font-size: 30px;\r\n    font-weight: bold;\r\n\r\n  }\r\n`\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  padding: 1rem;\r\n\r\n  .MuiDataGrid-columnHeaderTitleContainer {\r\n    justify-content: center;\r\n  }\r\n`\r\n\r\nexport default StudentResults;"],"names":["Title","styled","mainColor","Container","userId","useSelector","state","user","id","allGrade","percentage","grade","alph","Min","Max","score","parseInt","find","item","useState","data","setData","gpa","setGpa","isLoading","setIsLoading","useEffect","rating","axios","BASE_URL","then","res","resData","obj","map","row","index","count","catch","err","console","log","finally","stGpa","display","justifyContent","size","variant","color","loading","components","Toolbar","GridToolbar","columns","field","headerName","sortable","width","align","minWidth","flex","editable","rows","pageSize","className","rowsPerPageOptions","autoHeight"],"sourceRoot":""}