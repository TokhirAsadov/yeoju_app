{"version":3,"file":"static/js/6696.2dd0c69f.chunk.js","mappings":"qXAGMA,EAAsB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAErBC,GAAcC,EAAAA,EAAAA,UAChB,kBACEF,IAAI,OAAKA,QAAL,IAAKA,OAAL,EAAKA,EAAMG,QAAO,SAACC,EAAD,GAAgC,IAAxBC,EAAuB,EAAvBA,QAAYC,GAAW,YACzCC,EAAgBH,EAAII,MAAK,SAACC,GAAD,OAAWA,EAAM,GAAGJ,UAAYA,KAQ/D,OANIE,EACAA,EAAcG,MAAd,QAAqBL,QAAAA,GAAYC,IAEjCF,EAAIM,KAAK,EAAC,QAAEL,QAAAA,GAAYC,KAGrBF,IACR,MAAO,KACd,CAACJ,IAGLW,QAAQC,IAAIX,EAAY,gBACxB,IAAMY,GAAeX,EAAAA,EAAAA,UACjB,iBAAO,CACHY,MAAO,CACHC,KAAM,OAEVC,YAAa,CACTC,IAAK,CACDC,aAAc,EACdC,YAAY,IAIpBC,WAAY,CACRC,SAAS,MAIjB,IAIEC,GAAgBC,EAAAA,EAAAA,cAClB,kBACItB,EAAYuB,KAAI,SAACf,GAAD,OACZA,EAAM,GAAGJ,QAAQoB,UAAU,EAAGhB,EAAM,GAAGJ,QAAQqB,QAAQ,MAAM,QAErE,CAACzB,IAGC0B,GAAYzB,EAAAA,EAAAA,UACd,iBAAO,CACH0B,OAAQ,CACJ,CACIC,KAAM,UACN7B,KAAMC,EAAYuB,KAAI,SAACf,GAAD,OAAWA,EAAMqB,YAG/CC,SAAQ,kBACDlB,GADA,IAEHmB,OAAQ,CACJC,MAAM,EACNC,UAAW,SAAUC,EAAKC,GAEtB,OAAOD,EAAIV,UAAU,EAAGU,EAAIT,QAAQ,QAExCW,QAAS,GAEbC,MAAO,CACHC,WAAYjB,UAIxB,CAACrB,EAAaY,EAAcS,IAGhC,OACI,SAAC,IAAD,CACIS,QAASJ,EAAUI,QACnBH,OAAQD,EAAUC,OAClBb,KAAK,MACLyB,MAAO,OACPC,OAAQ,WAKpB,GAAeC,EAAAA,EAAAA,MAAK3C,G,WCyEd4C,EAAYC,EAAAA,GAAAA,IAAH,8DAKf,EA3Jc,WACV,IAAMC,EAAU,CACZ,CACIC,MAAO,QACPC,WAAY,SACZP,MAAO,GACPQ,UAAU,EACVC,UAAU,GAEd,CACIH,MAAO,UACPC,WAAY,YACZP,MAAO,IACPS,UAAU,EACVC,WAAY,SAACC,GAAgB,IAAD,EACxB,OACI,iCAAIA,EAAWC,IAAI/C,eAAnB,aAAI,EAAwBoB,UAAU,EAAG0B,EAAWC,IAAI/C,QAAQqB,QAAQ,MAAQ,OAI5F,CACIoB,MAAO,YACPC,WAAY,cACZP,MAAO,IACPS,UAAU,EACVD,UAAU,EACVE,WAAY,SAACC,GAAgB,IAAD,EACxB,OACI,uBAAIE,GAAAA,CAAM,UAACF,EAAWC,WAAZ,aAAC,EAAgBE,WAAWC,OAAO,yBAK7D,GAA8BC,EAAAA,EAAAA,WAAS,GAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAwBF,EAAAA,EAAAA,UAAS,IAAjC,eAAOxD,EAAP,KAAa2D,EAAb,KACA,GAA8BH,EAAAA,EAAAA,UAAS,IAAvC,eAAOI,EAAP,KAAgBC,EAAhB,KACA,GAAwCL,EAAAA,EAAAA,UAAS,IAAjD,eAAOM,EAAP,KAAqBC,EAArB,KACOC,GAAWC,EAAAA,EAAAA,MAAXD,QAEDE,GAAiB3C,EAAAA,EAAAA,cAAY,WAC/B4C,EAAAA,EAAAA,IACSC,EAAAA,GAAW,eAAgB,CAACJ,QAAAA,IAChCK,MAAK,SAACC,GAEHT,EAAWS,EAAItE,KAAKuE,IAAI/C,KAAI,SAAAgD,GACxB,cAAOA,QAAP,IAAOA,OAAP,EAAOA,EAAMC,aAGpBC,OAAM,SAACC,GACJhE,QAAQC,IAAI+D,QAErB,IAEGC,GAA4BrD,EAAAA,EAAAA,cAAY,SAACsD,GAC3CV,EAAAA,EAAAA,IAAUC,EAAAA,GAAQ,4CAAwCS,GAAM,CAACb,QAAAA,IAC5DK,MAAK,SAAAC,GACF3D,QAAQC,IAAI0D,EAAItE,MAChB2D,EAAO,OAACW,QAAD,IAACA,OAAD,EAACA,EAAKtE,KAAKuE,IAAI/C,KAAI,SAACgD,EAAMM,GAAP,eAAC,UACpBN,GADmB,IAEtBO,MAAOD,EAAI,WAIlBJ,OAAM,SAAAC,GAAG,OAAIhE,QAAQC,IAAI+D,MACzBK,SAAQ,kBAAMtB,GAAW,QAC/B,CAACI,IAEEmB,GAAY1D,EAAAA,EAAAA,cAAY,WAC1B4C,EAAAA,EAAAA,IAAUC,EAAAA,GAAW,4BAA6B,CAACJ,QAAAA,IAC9CK,MAAK,SAAAC,GACFX,EAAO,OAACW,QAAD,IAACA,OAAD,EAACA,EAAKtE,KAAKuE,IAAI/C,KAAI,SAACgD,EAAMM,GAAP,eAAC,UACpBN,GADmB,IAEtBO,MAAOD,EAAI,WAIlBJ,OAAM,SAAAC,GAAG,OAAIhE,QAAQC,IAAI+D,MACzBK,SAAQ,kBAAMtB,GAAW,QAC/B,IAkBH,OAhBAwB,EAAAA,EAAAA,YAAU,WACNhB,MACD,KAGHgB,EAAAA,EAAAA,YAAU,WAENxB,GAAW,kBAAM,KACI,KAAjBI,EACAmB,IAEAnB,GAAgBc,EAA0Bd,KAE/C,CAACA,KAIA,SAACnB,EAAD,WAGI,SAACwC,EAAA,EAAD,WACI,UAACC,EAAA,EAAD,YACI,UAACC,EAAA,EAAD,CACIC,GAAI,CACA9C,MAAO,IACP+C,GAAI,GAERV,GAAG,2BACHW,QAAM,EACNC,MAAM,QACNC,MAAO5B,EACP6B,SAAU,SAACC,GAAD,OAAO7B,EAAgB6B,EAAEC,OAAOH,QAT9C,WAWI,SAACI,EAAA,EAAD,CAAUJ,MAAM,GAAhB,UACI,mCAEH9B,GAAWA,EAAQpC,KAAI,SAACuE,GAAD,OACpB,SAACD,EAAA,EAAD,CAA2BJ,MAAK,OAAEK,QAAF,IAAEA,OAAF,EAAEA,EAAQlB,GAA1C,gBACKkB,QADL,IACKA,OADL,EACKA,EAAQC,UADb,OAAeD,QAAf,IAAeA,OAAf,EAAeA,EAAQlB,WAK/B,UAACoB,EAAA,EAAD,CACIX,GAAI,CACAY,QAAS,OACTC,oBAAqB,OACrBC,IAAK,GAJb,WAOI,SAAC,EAAD,CAAqBpG,KAAMA,KAC3B,SAACqG,EAAA,EAAD,CACIC,MAAO,CAAC9D,MAAO,QACfK,QAASA,EACT0D,KAAMvG,GAAQ,GACdwG,QAAS/C,EACTgD,WAAY,CAACC,QAASC,EAAAA,GACtBC,YAAU,EACVC,SAAU,GACVC,mBAAoB,CAAC,GAAI,GAAI","sources":["components/uquvbulimi/deans/StatisticsDeanChart.jsx","components/uquvbulimi/deans/Deans.jsx"],"sourcesContent":["import React, {useMemo, useCallback, memo} from 'react';\r\nimport Chart from 'react-apexcharts';\r\n\r\nconst StatisticsDeanChart = ({ data }) => {\r\n\r\n    const groupedData = useMemo(\r\n        () =>\r\n          data &&  data?.reduce((acc, { passage, ...rest }) => {\r\n                const existingGroup = acc.find((group) => group[0].passage === passage);\r\n\r\n                if (existingGroup) {\r\n                    existingGroup.push({ passage, ...rest });\r\n                } else {\r\n                    acc.push([{ passage, ...rest }]);\r\n                }\r\n\r\n                return acc;\r\n            }, []) || [],\r\n        [data]\r\n    );\r\n\r\n    console.log(groupedData,'dddddddddddd')\r\n    const chartOptions = useMemo(\r\n        () => ({\r\n            chart: {\r\n                type: 'bar',\r\n            },\r\n            plotOptions: {\r\n                bar: {\r\n                    borderRadius: 4,\r\n                    horizontal: true,\r\n                },\r\n\r\n            },\r\n            dataLabels: {\r\n                enabled: false,\r\n            },\r\n\r\n        }),\r\n        []\r\n    );\r\n\r\n\r\n    const getCategories = useCallback(\r\n        () =>\r\n            groupedData.map((group) =>\r\n                group[0].passage.substring(0, group[0].passage.indexOf('is')-1)\r\n            ),\r\n        [groupedData]\r\n    );\r\n\r\n    const chartData = useMemo(\r\n        () => ({\r\n            series: [\r\n                {\r\n                    name: \"actions\",\r\n                    data: groupedData.map((group) => group.length),\r\n                },\r\n            ],\r\n            options: {\r\n                ...chartOptions,\r\n                labels: {\r\n                    show: true,\r\n                    formatter: function (val, index) {\r\n\r\n                        return val.substring(0, val.indexOf('is'));\r\n                    },\r\n                    offsetX: 0,\r\n                },\r\n                xaxis: {\r\n                    categories: getCategories(),\r\n                },\r\n            },\r\n        }),\r\n        [groupedData, chartOptions, getCategories]\r\n    );\r\n\r\n    return (\r\n        <Chart\r\n            options={chartData.options}\r\n            series={chartData.series}\r\n            type=\"bar\"\r\n            width={'100%'}\r\n            height={'300px'}\r\n        />\r\n    );\r\n};\r\n\r\nexport default memo(StatisticsDeanChart);\r\n","import React, {useCallback, useEffect, useState} from 'react';\r\nimport styled from \"styled-components\";\r\nimport {BASE_URL, getHeaders} from \"../../../utills/ServiceUrls\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment/moment\";\r\nimport {Card, CardContent, TextField} from \"@mui/material\";\r\nimport {DataGrid, GridToolbar} from \"@mui/x-data-grid\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport StatisticsDeanChart from \"./StatisticsDeanChart\";\r\nimport Box from \"@mui/material/Box\";\r\n\r\nconst Deans = () => {\r\n    const columns = [\r\n        {\r\n            field: 'count',\r\n            headerName: 'â„–',\r\n            width: 40,\r\n            sortable: true,\r\n            editable: false,\r\n        },\r\n        {\r\n            field: 'passage',\r\n            headerName: 'Full Name',\r\n            width: 300,\r\n            editable: false,\r\n            renderCell: (cellValues) => {\r\n                return (\r\n                    <p>{cellValues.row.passage?.substring(0, cellValues.row.passage.indexOf('is') - 1)}</p>\r\n                );\r\n            }\r\n        },\r\n        {\r\n            field: 'updatedAt',\r\n            headerName: 'Action date',\r\n            width: 200,\r\n            editable: false,\r\n            sortable: true,\r\n            renderCell: (cellValues) => {\r\n                return (\r\n                    <p>{moment(cellValues.row?.updatedAt).format('DD.MM.YYYY HH:mm')}</p>\r\n                );\r\n            }\r\n        },\r\n    ];\r\n    const [spinner, setSpinner] = useState(true);\r\n    const [data, setData] = useState([]);\r\n    const [deanAll, setDeanAll] = useState([]);\r\n    const [selectedDean, setSelectedDean] = useState('')\r\n    const {headers} = getHeaders()\r\n\r\n    const fetchDataDeans = useCallback(() => {\r\n        axios\r\n            .get(BASE_URL + '/dekanat/all', {headers})\r\n            .then((res) => {\r\n\r\n                setDeanAll(res.data.obj.map(item => {\r\n                    return item?.owner\r\n                }));\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    }, []);\r\n\r\n    const fetchDataDeansByCreatorId = useCallback((id) => {\r\n        axios.get(BASE_URL + `/dataOfLastActive/findByCreatorId/${id}`, {headers})\r\n            .then(res => {\r\n                console.log(res.data);\r\n                setData(res?.data.obj.map((item, i) => ({\r\n                    ...item,\r\n                    count: i + 1\r\n                })));\r\n\r\n            })\r\n            .catch(err => console.log(err))\r\n            .finally(() => setSpinner(false));\r\n    }, [selectedDean]);\r\n\r\n    const fetchData = useCallback(() => {\r\n        axios.get(BASE_URL + '/dataOfLastActive/findAll', {headers})\r\n            .then(res => {\r\n                setData(res?.data.obj.map((item, i) => ({\r\n                    ...item,\r\n                    count: i + 1\r\n                })));\r\n\r\n            })\r\n            .catch(err => console.log(err))\r\n            .finally(() => setSpinner(false));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        fetchDataDeans()\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        setSpinner(() => true);\r\n        if (selectedDean === \"\") {\r\n            fetchData();\r\n        } else {\r\n            selectedDean && fetchDataDeansByCreatorId(selectedDean)\r\n        }\r\n    }, [selectedDean])\r\n\r\n\r\n    return (\r\n        <Container>\r\n\r\n\r\n            <Card>\r\n                <CardContent>\r\n                    <TextField\r\n                        sx={{\r\n                            width: 300,\r\n                            mb: 2,\r\n                        }}\r\n                        id=\"outlined-select-currency\"\r\n                        select\r\n                        label=\"Deans\"\r\n                        value={selectedDean}\r\n                        onChange={(e) => setSelectedDean(e.target.value)}\r\n                    >\r\n                        <MenuItem value=\"\">\r\n                            <em>None</em>\r\n                        </MenuItem>\r\n                        {deanAll && deanAll.map((option) => (\r\n                            <MenuItem key={option?.id} value={option?.id}>\r\n                                {option?.fullName}\r\n                            </MenuItem>\r\n                        ))}\r\n                    </TextField>\r\n                    <Box\r\n                        sx={{\r\n                            display: 'grid',\r\n                            gridTemplateColumns: '1fr ',\r\n                            gap: 5,\r\n                        }}\r\n                    >\r\n                        <StatisticsDeanChart data={data}/>\r\n                        <DataGrid\r\n                            style={{width: \"100%\"}}\r\n                            columns={columns}\r\n                            rows={data || []}\r\n                            loading={spinner}\r\n                            components={{Toolbar: GridToolbar}}\r\n                            autoHeight\r\n                            pageSize={20}\r\n                            rowsPerPageOptions={[20, 30, 50]}\r\n                        />\r\n\r\n                    </Box>\r\n\r\n                </CardContent>\r\n            </Card>\r\n        </Container>\r\n    );\r\n};\r\n\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    padding: 1rem;\r\n`;\r\n\r\nexport default Deans;\r\n"],"names":["StatisticsDeanChart","data","groupedData","useMemo","reduce","acc","passage","rest","existingGroup","find","group","push","console","log","chartOptions","chart","type","plotOptions","bar","borderRadius","horizontal","dataLabels","enabled","getCategories","useCallback","map","substring","indexOf","chartData","series","name","length","options","labels","show","formatter","val","index","offsetX","xaxis","categories","width","height","memo","Container","styled","columns","field","headerName","sortable","editable","renderCell","cellValues","row","moment","updatedAt","format","useState","spinner","setSpinner","setData","deanAll","setDeanAll","selectedDean","setSelectedDean","headers","getHeaders","fetchDataDeans","axios","BASE_URL","then","res","obj","item","owner","catch","err","fetchDataDeansByCreatorId","id","i","count","finally","fetchData","useEffect","Card","CardContent","TextField","sx","mb","select","label","value","onChange","e","target","MenuItem","option","fullName","Box","display","gridTemplateColumns","gap","DataGrid","style","rows","loading","components","Toolbar","GridToolbar","autoHeight","pageSize","rowsPerPageOptions"],"sourceRoot":""}