{"version":3,"file":"static/js/5857.8ce4a4a2.chunk.js","mappings":"+VAsFA,EA9E2B,SAAC,GAAwC,IAAvCA,EAAsC,EAAtCA,UAAWC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,aACvCC,GAAuBC,EAAAA,EAAAA,QAAO,MAC7BC,GAAWC,EAAAA,EAAAA,MAAXD,QACP,GAA0BE,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACKC,GAASC,EAAAA,EAAAA,MAERC,EAAc,SAACC,EAAIC,GACrBC,EAAAA,EAAAA,IAAA,UAAaC,EAAAA,IAAb,OAAwBhB,GAAxB,OAAoCa,GAAO,CACvCR,QAAAA,EACAY,YAAaH,EAAqBI,QAEjCC,MAAK,SAACC,GACH,IAAMC,EAAUD,EAAIE,KAAKC,IAAIA,IAC7BtB,EAAO,OAACoB,QAAD,IAACA,OAAD,EAACA,EAASG,KAAI,SAACC,EAAKC,GAAN,eAAC,UACfD,GADc,IAEjBE,MAAOD,EAAQ,WAGtBE,OAAM,SAACC,GACAd,EAAAA,EAAAA,SAAec,GACfC,QAAQC,IAAI,oBAAqBF,EAAIG,SAErCF,QAAQG,MAAMJ,MAGrBK,SAAQ,WACLhC,GAAa,QAGzBiC,EAAAA,EAAAA,YAAU,WACN,IAAMrB,EAAuBC,EAAAA,EAAAA,YAAAA,SAI7B,MAHc,KAAVP,GACAI,EAAcJ,EAAOM,GAElB,WACHA,EAAqBsB,OAAO,mDAEjC,CAAC1B,EAAS2B,MAwBb,OACI,SAACC,EAAA,EAAD,CACIC,YAAa,oBACbC,KAAM,QACNhC,MAAOA,EACPiC,SAAU,SAAAC,GAAC,OA5BE,SAAC7B,GAClBJ,EAASI,GACLV,EAAqBwC,SACrBxC,EAAqBwC,QAAQP,OAAO,0CAExC,IAAMtB,EAAuBC,EAAAA,EAAAA,YAAAA,SAC7BZ,EAAqBwC,QAAU7B,EAE/B,IAAM8B,EAAkBC,YAAW,WAC3BhC,EAAIiC,QAAU,IACd5C,GAAa,GACbU,EAAcC,EAAIC,MAEvB,KAEH,OAAO,WACCA,GACAA,EAAqBsB,OAAO,gDAEhCW,aAAaH,IASEI,CAAaN,EAAEO,OAAOzC,QACrC0C,GAAG,8BACHC,GAAI,CAACC,MAAO,SACZC,WAAY,CACRC,gBAAgB,SAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,UACZ,SAAC,MAAD,CAAUhB,KAAM,W,WC7B9BiB,EAAQC,EAAAA,GAAAA,IAAH,4KAGAC,EAAAA,IAULC,EAAYF,EAAAA,GAAAA,IAAH,4IAQf,EA9D6B,SAAC,GAAmB,IAAlBG,EAAiB,EAAjBA,YACpBC,EAAyBD,EAAzBC,QAAQC,EAAiBF,EAAjBE,MAAM/D,EAAW6D,EAAX7D,UAErB,GAAwBO,EAAAA,EAAAA,UAAS,IAAjC,eAAOe,EAAP,KAAarB,EAAb,KACA,GAAkCM,EAAAA,EAAAA,WAAS,GAA3C,eAAOyD,EAAP,KAAkB9D,EAAlB,KAIA,OACI,UAAC0D,EAAD,YACI,UAACH,EAAD,YACI,SAAC,MAAD,CAAiBjB,KAAM,MACvB,wBAAKuB,QAET,SAACE,EAAA,EAAD,WACI,UAACC,EAAA,EAAD,YACI,SAACC,EAAA,EAAD,CAAKhB,GAAI,CAACiB,GAAG,GAAb,UACI,SAAC,EAAD,CAAoBnE,QAASA,EAASD,UAAWA,EAAWE,aAAcA,OAE9E,SAACmE,EAAA,EAAD,CACIP,QAASA,EACTQ,KAAMhD,GAAQ,GACdiD,QAASP,EACTQ,WAAY,CAACC,QAASC,EAAAA,GACtBC,mBAAoB,CAAC,GAAI,GAAI,GAAI,GAAI,KACrCC,YAAU,EACVC,aAAc,CACVf,QAAS,CACLgB,sBAAuB,CACnBC,UAAU,EACVC,QAAQ,EACRC,SAAS","sources":["components/monitoringAssistant/SearchForAssitant.jsx","components/monitoringAssistant/DataGridForAssistant.jsx"],"sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\r\nimport axios from \"axios\";\r\nimport {BASE_URL, getHeaders} from \"../../utills/ServiceUrls\";\r\nimport {TextField} from \"@mui/material\";\r\nimport InputAdornment from \"@mui/material/InputAdornment\";\r\nimport {BsSearch} from \"react-icons/bs\";\r\nimport {useLocation} from \"react-router-dom\";\r\n\r\nconst SearchForAssistant = ({searchUrl, setData, setIsLoading}) => {\r\n    const cancelTokenSourceRef = useRef(null);\r\n    const {headers} = getHeaders()\r\n    const [value, setValue] = useState('')\r\n   const location=useLocation()\r\n\r\n    const getSearchData=(val,newCancelTokenSource)=>{\r\n        axios.get(`${BASE_URL}${searchUrl}${val}`, {\r\n            headers,\r\n            cancelToken: newCancelTokenSource.token,\r\n        })\r\n            .then((res) => {\r\n                const resData = res.data.obj.obj;\r\n                setData(resData?.map((row, index) => ({\r\n                    ...row,\r\n                    count: index + 1,\r\n                })));\r\n            })\r\n            .catch((err) => {\r\n                if (axios.isCancel(err)) {\r\n                    console.log('Request canceled:', err.message);\r\n                } else {\r\n                    console.error(err);\r\n                }\r\n            })\r\n            .finally(() => {\r\n                setIsLoading(false)\r\n            });\r\n    }\r\n    useEffect(() => {\r\n        const newCancelTokenSource = axios.CancelToken.source();\r\n        if (value !== '') {\r\n            getSearchData(value, newCancelTokenSource);\r\n        }\r\n        return () => {\r\n            newCancelTokenSource.cancel('Operation canceled due to component unmount.');\r\n        };\r\n    }, [location.key]);\r\n    const handleSearch = (val) => {\r\n        setValue(val)\r\n        if (cancelTokenSourceRef.current) {\r\n            cancelTokenSourceRef.current.cancel('Operation canceled due to new request.');\r\n        }\r\n        const newCancelTokenSource = axios.CancelToken.source();\r\n        cancelTokenSourceRef.current = newCancelTokenSource;\r\n\r\n        const delayDebounceFn = setTimeout(() => {\r\n            if (val.length >= 3) {\r\n                setIsLoading(true)\r\n                getSearchData(val,newCancelTokenSource)\r\n            }\r\n        }, 300);\r\n\r\n        return () => {\r\n            if (newCancelTokenSource) {\r\n                newCancelTokenSource.cancel('Operation canceled due to component unmount.');\r\n            }\r\n            clearTimeout(delayDebounceFn);\r\n        };\r\n    };\r\n\r\n    return (\r\n        <TextField\r\n            placeholder={'Search by ID card'}\r\n            size={'small'}\r\n            value={value}\r\n            onChange={e => handleSearch(e.target.value)}\r\n            id=\"outlined-start-adornmentdfg\"\r\n            sx={{width: '300px'}}\r\n            InputProps={{\r\n                startAdornment: <InputAdornment position=\"start\">\r\n                    <BsSearch size={20}/>\r\n                </InputAdornment>,\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default SearchForAssistant;","import React, {useState} from 'react';\r\nimport {Card, CardContent} from \"@mui/material\";\r\nimport {FaClipboardList} from \"react-icons/fa\";\r\nimport {DataGrid, GridToolbar} from \"@mui/x-data-grid\";\r\nimport styled from \"styled-components\";\r\nimport SearchForAssistant from \"./SearchForAssitant\";\r\nimport Box from \"@mui/material/Box\";\r\nimport {mainColor} from \"../../utills/ServiceUrls\";\r\n\r\nconst DataGridForAssistant = ({dataForPage}) => {\r\n    const {columns,title,searchUrl}=dataForPage\r\n\r\n    const [data, setData] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false)\r\n\r\n\r\n\r\n    return (\r\n        <Container>\r\n            <Title>\r\n                <FaClipboardList size={25}/>\r\n                <h1>{title}</h1>\r\n            </Title>\r\n            <Card>\r\n                <CardContent>\r\n                    <Box sx={{mb:2}}>\r\n                        <SearchForAssistant setData={setData} searchUrl={searchUrl} setIsLoading={setIsLoading}/>\r\n                    </Box>\r\n                    <DataGrid\r\n                        columns={columns}\r\n                        rows={data || []}\r\n                        loading={isLoading}\r\n                        components={{Toolbar: GridToolbar}}\r\n                        rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n                        autoHeight\r\n                        initialState={{ // hide items\r\n                            columns: {\r\n                                columnVisibilityModel: {\r\n                                    currents: false,\r\n                                    finals: false,\r\n                                    retakeN: false,\r\n                                },\r\n                            },\r\n                        }}\r\n                    />\r\n                </CardContent>\r\n            </Card>\r\n        </Container>\r\n    );\r\n};\r\nconst Title = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  color: ${mainColor};\r\n  gap: 5px;\r\n\r\n  h1 {\r\n    margin: 0;\r\n    font-size: 30px;\r\n    font-weight: bold;\r\n\r\n  }\r\n`\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  padding: 1rem;\r\n\r\n  .MuiDataGrid-columnHeaderTitleContainer {\r\n    justify-content: center;\r\n  }\r\n`\r\nexport default DataGridForAssistant;"],"names":["searchUrl","setData","setIsLoading","cancelTokenSourceRef","useRef","headers","getHeaders","useState","value","setValue","location","useLocation","getSearchData","val","newCancelTokenSource","axios","BASE_URL","cancelToken","token","then","res","resData","data","obj","map","row","index","count","catch","err","console","log","message","error","finally","useEffect","cancel","key","TextField","placeholder","size","onChange","e","current","delayDebounceFn","setTimeout","length","clearTimeout","handleSearch","target","id","sx","width","InputProps","startAdornment","InputAdornment","position","Title","styled","mainColor","Container","dataForPage","columns","title","isLoading","Card","CardContent","Box","mb","DataGrid","rows","loading","components","Toolbar","GridToolbar","rowsPerPageOptions","autoHeight","initialState","columnVisibilityModel","currents","finals","retakeN"],"sourceRoot":""}