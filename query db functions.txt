

CREATE OR ALTER FUNCTION dbo.get_course_group_details (@plan_id varchar(36))
    RETURNS NVARCHAR(MAX)
AS
BEGIN
    DECLARE @result NVARCHAR(MAX);
    DECLARE @course_test NVARCHAR(MAX);

    -- Har doim 1 ta obyekt sifatida course_test ni olish
    SELECT @course_test = (
        SELECT TOP 1
            ct.id,
            ct.title,
            ct.createdAt,
            ct.updatedAt,
            (
                SELECT COUNT(*)
                FROM testQuestion tq
                WHERE tq.test_id = ct.id
            ) AS question_count
        FROM courseTest ct
        WHERE ct.course_id = c.id
        FOR JSON PATH, WITHOUT_ARRAY_WRAPPER
    )
    FROM course c
    WHERE c.plan_id = @plan_id;

    -- Agar NULL bo‘lsa, bo‘sh obyekt qilib belgilaymiz
    SET @course_test = ISNULL(@course_test, '{}');

    SELECT @result = (
        SELECT
            c.id AS course_id,
            c.title AS course_title,

            (
                SELECT
                    m.id AS module_id,
                    m.title AS module_title,
                    m.theme AS module_theme
                FROM module m
                WHERE m.course_id = c.id
                FOR JSON PATH
            ) AS modules,

            JSON_QUERY(@course_test) AS course_test

        FROM course c
        WHERE c.plan_id = @plan_id
        FOR JSON PATH, WITHOUT_ARRAY_WRAPPER
    );

    DECLARE @groups NVARCHAR(MAX);

    SELECT @groups = (
        SELECT
            g.id AS group_id,
            g.name AS group_name,
            p.level
        FROM [groups] g
                 JOIN PlanOfSubjectV2_groups pg ON g.id = pg.groups_id
                 JOIN PlanOfSubjectV2 p ON pg.PlanOfSubjectV2_id = p.id
        WHERE p.id = @plan_id
        FOR JSON PATH
    );

    RETURN '{ "course": ' + @result + ', "groups": ' + @groups + ' }';
END;

CREATE OR ALTER FUNCTION dbo.get_course_group_details (@plan_id varchar(36))
    RETURNS NVARCHAR(MAX)
AS
BEGIN
    DECLARE @result NVARCHAR(MAX);

    SELECT @result = (
        SELECT
            c.id AS course_id,
            c.title AS course_title,

            (
                SELECT
                    m.id AS module_id,
                    m.title AS module_title,
                    m.theme AS module_theme
                FROM module m
                WHERE m.course_id = c.id
                FOR JSON PATH
            ) AS modules,

            (
                SELECT TOP 1
                    ct.id,
                    ct.title,
                    ct.createdAt,
                    ct.updatedAt,
                    (
                        SELECT COUNT(*)
                        FROM testQuestion tq
                        WHERE tq.test_id = ct.id
                    ) AS question_count
                FROM courseTest ct
                WHERE ct.course_id = c.id
                FOR JSON PATH, WITHOUT_ARRAY_WRAPPER
            ) AS course_test

        FROM course c
        WHERE c.plan_id = @plan_id
        FOR JSON PATH, WITHOUT_ARRAY_WRAPPER
    );

    DECLARE @groups NVARCHAR(MAX);

    SELECT @groups = (
        SELECT
            g.id AS group_id,
            g.name AS group_name,
            g.level
        FROM [groups] g
                 JOIN PlanOfSubjectV2_groups pg ON g.id = pg.groups_id
                 JOIN PlanOfSubjectV2 p ON pg.PlanOfSubjectV2_id = p.id
        WHERE p.id = @plan_id
        FOR JSON PATH
    );

    -- Bu yerda course va groups ni qo‘shamiz, har ikkalasi allaqachon JSON string
    -- Shuning uchun, natijani qo‘lda JSON formatda birlashtiramiz

    RETURN
        '{ "course": ' + @result + ', "groups": ' + @groups + ' }';
END;


'2024-10-17'
'2024-10-18 17:00'


'2024-10-18 17:30'







-- Now, create the trigger
CREATE TRIGGER trg_acc_monitor_log_insert
    ON acc_monitor_log
    AFTER INSERT
    AS
BEGIN
    -- Declare necessary variables
    DECLARE @id INT;
    DECLARE @deviceId INT;
    DECLARE @eventId INT;
    DECLARE @time DATETIME;
    DECLARE @carnNo NVARCHAR(200);

    -- Select the data from the inserted row
    SELECT @id = id,
           @deviceId = device_id,
           @eventId = event_point_id,
           @time = time,
           @carnNo = card_no
    FROM inserted;

    DECLARE @cardId varchar(255);
    DECLARE @cardId2 varchar(255);

    set @cardId = (
        SELECT TOP 1 c.id
        FROM CardDB c
                 JOIN WeekOfEducationYear w ON c.weekOfEducationYear_id = w.id
                 JOIN acc_door ad ON (ad.door_name COLLATE SQL_Latin1_General_CP1_CI_AS LIKE '%' + c.classroom + '%' COLLATE SQL_Latin1_General_CP1_CI_AS) or (c.classroom COLLATE SQL_Latin1_General_CP1_CI_AS LIKE '%' + ad.door_name + '%' COLLATE SQL_Latin1_General_CP1_CI_AS)

        WHERE w.year = YEAR(@time)
          AND w.sortNumber = DATEPART(WEEK, @time)
          AND c.day = DATEPART(WEEKDAY, @time) - 1
          AND c.period = DATEPART(HOUR, DATEADD(MINUTE, 10, @time)) - 8
          AND ad.device_id = @deviceId and ad.door_no=@eventId
    );

    set @cardId2 = (
        SELECT TOP 1 c.id
        FROM CardDB c
                 JOIN WeekOfEducationYear w ON c.weekOfEducationYear_id = w.id
                 JOIN acc_door ad ON (ad.door_name COLLATE SQL_Latin1_General_CP1_CI_AS LIKE '%' + c.classroom + '%' COLLATE SQL_Latin1_General_CP1_CI_AS) or (c.classroom COLLATE SQL_Latin1_General_CP1_CI_AS LIKE '%' + ad.door_name + '%' COLLATE SQL_Latin1_General_CP1_CI_AS)

        WHERE w.year = YEAR(@time)
          AND w.sortNumber = DATEPART(WEEK, @time)
          AND c.day = DATEPART(WEEKDAY, @time) - 1
          AND c.period = DATEPART(HOUR, DATEADD(MINUTE, 10, @time)) - 7
          AND ad.device_id = @deviceId and ad.door_no=@eventId
    );

    DECLARE @classroom varchar(255);
    set @classroom = (select top 1 classroom from CardDB where id=@cardId);


    if @cardId is not null
        -- Insert a new row into the audit table with the log details
        BEGIN
            if (DATEPART(HOUR, DATEADD(MINUTE, 10, @time)) - 8) != 0
                BEGIN
                    INSERT INTO CardDbStatistics (id, cardDB_id, rfid, time)
                    SELECT NEWID(), f.id, @carnNo, @time
                    FROM (
                             SELECT c.id
                             FROM CardDB c
                                      JOIN WeekOfEducationYear w ON c.weekOfEducationYear_id = w.id
                                      JOIN acc_door ad ON (ad.door_name COLLATE SQL_Latin1_General_CP1_CI_AS LIKE '%' + c.classroom + '%' COLLATE SQL_Latin1_General_CP1_CI_AS)
                                 OR (c.classroom COLLATE SQL_Latin1_General_CP1_CI_AS LIKE '%' + ad.door_name + '%' COLLATE SQL_Latin1_General_CP1_CI_AS)
                             WHERE w.year = YEAR(@time)
                               AND w.sortNumber = DATEPART(WEEK, @time)
                               AND c.day = DATEPART(WEEKDAY, @time) - 1
                               AND c.period = DATEPART(HOUR, DATEADD(MINUTE, 10, @time)) - 8
                               AND ad.device_id = @deviceId
                               AND ad.door_no = @eventId
                             group by c.id
                         ) AS f;
                END
            ELSE
                BEGIN
                    if dbo.ExistsCardDBItem(@time,@classroom)=1
                        BEGIN
                            INSERT INTO CardDbStatistics (id, cardDB_id, rfid, time)
                            SELECT NEWID(), f.id, @carnNo, @time
                            FROM (
                                     SELECT c.id
                                     FROM CardDB c
                                              JOIN WeekOfEducationYear w ON c.weekOfEducationYear_id = w.id
                                              JOIN acc_door ad ON (ad.door_name COLLATE SQL_Latin1_General_CP1_CI_AS LIKE '%' + c.classroom + '%' COLLATE SQL_Latin1_General_CP1_CI_AS)
                                         OR (c.classroom COLLATE SQL_Latin1_General_CP1_CI_AS LIKE '%' + ad.door_name + '%' COLLATE SQL_Latin1_General_CP1_CI_AS)
                                     WHERE w.year = YEAR(@time)
                                       AND w.sortNumber = DATEPART(WEEK, @time)
                                       AND c.day = DATEPART(WEEKDAY, @time) - 1
                                       AND c.period = DATEPART(HOUR, DATEADD(MINUTE, 10, @time)) - 8
                                       AND ad.device_id = @deviceId
                                       AND ad.door_no = @eventId
                                     group by c.id
                                 ) AS f;
                        end
                    ELSE
                        BEGIN
                            INSERT INTO CardDbStatistics (id, cardDB_id, rfid, time)
                            SELECT NEWID(), f.id, @carnNo, @time
                            FROM (
                                     SELECT c.id
                                     FROM CardDB c
                                              JOIN WeekOfEducationYear w ON c.weekOfEducationYear_id = w.id
                                              JOIN acc_door ad ON (ad.door_name COLLATE SQL_Latin1_General_CP1_CI_AS LIKE '%' + c.classroom + '%' COLLATE SQL_Latin1_General_CP1_CI_AS)
                                         OR (c.classroom COLLATE SQL_Latin1_General_CP1_CI_AS LIKE '%' + ad.door_name + '%' COLLATE SQL_Latin1_General_CP1_CI_AS)
                                     WHERE w.year = YEAR(@time)
                                       AND w.sortNumber = DATEPART(WEEK, @time)
                                       AND c.day = DATEPART(WEEKDAY, @time) - 1
                                       AND c.period = DATEPART(HOUR, DATEADD(MINUTE, 10, @time)) - 7
                                       AND ad.device_id = @deviceId
                                       AND ad.door_no = @eventId
                                     group by c.id
                                 ) AS f;
                        end
                end
        END;
    if @cardId2 is not null and (DATEPART(HOUR, DATEADD(MINUTE, 10, @time)) = 8)
        BEGIN
            if dbo.ExistsCardDBItem(@time,@classroom)=1
                BEGIN
                    INSERT INTO CardDbStatistics (id, cardDB_id, rfid, time)
                    SELECT NEWID(), f.id, @carnNo, @time
                    FROM (
                             SELECT c.id
                             FROM CardDB c
                                      JOIN WeekOfEducationYear w ON c.weekOfEducationYear_id = w.id
                                      JOIN acc_door ad ON (ad.door_name COLLATE SQL_Latin1_General_CP1_CI_AS LIKE '%' + c.classroom + '%' COLLATE SQL_Latin1_General_CP1_CI_AS)
                                 OR (c.classroom COLLATE SQL_Latin1_General_CP1_CI_AS LIKE '%' + ad.door_name + '%' COLLATE SQL_Latin1_General_CP1_CI_AS)
                             WHERE w.year = YEAR(@time)
                               AND w.sortNumber = DATEPART(WEEK, @time)
                               AND c.day = DATEPART(WEEKDAY, @time) - 1
                               AND c.period = DATEPART(HOUR, DATEADD(MINUTE, 10, @time)) - 8
                               AND ad.device_id = @deviceId
                               AND ad.door_no = @eventId
                             group by c.id
                         ) AS f;
                end
            ELSE
                BEGIN
                    INSERT INTO CardDbStatistics (id, cardDB_id, rfid, time)
                    SELECT NEWID(), f.id, @carnNo, @time
                    FROM (
                             SELECT c.id
                             FROM CardDB c
                                      JOIN WeekOfEducationYear w ON c.weekOfEducationYear_id = w.id
                                      JOIN acc_door ad ON (ad.door_name COLLATE SQL_Latin1_General_CP1_CI_AS LIKE '%' + c.classroom + '%' COLLATE SQL_Latin1_General_CP1_CI_AS)
                                 OR (c.classroom COLLATE SQL_Latin1_General_CP1_CI_AS LIKE '%' + ad.door_name + '%' COLLATE SQL_Latin1_General_CP1_CI_AS)
                             WHERE w.year = YEAR(@time)
                               AND w.sortNumber = DATEPART(WEEK, @time)
                               AND c.day = DATEPART(WEEKDAY, @time) - 1
                               AND c.period = DATEPART(HOUR, DATEADD(MINUTE, 10, @time)) - 7
                               AND ad.device_id = @deviceId
                               AND ad.door_no = @eventId
                             group by c.id
                         ) AS f;
                end
        end

--         VALUES (NEWID(),@cardId,@carnNo,@time);
END;
go



CREATE FUNCTION dbo.ExistsCardDBItem (
    @date DATETIME,
    @classroom INT
)
    RETURNS BIT
AS
BEGIN
    DECLARE @exists BIT;

    SELECT @exists = CASE WHEN EXISTS (
        SELECT 1
        FROM CardDB c
                 JOIN WeekOfEducationYear w ON c.weekOfEducationYear_id = w.id
        WHERE w.year = YEAR(@date)
          AND w.sortNumber = DATEPART(WEEK, @date)
          AND c.day = DATEPART(WEEKDAY, @date) - 1
          AND c.period = DATEPART(HOUR, DATEADD(MINUTE, 10, @date)) - 8
          AND c.classroom = @classroom
    ) THEN 1 ELSE 0 END;

    RETURN @exists;
END;


CREATE FUNCTION dbo.GetDateRangeAttendanceByFacultyAndCourse
(
    @StartDate DATE,
    @EndDate DATE,
    @faculty varchar(255),
    @course int
)
    RETURNS @AttendanceTable TABLE
                             (
                                 DateValue DATE,
                                 totalAllStudent INT,
                                 totalComeCount INT
                             )
AS
BEGIN
    WITH DateRange AS (
        SELECT @StartDate AS DateValue
        UNION ALL
        SELECT DATEADD(DAY, 1, DateValue)
        FROM DateRange
        WHERE DATEADD(DAY, 1, DateValue) <= @EndDate
    )
    INSERT INTO @AttendanceTable
    SELECT
        DateValue,
        Attendance.totalAllStudent,
        Attendance.totalComeCount
    FROM DateRange
             CROSS APPLY dbo.GetTotalClassroomAttendanceByFacultyAndCourse(YEAR(DateValue), DATEPART(WEEK, DateValue), DATEPART(WEEKDAY, DateValue) - 1,@faculty,@course) AS Attendance
    WHERE DATEPART(WEEKDAY, DateValue) != 1  -- Exclude Sundays
    OPTION (MAXRECURSION 0);

    RETURN;
END;


CREATE FUNCTION dbo.GetDateRangeAttendanceByFaculty
(
    @StartDate DATE,
    @EndDate DATE,
    @faculty varchar(255)
)
    RETURNS @AttendanceTable TABLE
                             (
                                 DateValue DATE,
                                 totalAllStudent INT,
                                 totalComeCount INT
                             )
AS
BEGIN
    WITH DateRange AS (
        SELECT @StartDate AS DateValue
        UNION ALL
        SELECT DATEADD(DAY, 1, DateValue)
        FROM DateRange
        WHERE DATEADD(DAY, 1, DateValue) <= @EndDate
    )
    INSERT INTO @AttendanceTable
    SELECT
        DateValue,
        Attendance.totalAllStudent,
        Attendance.totalComeCount
    FROM DateRange
             CROSS APPLY dbo.GetTotalClassroomAttendanceByFaculty(YEAR(DateValue), DATEPART(WEEK, DateValue), DATEPART(WEEKDAY, DateValue) - 1,@faculty) AS Attendance
    WHERE DATEPART(WEEKDAY, DateValue) != 1  -- Exclude Sundays
    OPTION (MAXRECURSION 0);

    RETURN;
END;


CREATE FUNCTION dbo.GetDateRangeAttendanceByEduTypeAndFacultyAndCourse
(
    @StartDate DATE,
    @EndDate DATE,
    @eduType varchar(255),
    @faculty varchar(255),
    @course int
)
    RETURNS @AttendanceTable TABLE
                             (
                                 DateValue DATE,
                                 totalAllStudent INT,
                                 totalComeCount INT
                             )
AS
BEGIN
    WITH DateRange AS (
        SELECT @StartDate AS DateValue
        UNION ALL
        SELECT DATEADD(DAY, 1, DateValue)
        FROM DateRange
        WHERE DATEADD(DAY, 1, DateValue) <= @EndDate
    )
    INSERT INTO @AttendanceTable
    SELECT
        DateValue,
        Attendance.totalAllStudent,
        Attendance.totalComeCount
    FROM DateRange
             CROSS APPLY dbo.GetTotalClassroomAttendanceByEduTypeAndFacultyAndCourse(YEAR(DateValue), DATEPART(WEEK, DateValue), DATEPART(WEEKDAY, DateValue) - 1,@eduType,@faculty,@course) AS Attendance
    WHERE DATEPART(WEEKDAY, DateValue) != 1  -- Exclude Sundays
    OPTION (MAXRECURSION 0);

    RETURN;
END;


CREATE FUNCTION dbo.GetDateRangeAttendanceByEduTypeAndFaculty
(
    @StartDate DATE,
    @EndDate DATE,
    @eduType varchar(255),
    @faculty varchar(255)
)
    RETURNS @AttendanceTable TABLE
                             (
                                 DateValue DATE,
                                 totalAllStudent INT,
                                 totalComeCount INT
                             )
AS
BEGIN
    WITH DateRange AS (
        SELECT @StartDate AS DateValue
        UNION ALL
        SELECT DATEADD(DAY, 1, DateValue)
        FROM DateRange
        WHERE DATEADD(DAY, 1, DateValue) <= @EndDate
    )
    INSERT INTO @AttendanceTable
    SELECT
        DateValue,
        Attendance.totalAllStudent,
        Attendance.totalComeCount
    FROM DateRange
             CROSS APPLY dbo.GetTotalClassroomAttendanceByEduTypeAndFaculty(YEAR(DateValue), DATEPART(WEEK, DateValue), DATEPART(WEEKDAY, DateValue) - 1,@eduType,@faculty) AS Attendance
    WHERE DATEPART(WEEKDAY, DateValue) != 1  -- Exclude Sundays
    OPTION (MAXRECURSION 0);

    RETURN;
END;



CREATE FUNCTION dbo.GetDateRangeAttendanceByEduTypeAndCourse
(
    @StartDate DATE,
    @EndDate DATE,
    @eduType varchar(255),
    @course int
)
    RETURNS @AttendanceTable TABLE
                             (
                                 DateValue DATE,
                                 totalAllStudent INT,
                                 totalComeCount INT
                             )
AS
BEGIN
    WITH DateRange AS (
        SELECT @StartDate AS DateValue
        UNION ALL
        SELECT DATEADD(DAY, 1, DateValue)
        FROM DateRange
        WHERE DATEADD(DAY, 1, DateValue) <= @EndDate
    )
    INSERT INTO @AttendanceTable
    SELECT
        DateValue,
        Attendance.totalAllStudent,
        Attendance.totalComeCount
    FROM DateRange
             CROSS APPLY dbo.GetTotalClassroomAttendanceByEduTypeAndCourse(YEAR(DateValue), DATEPART(WEEK, DateValue), DATEPART(WEEKDAY, DateValue) - 1,@eduType,@course) AS Attendance
    WHERE DATEPART(WEEKDAY, DateValue) != 1  -- Exclude Sundays
    OPTION (MAXRECURSION 0);

    RETURN;
END;

CREATE FUNCTION dbo.GetDateRangeAttendanceByEduType
(
    @StartDate DATE,
    @EndDate DATE,
    @eduType varchar(255)
)
    RETURNS @AttendanceTable TABLE
                             (
                                 DateValue DATE,
                                 totalAllStudent INT,
                                 totalComeCount INT
                             )
AS
BEGIN
    WITH DateRange AS (
        SELECT @StartDate AS DateValue
        UNION ALL
        SELECT DATEADD(DAY, 1, DateValue)
        FROM DateRange
        WHERE DATEADD(DAY, 1, DateValue) <= @EndDate
    )
    INSERT INTO @AttendanceTable
    SELECT
        DateValue,
        Attendance.totalAllStudent,
        Attendance.totalComeCount
    FROM DateRange
             CROSS APPLY dbo.GetTotalClassroomAttendanceByEduType(YEAR(DateValue), DATEPART(WEEK, DateValue), DATEPART(WEEKDAY, DateValue) - 1,@eduType) AS Attendance
    WHERE DATEPART(WEEKDAY, DateValue) != 1  -- Exclude Sundays
    OPTION (MAXRECURSION 0);

    RETURN;
END;



CREATE FUNCTION dbo.GetDateRangeAttendanceByCourse
(
    @StartDate DATE,
    @EndDate DATE,
    @course int
)
    RETURNS @AttendanceTable TABLE
                             (
                                 DateValue DATE,
                                 totalAllStudent INT,
                                 totalComeCount INT
                             )
AS
BEGIN
    WITH DateRange AS (
        SELECT @StartDate AS DateValue
        UNION ALL
        SELECT DATEADD(DAY, 1, DateValue)
        FROM DateRange
        WHERE DATEADD(DAY, 1, DateValue) <= @EndDate
    )
    INSERT INTO @AttendanceTable
    SELECT
        DateValue,
        Attendance.totalAllStudent,
        Attendance.totalComeCount
    FROM DateRange
             CROSS APPLY dbo.GetTotalClassroomAttendanceByCourse(YEAR(DateValue), DATEPART(WEEK, DateValue), DATEPART(WEEKDAY, DateValue) - 1,@course) AS Attendance
    WHERE DATEPART(WEEKDAY, DateValue) != 1  -- Exclude Sundays
    OPTION (MAXRECURSION 0);

    RETURN;
END;



CREATE FUNCTION dbo.GetDateRangeAttendance
(
    @StartDate DATE,
    @EndDate DATE
)
    RETURNS @AttendanceTable TABLE
                             (
                                 DateValue DATE,
                                 totalAllStudent INT,
                                 totalComeCount INT
                             )
AS
BEGIN
    WITH DateRange AS (
        SELECT @StartDate AS DateValue
        UNION ALL
        SELECT DATEADD(DAY, 1, DateValue)
        FROM DateRange
        WHERE DATEADD(DAY, 1, DateValue) <= @EndDate
    )
    INSERT INTO @AttendanceTable
    SELECT
        DateValue,
        Attendance.totalAllStudent,
        Attendance.totalComeCount
    FROM DateRange
             CROSS APPLY dbo.GetTotalClassroomAttendance(YEAR(DateValue), DATEPART(WEEK, DateValue), DATEPART(WEEKDAY, DateValue) - 1) AS Attendance
    WHERE DATEPART(WEEKDAY, DateValue) != 1  -- Exclude Sundays
    OPTION (MAXRECURSION 0);

    RETURN;
END;


CREATE FUNCTION dbo.GetTotalClassroomAttendanceEveryGroup
(
    @Year INT,
    @Sort_Number INT,
    @Day int
)
    RETURNS @UsersState TABLE
                        (
                            totalAllStudent int,
                            totalComeCount int,
                            facultyName varchar(255),
                            eduType varchar(255),
                            groupName varchar(255),
                            course int
                        )
AS
Begin
    if @Year=YEAR(getdate()) and @Sort_Number=DATEPART(WEEK, getdate()) and @Day=DATEPART(WEEKDAY , getdate())-1
        begin
            insert into @UsersState (totalAllStudent, totalComeCount,facultyName,eduType,groupName,course)
            SELECT
                totalAllStudent,
                totalComeCount,
                shortName,
                eduType,
                groupName,
                course
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount,d.shortName,d.eduType,d.groupName,d.course from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount,f.shortName,f.eduType,f.groupName,f.course
                          from (SELECT s.id as studentId,
                                       c.id as cardId,
                                       f.shortName,
                                       et.name as eduType,
                                       g.name as groupName,
                                       g.level as course
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         JOIN EducationType et on g.educationType_id = et.id
                                         JOIN Student s ON g.id = s.group_id
                                         JOIN Faculty f on g.faculty_id = f.id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @Sort_Number
                                  AND c.day = @Day
                                  AND c.period !> DATEPART(Hour, getdate()) - 8
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id,f.shortName,et.name,g.name,g.level) as f
                                   LEFT JOIN (SELECT COUNT(rfid) AS comeCount,
                                                     cardDB_id,shortName,groupName
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id,
                                                           f2.shortName,
                                                           g2.name as groupName
                                                    FROM CardDbStatistics cs
                                                             join CardDB c2 on cs.cardDB_id = c2.id
                                                             JOIN LessonDB ld2 ON c2.lesson_id = ld2.id
                                                             JOIN LessonDB_groups lg2 ON ld2.id = lg2.LessonDB_id
                                                             JOIN groups g2 ON lg2.groups_id = g2.id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                             JOIN Student s2 ON g2.id = s2.group_id
                                                             join users u2 on s2.user_id = u2.id and cs.rfid=u2.RFID

                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id, f2.shortName,g2.name) AS f
                                              GROUP BY f.cardDB_id,f.shortName,f.groupName) cs ON cs.cardDB_id = f.cardId and cs.shortName=f.shortName and f.groupName=cs.groupName
                          group by f.cardId, cs.comeCount,f.shortName,f.groupName,f.course,f.eduType) as d group by d.shortName,d.groupName,d.eduType,d.course
                 ) as f1;
        end
    else
        begin
            insert into @UsersState (totalAllStudent, totalComeCount,facultyName,eduType,groupName,course)
            SELECT
                totalAllStudent,
                totalComeCount,
                shortName,
                eduType,
                groupName,
                course
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount,d.shortName,d.eduType,d.groupName,d.course from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount,f.shortName,f.eduType,f.groupName,f.course
                          from (SELECT s.id as studentId,
                                       c.id as cardId,
                                       f.shortName,
                                       et.name as eduType,
                                       g.name as groupName,
                                       g.level as course
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         JOIN EducationType et on g.educationType_id = et.id
                                         JOIN Student s ON g.id = s.group_id
                                         JOIN Faculty f on g.faculty_id = f.id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @Sort_Number
                                  AND c.day = @Day
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id,f.shortName,et.name,g.name,g.level) as f
                                   LEFT JOIN (SELECT COUNT(rfid) AS comeCount,
                                                     cardDB_id,shortName,groupName
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id,
                                                           f2.shortName,
                                                           g2.name as groupName
                                                    FROM CardDbStatistics cs
                                                             join CardDB c2 on cs.cardDB_id = c2.id
                                                             JOIN LessonDB ld2 ON c2.lesson_id = ld2.id
                                                             JOIN LessonDB_groups lg2 ON ld2.id = lg2.LessonDB_id
                                                             JOIN groups g2 ON lg2.groups_id = g2.id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                             JOIN Student s2 ON g2.id = s2.group_id
                                                             join users u2 on s2.user_id = u2.id and cs.rfid=u2.RFID

                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id, f2.shortName,g2.name) AS f
                                              GROUP BY f.cardDB_id,f.shortName,f.groupName) cs ON cs.cardDB_id = f.cardId and cs.shortName=f.shortName and f.groupName=cs.groupName
                          group by f.cardId, cs.comeCount,f.shortName,f.groupName,f.course,f.eduType) as d group by d.shortName,d.groupName,d.eduType,d.course
                 ) as f2;
        end
    RETURN;
end
go


CREATE FUNCTION dbo.GetTotalClassroomAttendanceEveryGroupByCourse
(
    @Year INT,
    @Sort_Number INT,
    @Day int,
    @course int
)
    RETURNS @UsersState TABLE
                        (
                            totalAllStudent int,
                            totalComeCount int,
                            facultyName varchar(255),
                            eduType varchar(255),
                            groupName varchar(255),
                            course int
                        )
AS
Begin
    if @Year=YEAR(getdate()) and @Sort_Number=DATEPART(WEEK, getdate()) and @Day=DATEPART(WEEKDAY , getdate())-1
        begin
            insert into @UsersState (totalAllStudent, totalComeCount,facultyName,eduType,groupName,course)
            SELECT
                totalAllStudent,
                totalComeCount,
                shortName,
                eduType,
                groupName,
                course
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount,d.shortName,d.eduType,d.groupName,d.course from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount,f.shortName,f.eduType,f.groupName,f.course
                          from (SELECT s.id as studentId,
                                       c.id as cardId,
                                       f.shortName,
                                       et.name as eduType,
                                       g.name as groupName,
                                       g.level as course
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         JOIN EducationType et on g.educationType_id = et.id
                                         JOIN Student s ON g.id = s.group_id
                                         JOIN Faculty f on g.faculty_id = f.id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @Sort_Number
                                  AND c.day = @Day
                                  AND g.level = @course
                                  AND c.period !> DATEPART(Hour, getdate()) - 8
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id,f.shortName,et.name,g.name,g.level) as f
                                   LEFT JOIN (SELECT COUNT(rfid) AS comeCount,
                                                     cardDB_id,shortName,groupName
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id,
                                                           f2.shortName,
                                                           g2.name as groupName
                                                    FROM CardDbStatistics cs
                                                             join CardDB c2 on cs.cardDB_id = c2.id
                                                             JOIN LessonDB ld2 ON c2.lesson_id = ld2.id
                                                             JOIN LessonDB_groups lg2 ON ld2.id = lg2.LessonDB_id
                                                             JOIN groups g2 ON lg2.groups_id = g2.id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                             JOIN Student s2 ON g2.id = s2.group_id
                                                             join users u2 on s2.user_id = u2.id and cs.rfid=u2.RFID

                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id, f2.shortName,g2.name) AS f
                                              GROUP BY f.cardDB_id,f.shortName,f.groupName) cs ON cs.cardDB_id = f.cardId and cs.shortName=f.shortName and f.groupName=cs.groupName
                          group by f.cardId, cs.comeCount,f.shortName,f.groupName,f.course,f.eduType) as d group by d.shortName,d.groupName,d.eduType,d.course
                 ) as f1;
        end
    else
        begin
            insert into @UsersState (totalAllStudent, totalComeCount,facultyName,eduType,groupName,course)
            SELECT
                totalAllStudent,
                totalComeCount,
                shortName,
                eduType,
                groupName,
                course
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount,d.shortName,d.eduType,d.groupName,d.course from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount,f.shortName,f.eduType,f.groupName,f.course
                          from (SELECT s.id as studentId,
                                       c.id as cardId,
                                       f.shortName,
                                       et.name as eduType,
                                       g.name as groupName,
                                       g.level as course
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         JOIN EducationType et on g.educationType_id = et.id
                                         JOIN Student s ON g.id = s.group_id
                                         JOIN Faculty f on g.faculty_id = f.id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @Sort_Number
                                  AND c.day = @Day
                                  AND g.level = @course
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id,f.shortName,et.name,g.name,g.level) as f
                                   LEFT JOIN (SELECT COUNT(rfid) AS comeCount,
                                                     cardDB_id,shortName,groupName
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id,
                                                           f2.shortName,
                                                           g2.name as groupName
                                                    FROM CardDbStatistics cs
                                                             join CardDB c2 on cs.cardDB_id = c2.id
                                                             JOIN LessonDB ld2 ON c2.lesson_id = ld2.id
                                                             JOIN LessonDB_groups lg2 ON ld2.id = lg2.LessonDB_id
                                                             JOIN groups g2 ON lg2.groups_id = g2.id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                             JOIN Student s2 ON g2.id = s2.group_id
                                                             join users u2 on s2.user_id = u2.id and cs.rfid=u2.RFID

                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id, f2.shortName,g2.name) AS f
                                              GROUP BY f.cardDB_id,f.shortName,f.groupName) cs ON cs.cardDB_id = f.cardId and cs.shortName=f.shortName and f.groupName=cs.groupName
                          group by f.cardId, cs.comeCount,f.shortName,f.groupName,f.course,f.eduType) as d group by d.shortName,d.groupName,d.eduType,d.course
                 ) as f2;
        end
    RETURN;
end
go

CREATE FUNCTION dbo.GetTotalClassroomAttendanceEveryGroupByEduType
(
    @Year INT,
    @Sort_Number INT,
    @Day int,
    @edu_type varchar(255)
)
    RETURNS @UsersState TABLE
                        (
                            totalAllStudent int,
                            totalComeCount int,
                            facultyName varchar(255),
                            eduType varchar(255),
                            groupName varchar(255),
                            course int
                        )
AS
Begin
    if @Year=YEAR(getdate()) and @Sort_Number=DATEPART(WEEK, getdate()) and @Day=DATEPART(WEEKDAY , getdate())-1
        begin
            insert into @UsersState (totalAllStudent, totalComeCount,facultyName,eduType,groupName,course)
            SELECT
                totalAllStudent,
                totalComeCount,
                shortName,
                eduType,
                groupName,
                course
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount,d.shortName,d.eduType,d.groupName,d.course from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount,f.shortName,f.eduType,f.groupName,f.course
                          from (SELECT s.id as studentId,
                                       c.id as cardId,
                                       f.shortName,
                                       et.name as eduType,
                                       g.name as groupName,
                                       g.level as course
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         JOIN EducationType et on g.educationType_id = et.id
                                         JOIN Student s ON g.id = s.group_id
                                         JOIN Faculty f on g.faculty_id = f.id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @Sort_Number
                                  AND c.day = @Day
                                  AND et.name = @edu_type
                                  AND c.period !> DATEPART(Hour, getdate()) - 8
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id,f.shortName,et.name,g.name,g.level) as f
                                   LEFT JOIN (SELECT COUNT(rfid) AS comeCount,
                                                     cardDB_id,shortName,groupName
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id,
                                                           f2.shortName,
                                                           g2.name as groupName
                                                    FROM CardDbStatistics cs
                                                             join CardDB c2 on cs.cardDB_id = c2.id
                                                             JOIN LessonDB ld2 ON c2.lesson_id = ld2.id
                                                             JOIN LessonDB_groups lg2 ON ld2.id = lg2.LessonDB_id
                                                             JOIN groups g2 ON lg2.groups_id = g2.id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                             JOIN Student s2 ON g2.id = s2.group_id
                                                             join users u2 on s2.user_id = u2.id and cs.rfid=u2.RFID

                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id, f2.shortName,g2.name) AS f
                                              GROUP BY f.cardDB_id,f.shortName,f.groupName) cs ON cs.cardDB_id = f.cardId and cs.shortName=f.shortName and f.groupName=cs.groupName
                          group by f.cardId, cs.comeCount,f.shortName,f.groupName,f.course,f.eduType) as d group by d.shortName,d.groupName,d.eduType,d.course
                 ) as f1;
        end
    else
        begin
            insert into @UsersState (totalAllStudent, totalComeCount,facultyName,eduType,groupName,course)
            SELECT
                totalAllStudent,
                totalComeCount,
                shortName,
                eduType,
                groupName,
                course
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount,d.shortName,d.eduType,d.groupName,d.course from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount,f.shortName,f.eduType,f.groupName,f.course
                          from (SELECT s.id as studentId,
                                       c.id as cardId,
                                       f.shortName,
                                       et.name as eduType,
                                       g.name as groupName,
                                       g.level as course
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         JOIN EducationType et on g.educationType_id = et.id
                                         JOIN Student s ON g.id = s.group_id
                                         JOIN Faculty f on g.faculty_id = f.id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @Sort_Number
                                  AND c.day = @Day
                                  AND et.name = @edu_type
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id,f.shortName,et.name,g.name,g.level) as f
                                   LEFT JOIN (SELECT COUNT(rfid) AS comeCount,
                                                     cardDB_id,shortName,groupName
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id,
                                                           f2.shortName,
                                                           g2.name as groupName
                                                    FROM CardDbStatistics cs
                                                             join CardDB c2 on cs.cardDB_id = c2.id
                                                             JOIN LessonDB ld2 ON c2.lesson_id = ld2.id
                                                             JOIN LessonDB_groups lg2 ON ld2.id = lg2.LessonDB_id
                                                             JOIN groups g2 ON lg2.groups_id = g2.id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                             JOIN Student s2 ON g2.id = s2.group_id
                                                             join users u2 on s2.user_id = u2.id and cs.rfid=u2.RFID

                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id, f2.shortName,g2.name) AS f
                                              GROUP BY f.cardDB_id,f.shortName,f.groupName) cs ON cs.cardDB_id = f.cardId and cs.shortName=f.shortName and f.groupName=cs.groupName
                          group by f.cardId, cs.comeCount,f.shortName,f.groupName,f.course,f.eduType) as d group by d.shortName,d.groupName,d.eduType,d.course
                 ) as f2;
        end
    RETURN;
end
go



CREATE FUNCTION dbo.GetTotalClassroomAttendanceEveryGroupByEduTypeAndCourse
(
    @Year INT,
    @Sort_Number INT,
    @Day int,
    @edu_type varchar(255),
    @course int
)
    RETURNS @UsersState TABLE
                        (
                            totalAllStudent int,
                            totalComeCount int,
                            facultyName varchar(255),
                            eduType varchar(255),
                            groupName varchar(255),
                            course int
                        )
AS
Begin
    if @Year=YEAR(getdate()) and @Sort_Number=DATEPART(WEEK, getdate()) and @Day=DATEPART(WEEKDAY , getdate())-1
        begin
            insert into @UsersState (totalAllStudent, totalComeCount,facultyName,eduType,groupName,course)
            SELECT
                totalAllStudent,
                totalComeCount,
                shortName,
                eduType,
                groupName,
                course
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount,d.shortName,d.eduType,d.groupName,d.course from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount,f.shortName,f.eduType,f.groupName,f.course
                          from (SELECT s.id as studentId,
                                       c.id as cardId,
                                       f.shortName,
                                       et.name as eduType,
                                       g.name as groupName,
                                       g.level as course
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         JOIN EducationType et on g.educationType_id = et.id
                                         JOIN Student s ON g.id = s.group_id
                                         JOIN Faculty f on g.faculty_id = f.id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @Sort_Number
                                  AND c.day = @Day
                                  AND et.name = @edu_type
                                  AND g.level = @course
                                  AND c.period !> DATEPART(Hour, getdate()) - 8
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id,f.shortName,et.name,g.name,g.level) as f
                                   LEFT JOIN (SELECT COUNT(rfid) AS comeCount,
                                                     cardDB_id,shortName,groupName
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id,
                                                           f2.shortName,
                                                           g2.name as groupName
                                                    FROM CardDbStatistics cs
                                                             join CardDB c2 on cs.cardDB_id = c2.id
                                                             JOIN LessonDB ld2 ON c2.lesson_id = ld2.id
                                                             JOIN LessonDB_groups lg2 ON ld2.id = lg2.LessonDB_id
                                                             JOIN groups g2 ON lg2.groups_id = g2.id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                             JOIN Student s2 ON g2.id = s2.group_id
                                                             join users u2 on s2.user_id = u2.id and cs.rfid=u2.RFID

                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id, f2.shortName,g2.name) AS f
                                              GROUP BY f.cardDB_id,f.shortName,f.groupName) cs ON cs.cardDB_id = f.cardId and cs.shortName=f.shortName and f.groupName=cs.groupName
                          group by f.cardId, cs.comeCount,f.shortName,f.groupName,f.course,f.eduType) as d group by d.shortName,d.groupName,d.eduType,d.course
                 ) as f1;
        end
    else
        begin
            insert into @UsersState (totalAllStudent, totalComeCount,facultyName,eduType,groupName,course)
            SELECT
                totalAllStudent,
                totalComeCount,
                shortName,
                eduType,
                groupName,
                course
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount,d.shortName,d.eduType,d.groupName,d.course from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount,f.shortName,f.eduType,f.groupName,f.course
                          from (SELECT s.id as studentId,
                                       c.id as cardId,
                                       f.shortName,
                                       et.name as eduType,
                                       g.name as groupName,
                                       g.level as course
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         JOIN EducationType et on g.educationType_id = et.id
                                         JOIN Student s ON g.id = s.group_id
                                         JOIN Faculty f on g.faculty_id = f.id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @Sort_Number
                                  AND c.day = @Day
                                  AND et.name = @edu_type
                                  AND g.level = @course
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id,f.shortName,et.name,g.name,g.level) as f
                                   LEFT JOIN (SELECT COUNT(rfid) AS comeCount,
                                                     cardDB_id,shortName,groupName
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id,
                                                           f2.shortName,
                                                           g2.name as groupName
                                                    FROM CardDbStatistics cs
                                                             join CardDB c2 on cs.cardDB_id = c2.id
                                                             JOIN LessonDB ld2 ON c2.lesson_id = ld2.id
                                                             JOIN LessonDB_groups lg2 ON ld2.id = lg2.LessonDB_id
                                                             JOIN groups g2 ON lg2.groups_id = g2.id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                             JOIN Student s2 ON g2.id = s2.group_id
                                                             join users u2 on s2.user_id = u2.id and cs.rfid=u2.RFID

                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id, f2.shortName,g2.name) AS f
                                              GROUP BY f.cardDB_id,f.shortName,f.groupName) cs ON cs.cardDB_id = f.cardId and cs.shortName=f.shortName and f.groupName=cs.groupName
                          group by f.cardId, cs.comeCount,f.shortName,f.groupName,f.course,f.eduType) as d group by d.shortName,d.groupName,d.eduType,d.course
                 ) as f2;
        end
    RETURN;
end
go


CREATE FUNCTION dbo.GetTotalClassroomAttendanceEveryGroupByFaculty
(
    @Year INT,
    @Sort_Number INT,
    @Day int,
    @faculty varchar(255)
)
    RETURNS @UsersState TABLE
                        (
                            totalAllStudent int,
                            totalComeCount int,
                            facultyName varchar(255),
                            eduType varchar(255),
                            groupName varchar(255),
                            course int
                        )
AS
Begin
    if @Year=YEAR(getdate()) and @Sort_Number=DATEPART(WEEK, getdate()) and @Day=DATEPART(WEEKDAY , getdate())-1
        begin
            insert into @UsersState (totalAllStudent, totalComeCount,facultyName,eduType,groupName,course)
            SELECT
                totalAllStudent,
                totalComeCount,
                shortName,
                eduType,
                groupName,
                course
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount,d.shortName,d.eduType,d.groupName,d.course from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount,f.shortName,f.eduType,f.groupName,f.course
                          from (SELECT s.id as studentId,
                                       c.id as cardId,
                                       f.shortName,
                                       et.name as eduType,
                                       g.name as groupName,
                                       g.level as course
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         JOIN EducationType et on g.educationType_id = et.id
                                         JOIN Student s ON g.id = s.group_id
                                         JOIN Faculty f on g.faculty_id = f.id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @Sort_Number
                                  AND c.day = @Day
                                  AND f.shortName = @faculty
                                  AND c.period !> DATEPART(Hour, getdate()) - 8
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id,f.shortName,et.name,g.name,g.level) as f
                                   LEFT JOIN (SELECT COUNT(rfid) AS comeCount,
                                                     cardDB_id,shortName,groupName
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id,
                                                           f2.shortName,
                                                           g2.name as groupName
                                                    FROM CardDbStatistics cs
                                                             join CardDB c2 on cs.cardDB_id = c2.id
                                                             JOIN LessonDB ld2 ON c2.lesson_id = ld2.id
                                                             JOIN LessonDB_groups lg2 ON ld2.id = lg2.LessonDB_id
                                                             JOIN groups g2 ON lg2.groups_id = g2.id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                             JOIN Student s2 ON g2.id = s2.group_id
                                                             join users u2 on s2.user_id = u2.id and cs.rfid=u2.RFID

                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id, f2.shortName,g2.name) AS f
                                              GROUP BY f.cardDB_id,f.shortName,f.groupName) cs ON cs.cardDB_id = f.cardId and cs.shortName=f.shortName and f.groupName=cs.groupName
                          group by f.cardId, cs.comeCount,f.shortName,f.groupName,f.course,f.eduType) as d group by d.shortName,d.groupName,d.eduType,d.course
                 ) as f1;
        end
    else
        begin
            insert into @UsersState (totalAllStudent, totalComeCount,facultyName,eduType,groupName,course)
            SELECT
                totalAllStudent,
                totalComeCount,
                shortName,
                eduType,
                groupName,
                course
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount,d.shortName,d.eduType,d.groupName,d.course from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount,f.shortName,f.eduType,f.groupName,f.course
                          from (SELECT s.id as studentId,
                                       c.id as cardId,
                                       f.shortName,
                                       et.name as eduType,
                                       g.name as groupName,
                                       g.level as course
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         JOIN EducationType et on g.educationType_id = et.id
                                         JOIN Student s ON g.id = s.group_id
                                         JOIN Faculty f on g.faculty_id = f.id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @Sort_Number
                                  AND c.day = @Day
                                  AND f.shortName = @faculty
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id,f.shortName,et.name,g.name,g.level) as f
                                   LEFT JOIN (SELECT COUNT(rfid) AS comeCount,
                                                     cardDB_id,shortName,groupName
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id,
                                                           f2.shortName,
                                                           g2.name as groupName
                                                    FROM CardDbStatistics cs
                                                             join CardDB c2 on cs.cardDB_id = c2.id
                                                             JOIN LessonDB ld2 ON c2.lesson_id = ld2.id
                                                             JOIN LessonDB_groups lg2 ON ld2.id = lg2.LessonDB_id
                                                             JOIN groups g2 ON lg2.groups_id = g2.id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                             JOIN Student s2 ON g2.id = s2.group_id
                                                             join users u2 on s2.user_id = u2.id and cs.rfid=u2.RFID

                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id, f2.shortName,g2.name) AS f
                                              GROUP BY f.cardDB_id,f.shortName,f.groupName) cs ON cs.cardDB_id = f.cardId and cs.shortName=f.shortName and f.groupName=cs.groupName
                          group by f.cardId, cs.comeCount,f.shortName,f.groupName,f.course,f.eduType) as d group by d.shortName,d.groupName,d.eduType,d.course
                 ) as f2;
        end
    RETURN;
end
go


CREATE FUNCTION dbo.GetTotalClassroomAttendanceEveryGroupByFacultyAndCourse
(
    @Year INT,
    @Sort_Number INT,
    @Day int,
    @faculty varchar(255),
    @course int
)
    RETURNS @UsersState TABLE
                        (
                            totalAllStudent int,
                            totalComeCount int,
                            facultyName varchar(255),
                            eduType varchar(255),
                            groupName varchar(255),
                            course int
                        )
AS
Begin
    if @Year=YEAR(getdate()) and @Sort_Number=DATEPART(WEEK, getdate()) and @Day=DATEPART(WEEKDAY , getdate())-1
        begin
            insert into @UsersState (totalAllStudent, totalComeCount,facultyName,eduType,groupName,course)
            SELECT
                totalAllStudent,
                totalComeCount,
                shortName,
                eduType,
                groupName,
                course
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount,d.shortName,d.groupName,d.course,d.eduType from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount,f.shortName,f.eduType,f.groupName,f.course
                          from (SELECT s.id as studentId,
                                       c.id as cardId,
                                       f.shortName,
                                       et.name as eduType,
                                       g.name as groupName,
                                       g.level as course
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         JOIN EducationType et on g.educationType_id = et.id
                                         JOIN Student s ON g.id = s.group_id
                                         JOIN Faculty f on g.faculty_id = f.id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @Sort_Number
                                  AND c.day = @Day
                                  AND f.shortName = @faculty
                                  AND g.level = @course
                                  AND c.period !> DATEPART(Hour, getdate()) - 8
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id,f.shortName,et.name,g.name,g.level) as f
                                   LEFT JOIN (SELECT COUNT(rfid) AS comeCount,
                                                     cardDB_id,shortName,groupName
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id,
                                                           f2.shortName,
                                                           g2.name as groupName
                                                    FROM CardDbStatistics cs
                                                             join CardDB c2 on cs.cardDB_id = c2.id
                                                             JOIN LessonDB ld2 ON c2.lesson_id = ld2.id
                                                             JOIN LessonDB_groups lg2 ON ld2.id = lg2.LessonDB_id
                                                             JOIN groups g2 ON lg2.groups_id = g2.id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                             JOIN Student s2 ON g2.id = s2.group_id
                                                             join users u2 on s2.user_id = u2.id and cs.rfid=u2.RFID

                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id, f2.shortName,g2.name) AS f
                                              GROUP BY f.cardDB_id,f.shortName,f.groupName) cs ON cs.cardDB_id = f.cardId and cs.shortName=f.shortName and f.groupName=cs.groupName
                          group by f.cardId, cs.comeCount,f.shortName,f.groupName,f.course,f.eduType) as d group by d.shortName,d.groupName,d.eduType,d.course
                 ) as f1;
        end
    else
        begin
            insert into @UsersState (totalAllStudent, totalComeCount,facultyName,eduType,groupName,course)
            SELECT
                totalAllStudent,
                totalComeCount,
                shortName,
                eduType,
                groupName,
                course
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount,d.shortName,d.groupName,d.course,d.eduType from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount,f.shortName,f.eduType,f.groupName,f.course
                          from (SELECT s.id as studentId,
                                       c.id as cardId,
                                       f.shortName,
                                       et.name as eduType,
                                       g.name as groupName,
                                       g.level as course
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         JOIN EducationType et on g.educationType_id = et.id
                                         JOIN Student s ON g.id = s.group_id
                                         JOIN Faculty f on g.faculty_id = f.id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @Sort_Number
                                  AND c.day = @Day
                                  AND f.shortName = @faculty
                                  AND g.level = @course
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id,f.shortName,et.name,g.name,g.level) as f
                                   LEFT JOIN (SELECT COUNT(rfid) AS comeCount,
                                                     cardDB_id,shortName,groupName
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id,
                                                           f2.shortName,
                                                           g2.name as groupName
                                                    FROM CardDbStatistics cs
                                                             join CardDB c2 on cs.cardDB_id = c2.id
                                                             JOIN LessonDB ld2 ON c2.lesson_id = ld2.id
                                                             JOIN LessonDB_groups lg2 ON ld2.id = lg2.LessonDB_id
                                                             JOIN groups g2 ON lg2.groups_id = g2.id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                             JOIN Student s2 ON g2.id = s2.group_id
                                                             join users u2 on s2.user_id = u2.id and cs.rfid=u2.RFID

                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id, f2.shortName,g2.name) AS f
                                              GROUP BY f.cardDB_id,f.shortName,f.groupName) cs ON cs.cardDB_id = f.cardId and cs.shortName=f.shortName and f.groupName=cs.groupName
                          group by f.cardId, cs.comeCount,f.shortName,f.groupName,f.course,f.eduType) as d group by d.shortName,d.groupName,d.eduType,d.course
                 ) as f2;
        end
    RETURN;
end
go

CREATE FUNCTION dbo.GetTotalClassroomAttendanceEveryGroupByFacultyAndEduType
(
    @Year INT,
    @Sort_Number INT,
    @Day int,
    @faculty varchar(255),
    @edu_type varchar(255)
)
    RETURNS @UsersState TABLE
                        (
                            totalAllStudent int,
                            totalComeCount int,
                            facultyName varchar(255),
                            groupName varchar(255),
                            course int
                        )
AS
Begin
    if @Year=YEAR(getdate()) and @Sort_Number=DATEPART(WEEK, getdate()) and @Day=DATEPART(WEEKDAY , getdate())-1
        begin
            insert into @UsersState (totalAllStudent, totalComeCount,facultyName,groupName,course)
            SELECT
                totalAllStudent,
                totalComeCount,
                shortName,
                groupName,
                course
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount,d.shortName,d.groupName,d.course from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount,f.shortName,f.groupName,f.course
                          from (SELECT s.id as studentId,
                                       c.id as cardId,
                                       f.shortName,
                                       g.name as groupName,
                                       g.level as course
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         JOIN EducationType et on g.educationType_id = et.id
                                         JOIN Student s ON g.id = s.group_id
                                         JOIN Faculty f on g.faculty_id = f.id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @Sort_Number
                                  AND c.day = @Day
                                  AND f.shortName = @faculty
                                  AND et.name = @edu_type
                                  AND c.period !> DATEPART(Hour, getdate()) - 8
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id,f.shortName,g.name,g.level) as f
                                   LEFT JOIN (SELECT COUNT(rfid) AS comeCount,
                                                     cardDB_id,shortName,groupName
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id,
                                                           f2.shortName,
                                                           g2.name as groupName
                                                    FROM CardDbStatistics cs
                                                             join CardDB c2 on cs.cardDB_id = c2.id
                                                             JOIN LessonDB ld2 ON c2.lesson_id = ld2.id
                                                             JOIN LessonDB_groups lg2 ON ld2.id = lg2.LessonDB_id
                                                             JOIN groups g2 ON lg2.groups_id = g2.id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                             JOIN Student s2 ON g2.id = s2.group_id
                                                             join users u2 on s2.user_id = u2.id and cs.rfid=u2.RFID

                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id, f2.shortName,g2.name) AS f
                                              GROUP BY f.cardDB_id,f.shortName,f.groupName) cs ON cs.cardDB_id = f.cardId and cs.shortName=f.shortName and f.groupName=cs.groupName
                          group by f.cardId, cs.comeCount,f.shortName,f.groupName,f.course) as d group by d.shortName,d.groupName,d.course
                 ) as f1;
        end
    else
        begin
            insert into @UsersState (totalAllStudent, totalComeCount,facultyName,groupName,course)
            SELECT
                totalAllStudent,
                totalComeCount,
                shortName,
                groupName,
                course
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount,d.shortName,d.groupName,d.course from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount,f.shortName,f.groupName,f.course
                          from (SELECT s.id as studentId,
                                       c.id as cardId,
                                       f.shortName,
                                       g.name as groupName,
                                       g.level as course
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         JOIN EducationType et on g.educationType_id = et.id
                                         JOIN Student s ON g.id = s.group_id
                                         JOIN Faculty f on g.faculty_id = f.id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @Sort_Number
                                  AND c.day = @Day
                                  AND f.shortName = @faculty
                                  AND et.name = @edu_type
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id,f.shortName,g.name,g.level) as f
                                   LEFT JOIN (SELECT COUNT(rfid) AS comeCount,
                                                     cardDB_id,shortName,groupName
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id,
                                                           f2.shortName,
                                                           g2.name as groupName
                                                    FROM CardDbStatistics cs
                                                             join CardDB c2 on cs.cardDB_id = c2.id
                                                             JOIN LessonDB ld2 ON c2.lesson_id = ld2.id
                                                             JOIN LessonDB_groups lg2 ON ld2.id = lg2.LessonDB_id
                                                             JOIN groups g2 ON lg2.groups_id = g2.id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                             JOIN Student s2 ON g2.id = s2.group_id
                                                             join users u2 on s2.user_id = u2.id and cs.rfid=u2.RFID

                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id, f2.shortName,g2.name) AS f
                                              GROUP BY f.cardDB_id,f.shortName,f.groupName) cs ON cs.cardDB_id = f.cardId and cs.shortName=f.shortName and f.groupName=cs.groupName
                          group by f.cardId, cs.comeCount,f.shortName,f.groupName,f.course) as d group by d.shortName,d.groupName,d.course
                 ) as f2;
        end
    RETURN;
end
go


CREATE FUNCTION dbo.GetTotalClassroomAttendanceEveryGroupByFacultyAndEduTypeAndCourse
(
    @Year INT,
    @Sort_Number INT,
    @Day int,
    @faculty varchar(255),
    @edu_type varchar(255),
    @course int
)
    RETURNS @UsersState TABLE
                        (
                            totalAllStudent int,
                            totalComeCount int,
                            facultyName varchar(255),
                            groupName varchar(255),
                            course int
                        )
AS
Begin
    if @Year=YEAR(getdate()) and @Sort_Number=DATEPART(WEEK, getdate()) and @Day=DATEPART(WEEKDAY , getdate())-1
        begin
            insert into @UsersState (totalAllStudent, totalComeCount,facultyName,groupName,course)
            SELECT
                totalAllStudent,
                totalComeCount,
                shortName,
                groupName,
                @course
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount,d.shortName,d.groupName,d.course from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount,f.shortName,f.groupName,f.course
                          from (SELECT s.id as studentId,
                                       c.id as cardId,
                                       f.shortName,
                                       g.name as groupName,
                                       g.level as course
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         JOIN EducationType et on g.educationType_id = et.id
                                         JOIN Student s ON g.id = s.group_id
                                         JOIN Faculty f on g.faculty_id = f.id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @Sort_Number
                                  AND c.day = @Day
                                  AND f.shortName = @faculty
                                  AND et.name = @edu_type
                                  AND g.level = @course
                                  AND c.period !> DATEPART(Hour, getdate()) - 8
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id,f.shortName,g.name,g.level) as f
                                   LEFT JOIN (SELECT COUNT(rfid) AS comeCount,
                                                     cardDB_id,shortName,groupName
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id,
                                                           f2.shortName,
                                                           g2.name as groupName
                                                    FROM CardDbStatistics cs
                                                             join CardDB c2 on cs.cardDB_id = c2.id
                                                             JOIN LessonDB ld2 ON c2.lesson_id = ld2.id
                                                             JOIN LessonDB_groups lg2 ON ld2.id = lg2.LessonDB_id
                                                             JOIN groups g2 ON lg2.groups_id = g2.id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                             JOIN Student s2 ON g2.id = s2.group_id
                                                             join users u2 on s2.user_id = u2.id and cs.rfid=u2.RFID

                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id, f2.shortName,g2.name) AS f
                                              GROUP BY f.cardDB_id,f.shortName,f.groupName) cs ON cs.cardDB_id = f.cardId and cs.shortName=f.shortName and f.groupName=cs.groupName
                          group by f.cardId, cs.comeCount,f.shortName,f.groupName,f.course) as d group by d.shortName,d.groupName,d.course
                 ) as f1;
        end
    else
        begin
            insert into @UsersState (totalAllStudent, totalComeCount,facultyName,groupName,course)
            SELECT
                totalAllStudent,
                totalComeCount,
                shortName,
                groupName,
                @course
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount,d.shortName,d.groupName,d.course from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount,f.shortName,f.groupName,f.course
                          from (SELECT s.id as studentId,
                                       c.id as cardId,
                                       f.shortName,
                                       g.name as groupName,
                                       g.level as course
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         JOIN EducationType et on g.educationType_id = et.id
                                         JOIN Student s ON g.id = s.group_id
                                         JOIN Faculty f on g.faculty_id = f.id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @Sort_Number
                                  AND c.day = @Day
                                  AND f.shortName = @faculty
                                  AND et.name = @edu_type
                                  AND g.level = @course
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id,f.shortName,g.name,g.level) as f
                                   LEFT JOIN (SELECT COUNT(rfid) AS comeCount,
                                                     cardDB_id,shortName,groupName
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id,
                                                           f2.shortName,
                                                           g2.name as groupName
                                                    FROM CardDbStatistics cs
                                                             join CardDB c2 on cs.cardDB_id = c2.id
                                                             JOIN LessonDB ld2 ON c2.lesson_id = ld2.id
                                                             JOIN LessonDB_groups lg2 ON ld2.id = lg2.LessonDB_id
                                                             JOIN groups g2 ON lg2.groups_id = g2.id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                             JOIN Student s2 ON g2.id = s2.group_id
                                                             join users u2 on s2.user_id = u2.id and cs.rfid=u2.RFID

                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id, f2.shortName,g2.name) AS f
                                              GROUP BY f.cardDB_id,f.shortName,f.groupName) cs ON cs.cardDB_id = f.cardId and cs.shortName=f.shortName and f.groupName=cs.groupName
                          group by f.cardId, cs.comeCount,f.shortName,f.groupName,f.course) as d group by d.shortName,d.groupName,d.course
                 ) as f2;
        end
    RETURN;
end
go

CREATE FUNCTION dbo.GetTotalClassroomAttendanceByEduTypeAndCourse
(
    @Year INT,
    @SortNumber INT,
    @Day VARCHAR(50),
    @eduType VARCHAR(255),
    @course INT
)
    RETURNS @UsersState TABLE
                        (
                            totalAllStudent int,
                            totalComeCount int
                        )
        AS
    Begin
        DECLARE @allStudent int;
        DECLARE @allCome int;

        if @Year=YEAR(getdate()) and @SortNumber=DATEPART(WEEK, getdate()) and @Day=DATEPART(WEEKDAY , getdate())-1
            begin
            SELECT TOP 1
                @allStudent = totalAllStudent,
                @allCome = totalComeCount
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount,f.shortName
                          from (SELECT s.id as studentId,
                                       c.id as cardId,
                                       f.shortName
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         join Faculty f on g.faculty_id = f.id
                                         join EducationType et on g.educationType_id = et.id
                                         JOIN Student s ON g.id = s.group_id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @SortNumber
                                  AND c.day = @Day
                                  AND et.name = @eduType
                                  AND g.level = @course
                                  AND c.period !> DATEPART(Hour, getdate()) - 8
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id,f.shortName) as f
                                   LEFT JOIN (SELECT COUNT(rfid) AS comeCount,
                                                     cardDB_id,shortName
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id,
                                                           f2.shortName
                                                    FROM CardDbStatistics cs
                                                             join CardDB c2 on cs.cardDB_id = c2.id
                                                             JOIN LessonDB ld2 ON c2.lesson_id = ld2.id
                                                             JOIN LessonDB_groups lg2 ON ld2.id = lg2.LessonDB_id
                                                             JOIN groups g2 ON lg2.groups_id = g2.id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                             JOIN Student s2 ON g2.id = s2.group_id
                                                             join users u2 on s2.user_id = u2.id and cs.rfid=u2.RFID
                                                             join EducationType et2 on g2.educationType_id = et2.id
                                                        AND g2.level = @course
                                                        AND et2.name = @eduType
                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id, f2.shortName) AS f
                                              GROUP BY f.cardDB_id,f.shortName) cs ON cs.cardDB_id = f.cardId and cs.shortName=f.shortName
                          group by f.cardId, cs.comeCount,f.shortName) as d group by d.shortName
                 ) as f1;
            end
        else
            begin
            SELECT TOP 1
                @allStudent = totalAllStudent,
                @allCome = totalComeCount
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount,f.shortName
                          from (SELECT s.id as studentId,
                                       c.id as cardId,
                                       f.shortName
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         join Faculty f on g.faculty_id = f.id
                                         join EducationType et on g.educationType_id = et.id
                                         JOIN Student s ON g.id = s.group_id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @SortNumber
                                  AND c.day = @Day
                                  AND et.name = @eduType
                                  AND g.level = @course
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id,f.shortName) as f
                                   LEFT JOIN (SELECT COUNT(rfid) AS comeCount,
                                                     cardDB_id,shortName
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id,
                                                           f2.shortName
                                                    FROM CardDbStatistics cs
                                                             join CardDB c2 on cs.cardDB_id = c2.id
                                                             JOIN LessonDB ld2 ON c2.lesson_id = ld2.id
                                                             JOIN LessonDB_groups lg2 ON ld2.id = lg2.LessonDB_id
                                                             JOIN groups g2 ON lg2.groups_id = g2.id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                             JOIN Student s2 ON g2.id = s2.group_id
                                                             join users u2 on s2.user_id = u2.id and cs.rfid=u2.RFID
                                                             join EducationType et2 on g2.educationType_id = et2.id
                                                        AND g2.level = @course
                                                        AND et2.name = @eduType
                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id, f2.shortName) AS f
                                              GROUP BY f.cardDB_id,f.shortName) cs ON cs.cardDB_id = f.cardId and cs.shortName=f.shortName
                          group by f.cardId, cs.comeCount,f.shortName) as d group by d.shortName
                 ) as f2;
            end

        insert into @UsersState (totalAllStudent, totalComeCount)
        select @allStudent,@allCome;
        RETURN;
    end
go




CREATE FUNCTION dbo.GetTotalClassroomAttendanceByEduTypeAndFaculty
(
    @Year INT,
    @SortNumber INT,
    @Day VARCHAR(50),
    @eduType VARCHAR(255),
    @faculty VARCHAR(255)
)
    RETURNS @UsersState TABLE
                        (
                            totalAllStudent int,
                            totalComeCount int
                        )
        AS
    Begin
        DECLARE @allStudent int;
        DECLARE @allCome int;

        if @Year=YEAR(getdate()) and @SortNumber=DATEPART(WEEK, getdate()) and @Day=DATEPART(WEEKDAY , getdate())-1
            begin
            SELECT TOP 1
                @allStudent = totalAllStudent,
                @allCome = totalComeCount
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount,f.shortName
                          from (SELECT s.id as studentId,
                                       c.id as cardId,
                                       f.shortName
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         join Faculty f on g.faculty_id = f.id
                                         join EducationType et on g.educationType_id = et.id
                                         JOIN Student s ON g.id = s.group_id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @SortNumber
                                  AND c.day = @Day
                                  AND et.name = @eduType
                                  AND f.shortName = @faculty
                                  AND c.period !> DATEPART(Hour, getdate()) - 8
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id,f.shortName) as f
                                   LEFT JOIN (SELECT COUNT(rfid) AS comeCount,
                                                     cardDB_id,shortName
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id,
                                                           f2.shortName
                                                    FROM CardDbStatistics cs
                                                             join CardDB c2 on cs.cardDB_id = c2.id
                                                             JOIN LessonDB ld2 ON c2.lesson_id = ld2.id
                                                             JOIN LessonDB_groups lg2 ON ld2.id = lg2.LessonDB_id
                                                             JOIN groups g2 ON lg2.groups_id = g2.id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                             JOIN Student s2 ON g2.id = s2.group_id
                                                             join users u2 on s2.user_id = u2.id and cs.rfid=u2.RFID
                                                             join EducationType et2 on g2.educationType_id = et2.id
                                                        AND f2.shortName = @faculty
                                                        AND et2.name = @eduType
                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id, f2.shortName) AS f
                                              GROUP BY f.cardDB_id,f.shortName) cs ON cs.cardDB_id = f.cardId and cs.shortName=f.shortName
                          group by f.cardId, cs.comeCount,f.shortName) as d group by d.shortName
                 ) as f1;
            end
        else
            begin
            SELECT TOP 1
                @allStudent = totalAllStudent,
                @allCome = totalComeCount
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount,f.shortName
                          from (SELECT s.id as studentId,
                                       c.id as cardId,
                                       f.shortName
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         join Faculty f on g.faculty_id = f.id
                                         join EducationType et on g.educationType_id = et.id
                                         JOIN Student s ON g.id = s.group_id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @SortNumber
                                  AND et.name = @eduType
                                  AND f.shortName = @faculty
                                  AND et.name = @eduType
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id,f.shortName) as f
                                   LEFT JOIN (SELECT COUNT(rfid) AS comeCount,
                                                     cardDB_id,shortName
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id,
                                                           f2.shortName
                                                    FROM CardDbStatistics cs
                                                             join CardDB c2 on cs.cardDB_id = c2.id
                                                             JOIN LessonDB ld2 ON c2.lesson_id = ld2.id
                                                             JOIN LessonDB_groups lg2 ON ld2.id = lg2.LessonDB_id
                                                             JOIN groups g2 ON lg2.groups_id = g2.id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                             JOIN Student s2 ON g2.id = s2.group_id
                                                             join users u2 on s2.user_id = u2.id and cs.rfid=u2.RFID
                                                             join EducationType et2 on g2.educationType_id = et2.id
                                                        AND f2.shortName = @faculty
                                                        AND et2.name = @eduType
                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id, f2.shortName) AS f
                                              GROUP BY f.cardDB_id,f.shortName) cs ON cs.cardDB_id = f.cardId and cs.shortName=f.shortName
                          group by f.cardId, cs.comeCount,f.shortName) as d group by d.shortName
                 ) as f2;
            end

        insert into @UsersState (totalAllStudent, totalComeCount)
        select @allStudent,@allCome;
        RETURN;
    end
go







CREATE FUNCTION dbo.GetTotalClassroomAttendanceByFaculty
(
    @Year INT,
    @SortNumber INT,
    @Day VARCHAR(50),
    @faculty VARCHAR(255)
)
    RETURNS @UsersState TABLE
                        (
                            totalAllStudent int,
                            totalComeCount int
                        )
        AS
    Begin
        DECLARE @allStudent int;
        DECLARE @allCome int;

        if @Year=YEAR(getdate()) and @SortNumber=DATEPART(WEEK, getdate()) and @Day=DATEPART(WEEKDAY , getdate())-1
            begin
            SELECT TOP 1
                @allStudent = totalAllStudent,
                @allCome = totalComeCount
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount,f.shortName
                          from (SELECT s.id as studentId,
                                       c.id as cardId,
                                       f.shortName
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         join Faculty f on g.faculty_id = f.id
                                         JOIN Student s ON g.id = s.group_id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @SortNumber
                                  AND c.day = @Day
                                  AND f.shortName = @faculty
                                  AND c.period !> DATEPART(Hour, getdate()) - 8
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id,f.shortName) as f
                                   LEFT JOIN (SELECT COUNT(rfid) AS comeCount,
                                                     cardDB_id,shortName
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id,
                                                           f2.shortName
                                                    FROM CardDbStatistics cs
                                                             join CardDB c2 on cs.cardDB_id = c2.id
                                                             JOIN LessonDB ld2 ON c2.lesson_id = ld2.id
                                                             JOIN LessonDB_groups lg2 ON ld2.id = lg2.LessonDB_id
                                                             JOIN groups g2 ON lg2.groups_id = g2.id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                             JOIN Student s2 ON g2.id = s2.group_id
                                                             join users u2 on s2.user_id = u2.id and cs.rfid=u2.RFID
                                                        AND f2.shortName = @faculty
                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id, f2.shortName) AS f
                                              GROUP BY f.cardDB_id,f.shortName) cs ON cs.cardDB_id = f.cardId and cs.shortName=f.shortName
                          group by f.cardId, cs.comeCount,f.shortName) as d group by d.shortName
                 ) as f1;
            end
        else
            begin
            SELECT TOP 1
                @allStudent = totalAllStudent,
                @allCome = totalComeCount
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount,f.shortName
                          from (SELECT s.id as studentId,
                                       c.id as cardId,
                                       f.shortName
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         join Faculty f on g.faculty_id = f.id
                                         JOIN Student s ON g.id = s.group_id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @SortNumber
                                  AND c.day = @Day
                                  AND f.shortName = @faculty
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id,f.shortName) as f
                                   LEFT JOIN (SELECT COUNT(rfid) AS comeCount,
                                                     cardDB_id,shortName
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id,
                                                           f2.shortName
                                                    FROM CardDbStatistics cs
                                                             join CardDB c2 on cs.cardDB_id = c2.id
                                                             JOIN LessonDB ld2 ON c2.lesson_id = ld2.id
                                                             JOIN LessonDB_groups lg2 ON ld2.id = lg2.LessonDB_id
                                                             JOIN groups g2 ON lg2.groups_id = g2.id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                             JOIN Student s2 ON g2.id = s2.group_id
                                                             join users u2 on s2.user_id = u2.id and cs.rfid=u2.RFID
                                                        AND f2.shortName = @faculty
                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id, f2.shortName) AS f
                                              GROUP BY f.cardDB_id,f.shortName) cs ON cs.cardDB_id = f.cardId and cs.shortName=f.shortName
                          group by f.cardId, cs.comeCount,f.shortName) as d group by d.shortName
                 ) as f2;
            end

        insert into @UsersState (totalAllStudent, totalComeCount)
        select @allStudent,@allCome;
        RETURN;
    end
go





CREATE FUNCTION dbo.GetTotalClassroomAttendanceWithFacultiesAndEduTypeAndCourse
(
    @Year INT,
    @SortNumber INT,
    @Day VARCHAR(50),
    @EduType VARCHAR(2550),
    @Course INT
)
    RETURNS @UsersState TABLE
                        (
                            totalAllStudent int,
                            totalComeCount int,
                            shortName varchar(255)
                        )
AS
Begin
    if @Year=YEAR(getdate()) and @SortNumber=DATEPART(WEEK, getdate()) and @Day=DATEPART(WEEKDAY , getdate())-1
        begin
            insert into @UsersState (totalAllStudent, totalComeCount,shortName)
            SELECT
                totalAllStudent,
                totalComeCount,
                shortName
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount,d.shortName from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount,f.shortName
                          from (SELECT s.id as studentId,
                                       c.id as cardId,
                                       f.shortName
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         JOIN EducationType et on g.educationType_id = et.id
                                         JOIN Student s ON g.id = s.group_id
                                         JOIN Faculty f on g.faculty_id = f.id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @SortNumber
                                  AND c.day = @Day
                                  AND g.level = @Course
                                  AND et.name = @EduType
                                  AND c.period !> DATEPART(Hour, getdate()) - 8
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id,f.shortName) as f
                                   LEFT JOIN (SELECT COUNT(rfid) AS comeCount,
                                                     cardDB_id,shortName
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id,
                                                           f2.shortName
                                                    FROM CardDbStatistics cs
                                                             join CardDB c2 on cs.cardDB_id = c2.id
                                                             JOIN LessonDB ld2 ON c2.lesson_id = ld2.id
                                                             JOIN LessonDB_groups lg2 ON ld2.id = lg2.LessonDB_id
                                                             JOIN groups g2 ON lg2.groups_id = g2.id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                             JOIN Student s2 ON g2.id = s2.group_id
                                                             join users u2 on s2.user_id = u2.id and cs.rfid=u2.RFID

                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id, f2.shortName) AS f
                                              GROUP BY f.cardDB_id,f.shortName) cs ON cs.cardDB_id = f.cardId and cs.shortName=f.shortName
                          group by f.cardId, cs.comeCount,f.shortName) as d group by d.shortName
                 ) as f1;
        end
    else
        begin
            insert into @UsersState (totalAllStudent, totalComeCount,shortName)
            SELECT
                totalAllStudent,
                totalComeCount,
                shortName
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount,d.shortName from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount,f.shortName
                          from (SELECT s.id as studentId,
                                       c.id as cardId,
                                       f.shortName
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         JOIN EducationType et on g.educationType_id = et.id
                                         JOIN Student s ON g.id = s.group_id
                                         JOIN Faculty f on g.faculty_id = f.id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @SortNumber
                                  AND c.day = @Day
                                  AND g.level = @Course
                                  AND et.name = @EduType
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id,f.shortName) as f
                                   LEFT JOIN (SELECT COUNT(rfid) AS comeCount,
                                                     cardDB_id,shortName
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id,
                                                           f2.shortName
                                                    FROM CardDbStatistics cs
                                                             join CardDB c2 on cs.cardDB_id = c2.id
                                                             JOIN LessonDB ld2 ON c2.lesson_id = ld2.id
                                                             JOIN LessonDB_groups lg2 ON ld2.id = lg2.LessonDB_id
                                                             JOIN groups g2 ON lg2.groups_id = g2.id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                             JOIN Student s2 ON g2.id = s2.group_id
                                                             join users u2 on s2.user_id = u2.id and cs.rfid=u2.RFID

                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id, f2.shortName) AS f
                                              GROUP BY f.cardDB_id,f.shortName) cs ON cs.cardDB_id = f.cardId and cs.shortName=f.shortName
                          group by f.cardId, cs.comeCount,f.shortName) as d group by d.shortName
                 ) as f2;
        end
    RETURN;
end
go



CREATE FUNCTION dbo.GetTotalClassroomAttendanceWithFacultiesAndEduType
(
    @Year INT,
    @SortNumber INT,
    @Day VARCHAR(50),
    @EduType VARCHAR(2550)
)
    RETURNS @UsersState TABLE
                        (
                            totalAllStudent int,
                            totalComeCount int,
                            shortName varchar(255)
                        )
AS
Begin
    if @Year=YEAR(getdate()) and @SortNumber=DATEPART(WEEK, getdate()) and @Day=DATEPART(WEEKDAY , getdate())-1
        begin
            insert into @UsersState (totalAllStudent, totalComeCount,shortName)
            SELECT
                totalAllStudent,
                totalComeCount,
                shortName
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount,d.shortName from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount,f.shortName
                          from (SELECT s.id as studentId,
                                       c.id as cardId,
                                       f.shortName
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         JOIN EducationType et on g.educationType_id = et.id
                                         JOIN Student s ON g.id = s.group_id
                                         JOIN Faculty f on g.faculty_id = f.id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @SortNumber
                                  AND c.day = @Day
                                  AND et.name = @EduType
                                  AND c.period !> DATEPART(Hour, getdate()) - 8
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id,f.shortName) as f
                                   LEFT JOIN (SELECT COUNT(rfid) AS comeCount,
                                                     cardDB_id,shortName
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id,
                                                           f2.shortName
                                                    FROM CardDbStatistics cs
                                                             join CardDB c2 on cs.cardDB_id = c2.id
                                                             JOIN LessonDB ld2 ON c2.lesson_id = ld2.id
                                                             JOIN LessonDB_groups lg2 ON ld2.id = lg2.LessonDB_id
                                                             JOIN groups g2 ON lg2.groups_id = g2.id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                             JOIN Student s2 ON g2.id = s2.group_id
                                                             join users u2 on s2.user_id = u2.id and cs.rfid=u2.RFID

                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id, f2.shortName) AS f
                                              GROUP BY f.cardDB_id,f.shortName) cs ON cs.cardDB_id = f.cardId and cs.shortName=f.shortName
                          group by f.cardId, cs.comeCount,f.shortName) as d group by d.shortName
                 ) as f1;
        end
    else
        begin
            insert into @UsersState (totalAllStudent, totalComeCount,shortName)
            SELECT
                totalAllStudent,
                totalComeCount,
                shortName
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount,d.shortName from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount,f.shortName
                          from (SELECT s.id as studentId,
                                       c.id as cardId,
                                       f.shortName
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         JOIN EducationType et on g.educationType_id = et.id
                                         JOIN Student s ON g.id = s.group_id
                                         JOIN Faculty f on g.faculty_id = f.id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @SortNumber
                                  AND c.day = @Day
                                  AND et.name = @EduType
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id,f.shortName) as f
                                   LEFT JOIN (SELECT COUNT(rfid) AS comeCount,
                                                     cardDB_id,shortName
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id,
                                                           f2.shortName
                                                    FROM CardDbStatistics cs
                                                             join CardDB c2 on cs.cardDB_id = c2.id
                                                             JOIN LessonDB ld2 ON c2.lesson_id = ld2.id
                                                             JOIN LessonDB_groups lg2 ON ld2.id = lg2.LessonDB_id
                                                             JOIN groups g2 ON lg2.groups_id = g2.id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                             JOIN Student s2 ON g2.id = s2.group_id
                                                             join users u2 on s2.user_id = u2.id and cs.rfid=u2.RFID

                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id, f2.shortName) AS f
                                              GROUP BY f.cardDB_id,f.shortName) cs ON cs.cardDB_id = f.cardId and cs.shortName=f.shortName
                          group by f.cardId, cs.comeCount,f.shortName) as d group by d.shortName
                 ) as f2;
        end
    RETURN;
end
go




CREATE FUNCTION dbo.GetTotalClassroomAttendanceWithFacultiesAndCourse
(
    @Year INT,
    @SortNumber INT,
    @Day VARCHAR(50),
    @Course INT
)
    RETURNS @UsersState TABLE
                        (
                            totalAllStudent int,
                            totalComeCount int,
                            shortName varchar(255)
                        )
AS
Begin
    if @Year=YEAR(getdate()) and @SortNumber=DATEPART(WEEK, getdate()) and @Day=DATEPART(WEEKDAY , getdate())-1
        begin
            insert into @UsersState (totalAllStudent, totalComeCount,shortName)
            SELECT
                totalAllStudent,
                totalComeCount,
                shortName
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount,d.shortName from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount,f.shortName
                          from (SELECT s.id as studentId,
                                       c.id as cardId,
                                       f.shortName
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         JOIN Student s ON g.id = s.group_id
                                         JOIN Faculty f on g.faculty_id = f.id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @SortNumber
                                  AND c.day = @Day
                                  AND g.level = @Course
                                  AND c.period !> DATEPART(Hour, getdate()) - 8
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id,f.shortName) as f
                                   LEFT JOIN (SELECT COUNT(rfid) AS comeCount,
                                                     cardDB_id,shortName
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id,
                                                           f2.shortName
                                                    FROM CardDbStatistics cs
                                                             join CardDB c2 on cs.cardDB_id = c2.id
                                                             JOIN LessonDB ld2 ON c2.lesson_id = ld2.id
                                                             JOIN LessonDB_groups lg2 ON ld2.id = lg2.LessonDB_id
                                                             JOIN groups g2 ON lg2.groups_id = g2.id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                             JOIN Student s2 ON g2.id = s2.group_id
                                                             join users u2 on s2.user_id = u2.id and cs.rfid=u2.RFID

                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id, f2.shortName) AS f
                                              GROUP BY f.cardDB_id,f.shortName) cs ON cs.cardDB_id = f.cardId and cs.shortName=f.shortName
                          group by f.cardId, cs.comeCount,f.shortName) as d group by d.shortName
                 ) as f1;
        end
    else
        begin
            insert into @UsersState (totalAllStudent, totalComeCount,shortName)
            SELECT
                totalAllStudent,
                totalComeCount,
                shortName
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount,d.shortName from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount,f.shortName
                          from (SELECT s.id as studentId,
                                       c.id as cardId,
                                       f.shortName
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         JOIN Student s ON g.id = s.group_id
                                         JOIN Faculty f on g.faculty_id = f.id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @SortNumber
                                  AND c.day = @Day
                                  AND g.level = @Course
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id,f.shortName) as f
                                   LEFT JOIN (SELECT COUNT(rfid) AS comeCount,
                                                     cardDB_id,shortName
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id,
                                                           f2.shortName
                                                    FROM CardDbStatistics cs
                                                             join CardDB c2 on cs.cardDB_id = c2.id
                                                             JOIN LessonDB ld2 ON c2.lesson_id = ld2.id
                                                             JOIN LessonDB_groups lg2 ON ld2.id = lg2.LessonDB_id
                                                             JOIN groups g2 ON lg2.groups_id = g2.id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                             JOIN Student s2 ON g2.id = s2.group_id
                                                             join users u2 on s2.user_id = u2.id and cs.rfid=u2.RFID

                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id, f2.shortName) AS f
                                              GROUP BY f.cardDB_id,f.shortName) cs ON cs.cardDB_id = f.cardId and cs.shortName=f.shortName
                          group by f.cardId, cs.comeCount,f.shortName) as d group by d.shortName
                 ) as f2;
        end
    RETURN;
end
go





CREATE FUNCTION dbo.GetTotalClassroomAttendanceWithFaculties
(
    @Year INT,
    @SortNumber INT,
    @Day VARCHAR(50)
)
    RETURNS @UsersState TABLE
                        (
                            totalAllStudent int,
                            totalComeCount int,
                            shortName varchar(255)
                        )
AS
Begin
    if @Year=YEAR(getdate()) and @SortNumber=DATEPART(WEEK, getdate()) and @Day=DATEPART(WEEKDAY , getdate())-1
        begin
            insert into @UsersState (totalAllStudent, totalComeCount,shortName)
            SELECT
                totalAllStudent,
                totalComeCount,
                shortName
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount,d.shortName from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount,f.shortName
                          from (SELECT s.id as studentId,
                                       c.id as cardId,
                                       f.shortName
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         JOIN Student s ON g.id = s.group_id
                                         JOIN Faculty f on g.faculty_id = f.id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @SortNumber
                                  AND c.day = @Day
                                  AND c.period !> DATEPART(Hour, getdate()) - 8
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id,f.shortName) as f
                                   LEFT JOIN (SELECT COUNT(rfid) AS comeCount,
                                                     cardDB_id,shortName
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id,
                                                           f2.shortName
                                                    FROM CardDbStatistics cs
                                                             join CardDB c2 on cs.cardDB_id = c2.id
                                                             JOIN LessonDB ld2 ON c2.lesson_id = ld2.id
                                                             JOIN LessonDB_groups lg2 ON ld2.id = lg2.LessonDB_id
                                                             JOIN groups g2 ON lg2.groups_id = g2.id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                             JOIN Student s2 ON g2.id = s2.group_id
                                                             join users u2 on s2.user_id = u2.id and cs.rfid=u2.RFID

                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id, f2.shortName) AS f
                                              GROUP BY f.cardDB_id,f.shortName) cs ON cs.cardDB_id = f.cardId and cs.shortName=f.shortName
                          group by f.cardId, cs.comeCount,f.shortName) as d group by d.shortName
                 ) as f1;
        end
    else
        begin
            insert into @UsersState (totalAllStudent, totalComeCount,shortName)
            SELECT
                totalAllStudent,
                totalComeCount,
                shortName
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount,d.shortName from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount,f.shortName
                          from (SELECT s.id as studentId,
                                       c.id as cardId,
                                       f.shortName
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         JOIN Student s ON g.id = s.group_id
                                         JOIN Faculty f on g.faculty_id = f.id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @SortNumber
                                  AND c.day = @Day
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id,f.shortName) as f
                                   LEFT JOIN (SELECT COUNT(rfid) AS comeCount,
                                                     cardDB_id,shortName
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id,
                                                           f2.shortName
                                                    FROM CardDbStatistics cs
                                                             join CardDB c2 on cs.cardDB_id = c2.id
                                                             JOIN LessonDB ld2 ON c2.lesson_id = ld2.id
                                                             JOIN LessonDB_groups lg2 ON ld2.id = lg2.LessonDB_id
                                                             JOIN groups g2 ON lg2.groups_id = g2.id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                             JOIN Student s2 ON g2.id = s2.group_id
                                                             join users u2 on s2.user_id = u2.id and cs.rfid=u2.RFID

                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id, f2.shortName) AS f
                                              GROUP BY f.cardDB_id,f.shortName) cs ON cs.cardDB_id = f.cardId and cs.shortName=f.shortName
                          group by f.cardId, cs.comeCount,f.shortName) as d group by d.shortName
                 ) as f2;
        end
    RETURN;
end
go





CREATE FUNCTION dbo.GetTotalClassroomAttendanceWithFacultiesAndCourse
(
    @Year INT,
    @SortNumber INT,
    @Day VARCHAR(50),
    @Course INT
)
    RETURNS @UsersState TABLE
                        (
                            totalAllStudent int,
                            totalComeCount int,
                            shortName varchar(255)
                        )
AS
Begin
    if @Year=YEAR(getdate()) and @SortNumber=DATEPART(WEEK, getdate()) and @Day=DATEPART(WEEKDAY , getdate())-1
        begin
            insert into @UsersState (totalAllStudent, totalComeCount,shortName)
            SELECT
                totalAllStudent,
                totalComeCount,
                shortName
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount,d.shortName from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount,shortName
                          from (SELECT s.id as studentId,
                                       c.id as cardId,
                                       f.shortName
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         JOIN Student s ON g.id = s.group_id
                                         JOIN Faculty f on g.faculty_id = f.id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @SortNumber
                                  AND c.day = @Day
                                  AND g.level = @Course
                                  AND c.period !> DATEPART(Hour, getdate()) - 8
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id,f.shortName) as f
                                   LEFT JOIN (SELECT COUNT(cardDB_id) AS comeCount,
                                                     cardDB_id
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id
                                                    FROM CardDbStatistics cs
                                                             join users u2 on u2.RFID = cs.rfid
                                                             join Student s2 on u2.id = s2.user_id
                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id) AS f
                                              GROUP BY f.cardDB_id) cs ON cs.cardDB_id = f.cardId
                          group by f.cardId, cs.comeCount,f.shortName) as d group by d.shortName
                 ) as f1;
        end
    else
        begin
            insert into @UsersState (totalAllStudent, totalComeCount,shortName)
            SELECT
                totalAllStudent,
                totalComeCount,
                shortName
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount,d.shortName from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount,shortName
                          from (SELECT s.id as studentId,
                                       c.id as cardId,
                                       f.shortName
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         JOIN Student s ON g.id = s.group_id
                                         JOIN Faculty f on g.faculty_id = f.id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @SortNumber
                                  AND c.day = @Day
                                  AND g.level = @Course
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id,f.shortName) as f
                                   LEFT JOIN (SELECT COUNT(cardDB_id) AS comeCount,
                                                     cardDB_id
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id
                                                    FROM CardDbStatistics cs
                                                             join users u2 on u2.RFID = cs.rfid
                                                             join Student s2 on u2.id = s2.user_id
                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id) AS f
                                              GROUP BY f.cardDB_id) cs ON cs.cardDB_id = f.cardId
                          group by f.cardId, cs.comeCount,f.shortName) as d group by d.shortName
                 ) as f2;
        end
    RETURN;
end
go


CREATE FUNCTION dbo.GetTotalClassroomAttendanceWithFacultiesAndEduTypeAndCourse
(
    @Year INT,
    @SortNumber INT,
    @Day VARCHAR(50),
    @EduType VARCHAR(2550),
    @Course INT
)
    RETURNS @UsersState TABLE
                        (
                            totalAllStudent int,
                            totalComeCount int,
                            shortName varchar(255)
                        )
AS
Begin
    if @Year=YEAR(getdate()) and @SortNumber=DATEPART(WEEK, getdate()) and @Day=DATEPART(WEEKDAY , getdate())-1
        begin
            insert into @UsersState (totalAllStudent, totalComeCount,shortName)
            SELECT
                totalAllStudent,
                totalComeCount,
                shortName
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount,d.shortName from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount,shortName
                          from (SELECT s.id as studentId,
                                       c.id as cardId,
                                       f.shortName
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         JOIN EducationType et on g.educationType_id = et.id
                                         JOIN Student s ON g.id = s.group_id
                                         JOIN Faculty f on g.faculty_id = f.id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @SortNumber
                                  AND c.day = @Day
                                  AND g.level = @Course
                                  AND et.name = @EduType
                                  AND c.period !> DATEPART(Hour, getdate()) - 8
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id,f.shortName) as f
                                   LEFT JOIN (SELECT COUNT(cardDB_id) AS comeCount,
                                                     cardDB_id
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id
                                                    FROM CardDbStatistics cs
                                                             join users u2 on u2.RFID = cs.rfid
                                                             join Student s2 on u2.id = s2.user_id
                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id) AS f
                                              GROUP BY f.cardDB_id) cs ON cs.cardDB_id = f.cardId
                          group by f.cardId, cs.comeCount,f.shortName) as d group by d.shortName
                 ) as f1;
        end
    else
        begin
            insert into @UsersState (totalAllStudent, totalComeCount,shortName)
            SELECT
                totalAllStudent,
                totalComeCount,
                shortName
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount,d.shortName from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount,shortName
                          from (SELECT s.id as studentId,
                                       c.id as cardId,
                                       f.shortName
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         JOIN EducationType et on g.educationType_id = et.id
                                         JOIN Student s ON g.id = s.group_id
                                         JOIN Faculty f on g.faculty_id = f.id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @SortNumber
                                  AND c.day = @Day
                                  AND g.level = @Course
                                  AND et.name = @EduType
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id,f.shortName) as f
                                   LEFT JOIN (SELECT COUNT(cardDB_id) AS comeCount,
                                                     cardDB_id
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id
                                                    FROM CardDbStatistics cs
                                                             join users u2 on u2.RFID = cs.rfid
                                                             join Student s2 on u2.id = s2.user_id
                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id) AS f
                                              GROUP BY f.cardDB_id) cs ON cs.cardDB_id = f.cardId
                          group by f.cardId, cs.comeCount,f.shortName) as d group by d.shortName
                 ) as f2;
        end
    RETURN;
end
go

CREATE FUNCTION dbo.GetTotalClassroomAttendanceWithFacultiesAndEduType
(
    @Year INT,
    @SortNumber INT,
    @Day VARCHAR(50),
    @EduType VARCHAR(2550)
)
    RETURNS @UsersState TABLE
                        (
                            totalAllStudent int,
                            totalComeCount int,
                            shortName varchar(255)
                        )
AS
Begin
    if @Year=YEAR(getdate()) and @SortNumber=DATEPART(WEEK, getdate()) and @Day=DATEPART(WEEKDAY , getdate())-1
        begin
            insert into @UsersState (totalAllStudent, totalComeCount,shortName)
            SELECT
                totalAllStudent,
                totalComeCount,
                shortName
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount,d.shortName from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount,shortName
                          from (SELECT s.id as studentId,
                                       c.id as cardId,
                                       f.shortName
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         JOIN EducationType et on g.educationType_id = et.id
                                         JOIN Student s ON g.id = s.group_id
                                         JOIN Faculty f on g.faculty_id = f.id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @SortNumber
                                  AND c.day = @Day
                                  AND et.name = @EduType
                                  AND c.period !> DATEPART(Hour, getdate()) - 8
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id,f.shortName) as f
                                   LEFT JOIN (SELECT COUNT(cardDB_id) AS comeCount,
                                                     cardDB_id
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id
                                                    FROM CardDbStatistics cs
                                                             join users u2 on u2.RFID = cs.rfid
                                                             join Student s2 on u2.id = s2.user_id
                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id) AS f
                                              GROUP BY f.cardDB_id) cs ON cs.cardDB_id = f.cardId
                          group by f.cardId, cs.comeCount,f.shortName) as d group by d.shortName
                 ) as f1;
        end
    else
        begin
            insert into @UsersState (totalAllStudent, totalComeCount,shortName)
            SELECT
                totalAllStudent,
                totalComeCount,
                shortName
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount,d.shortName from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount,shortName
                          from (SELECT s.id as studentId,
                                       c.id as cardId,
                                       f.shortName
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         JOIN EducationType et on g.educationType_id = et.id
                                         JOIN Student s ON g.id = s.group_id
                                         JOIN Faculty f on g.faculty_id = f.id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @SortNumber
                                  AND c.day = @Day
                                  AND et.name = @EduType
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id,f.shortName) as f
                                   LEFT JOIN (SELECT COUNT(cardDB_id) AS comeCount,
                                                     cardDB_id
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id
                                                    FROM CardDbStatistics cs
                                                             join users u2 on u2.RFID = cs.rfid
                                                             join Student s2 on u2.id = s2.user_id
                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id) AS f
                                              GROUP BY f.cardDB_id) cs ON cs.cardDB_id = f.cardId
                          group by f.cardId, cs.comeCount,f.shortName) as d group by d.shortName
                 ) as f2;
        end
    RETURN;
end
go



CREATE FUNCTION dbo.GetTotalClassroomAttendanceWithFaculties
(
    @Year INT,
    @SortNumber INT,
    @Day VARCHAR(50)
)
    RETURNS @UsersState TABLE
                        (
                            totalAllStudent int,
                            totalComeCount int,
                            shortName varchar(255)
                        )
AS
Begin
    if @Year=YEAR(getdate()) and @SortNumber=DATEPART(WEEK, getdate()) and @Day=DATEPART(WEEKDAY , getdate())-1
        begin
            insert into @UsersState (totalAllStudent, totalComeCount,shortName)
            SELECT
                totalAllStudent,
                totalComeCount,
                shortName
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount,d.shortName from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount,shortName
                          from (SELECT s.id as studentId,
                                       c.id as cardId,
                                       f.shortName
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         JOIN Student s ON g.id = s.group_id
                                         JOIN Faculty f on g.faculty_id = f.id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @SortNumber
                                  AND c.day = @Day
                                  AND c.period !> DATEPART(Hour, getdate()) - 8
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id,f.shortName) as f
                                   LEFT JOIN (SELECT COUNT(cardDB_id) AS comeCount,
                                                     cardDB_id
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id
                                                    FROM CardDbStatistics cs
                                                             join users u2 on u2.RFID = cs.rfid
                                                             join Student s2 on u2.id = s2.user_id
                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id) AS f
                                              GROUP BY f.cardDB_id) cs ON cs.cardDB_id = f.cardId
                          group by f.cardId, cs.comeCount,f.shortName) as d group by d.shortName
                 ) as f1;
        end
    else
        begin
            insert into @UsersState (totalAllStudent, totalComeCount,shortName)
            SELECT
                totalAllStudent,
                totalComeCount,
                shortName
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount,d.shortName from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount,shortName
                          from (SELECT s.id as studentId,
                                       c.id as cardId,
                                       f.shortName
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         JOIN Student s ON g.id = s.group_id
                                         JOIN Faculty f on g.faculty_id = f.id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @SortNumber
                                  AND c.day = @Day
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id,f.shortName) as f
                                   LEFT JOIN (SELECT COUNT(cardDB_id) AS comeCount,
                                                     cardDB_id
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id
                                                    FROM CardDbStatistics cs
                                                             join users u2 on u2.RFID = cs.rfid
                                                             join Student s2 on u2.id = s2.user_id
                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id) AS f
                                              GROUP BY f.cardDB_id) cs ON cs.cardDB_id = f.cardId
                          group by f.cardId, cs.comeCount,f.shortName) as d group by d.shortName
                 ) as f2;
        end
    RETURN;
end
go


CREATE FUNCTION GetEarliestTime
(
    @cardDB_id VARCHAR(255),
    @rfid VARCHAR(255)
)
    RETURNS DATETIME
AS
BEGIN
    DECLARE @earliestTime DATETIME;

    SELECT TOP 1 @earliestTime = cs.time
    FROM CardDbStatistics cs
    WHERE cs.cardDB_id = @cardDB_id
      AND cs.rfid = @rfid
    ORDER BY cs.time ASC;

    RETURN @earliestTime;
END;




todo--------------------------------trigger



-- Now, create the trigger
CREATE TRIGGER trg_acc_monitor_log_insert
    ON acc_monitor_log
    AFTER INSERT
    AS
BEGIN
    -- Declare necessary variables
    DECLARE @id INT;
    DECLARE @deviceId INT;
    DECLARE @eventId INT;
    DECLARE @time DATETIME;
    DECLARE @carnNo NVARCHAR(200);

    -- Select the data from the inserted row
    SELECT @id = id,
           @deviceId = device_id,
           @eventId = event_point_id,
           @time = time,
           @carnNo = card_no
    FROM inserted;

    DECLARE @cardId varchar(255);
    set @cardId = (
        SELECT TOP 1 c.id
        FROM CardDB c
                 JOIN WeekOfEducationYear w ON c.weekOfEducationYear_id = w.id
                 JOIN acc_door ad ON (ad.door_name COLLATE SQL_Latin1_General_CP1_CI_AS LIKE '%' + c.classroom + '%' COLLATE SQL_Latin1_General_CP1_CI_AS) or (c.classroom COLLATE SQL_Latin1_General_CP1_CI_AS LIKE '%' + ad.door_name + '%' COLLATE SQL_Latin1_General_CP1_CI_AS)

        WHERE w.year = YEAR(@time)
          AND w.sortNumber = DATEPART(WEEK, @time)
          AND c.day = DATEPART(WEEKDAY, @time) - 1
          AND c.period = DATEPART(HOUR, DATEADD(MINUTE, 10, @time)) - 8
          AND ad.device_id = @deviceId and ad.door_no=@eventId
    );

    if @cardId is not null
        -- Insert a new row into the audit table with the log details
        INSERT INTO CardDbStatistics (id, cardDB_id, rfid, time)
        SELECT NEWID(), f.id, @carnNo, @time
        FROM (
             SELECT c.id
             FROM CardDB c
                      JOIN WeekOfEducationYear w ON c.weekOfEducationYear_id = w.id
                      JOIN acc_door ad ON (ad.door_name COLLATE SQL_Latin1_General_CP1_CI_AS LIKE '%' + c.classroom + '%' COLLATE SQL_Latin1_General_CP1_CI_AS)
                 OR (c.classroom COLLATE SQL_Latin1_General_CP1_CI_AS LIKE '%' + ad.door_name + '%' COLLATE SQL_Latin1_General_CP1_CI_AS)
             WHERE w.year = YEAR(@time)
               AND w.sortNumber = DATEPART(WEEK, @time)
               AND c.day = DATEPART(WEEKDAY, @time) - 1
               AND c.period = DATEPART(HOUR, DATEADD(MINUTE, 10, @time)) - 8
               AND ad.device_id = @deviceId
               AND ad.door_no = @eventId
             group by c.id
         ) AS f;

--         VALUES (NEWID(),@cardId,@carnNo,@time);
END;
go


-- Now, create the trigger
CREATE TRIGGER trg_acc_monitor_log_insert
    ON acc_monitor_log
    AFTER INSERT
    AS
BEGIN
    -- Declare necessary variables
    DECLARE @id INT;
    DECLARE @deviceId INT;
    DECLARE @time DATETIME;
    DECLARE @carnNo NVARCHAR(200);

    -- Select the data from the inserted row
    SELECT @id = id,
           @deviceId = device_id,
           @time = time,
           @carnNo = card_no
    FROM inserted;

    DECLARE @cardId varchar(255);
    set @cardId = (
        SELECT TOP 1 c.id
        FROM CardDB c
                 JOIN WeekOfEducationYear w ON c.weekOfEducationYear_id = w.id
                 JOIN acc_door ad ON c.classroom COLLATE SQL_Latin1_General_CP1_CI_AS LIKE '%' + ad.door_name + '%' COLLATE SQL_Latin1_General_CP1_CI_AS
        WHERE w.year = YEAR(@time)
          AND w.sortNumber = DATEPART(WEEK, @time)
          AND c.day = DATEPART(WEEKDAY, @time) - 1
          AND c.period = DATEPART(HOUR, DATEADD(MINUTE, 10, @time)) - 8
          AND ad.device_id = @deviceId
    );

    if @cardId is not null
        -- Insert a new row into the audit table with the log details
        INSERT INTO CardDbStatistics (id,cardDB_id,rfid,time)
        VALUES (NEWID(),@cardId,@carnNo,@time);
END;
go


-- Now, create the trigger
CREATE TRIGGER trg_acc_monitor_log_insert
    ON acc_monitor_log
    AFTER INSERT
    AS
BEGIN
    -- Declare necessary variables
    DECLARE @id INT;
    DECLARE @room varchar(255);
    DECLARE @time DATETIME;
    DECLARE @carnNo NVARCHAR(200);

    -- Select the data from the inserted row
    SELECT @id = id,
           @room = event_point_name,
           @time = time,
           @carnNo = card_no
    FROM inserted;

    DECLARE @cardId varchar(255);
    set @cardId = (
        select Top 1 c.id from CardDB c
                                   join WeekOfEducationYear w on c.weekOfEducationYear_id = w.id
        where w.year=YEAR(@time)
          and w.sortNumber=DATEPART(WEEK, @time)
          and c.day=DATEPART(WEEKDAY , @time)-1
          and c.period=DATEPART(Hour , DATEADD(MINUTE, 10, @time))-8
          and c.classroom like '%'+@room+'%'
        );

    if @cardId is not null
    -- Insert a new row into the audit table with the log details
    INSERT INTO CardDbStatistics (id,cardDB_id,rfid,time)
    VALUES (NEWID(),@cardId,@carnNo,@time);
END;
go


v3

CREATE FUNCTION dbo.GetPassedTeachers
(
    @Year INT,
    @SortNumber INT,
    @Day VARCHAR(50)
)
    RETURNS @UsersState TABLE
                        (
                            classroom varchar(255),
                            fullName varchar(255),
                            kafedra varchar(255),
                            section int,
                            login varchar(255),
                            cardId varchar(255),
                            rfid varchar(255)
                        )
AS
Begin

    if @Year=YEAR(getdate()) and @SortNumber=DATEPART(WEEK, getdate()) and @Day=DATEPART(WEEKDAY , getdate())-1
        begin
            insert into @UsersState (classroom, fullName,kafedra,section,login,cardId,rfid)
            select f1.classroom,f1.fullName, f1.nameUz as kafedra  ,f1.period as section,f1.login,f1.cardId, f1.RFID  from
                (SELECT k.nameUz,
                        u.fullName,
                        u.login,
                        u.RFID,
                        c.id as cardId,
                        c.classroom,
                        c.period
                 FROM CardDB c
                          JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                          JOIN LessonDB ld ON c.lesson_id = ld.id
                          join LessonDB_users lu on lu.LessonDB_id = ld.id
                          JOIN users u on lu.teachers_id = u.id
                          LEFT JOIN Teacher t on t.user_id=u.id
                          JOIN Kafedra k on t.kafedra_id = k.id
                 WHERE wy.year = @Year
                   AND wy.sortNumber = @SortNumber
                   AND c.day = @Day
                   AND c.period !> DATEPART(Hour, getdate()) - 8
                   AND c.classroom IS NOT NULL
                 GROUP BY k.nameUz,c.id, u.fullName,u.login,c.classroom,c.period,u.RFID) as f1
                    left OUTER join (SELECT
                                   cs.time,
                                   cs.rfid,
                                   cs.cardDB_id
                               FROM CardDbStatistics cs
                                        join users u2 on u2.RFID = cs.rfid
                               GROUP BY cs.rfid,
                                        cs.cardDB_id,cs.time
                ) as f2 on f1.cardId=f2.cardDB_id and f1.RFID=f2.rfid
--             where f2.cardDB_id is null
            GROUP BY f1.classroom, f1.fullName,f1.nameUz,f1.period,f1.login,f1.cardId, f1.rfid
            order by f1.classroom, f1.period
        end
    else
        begin
            insert into @UsersState (classroom, fullName,kafedra,section,login,cardId,rfid)
            select f1.classroom,f1.fullName, f1.nameUz as kafedra  ,f1.period as section,f1.login,f1.cardId, f1.RFID  from
                (SELECT k.nameUz,
                        u.fullName,
                        u.login,
                        u.RFID,
                        c.id as cardId,
                        c.classroom,
                        c.period
                 FROM CardDB c
                          JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                          JOIN LessonDB ld ON c.lesson_id = ld.id
                          join LessonDB_users lu on lu.LessonDB_id = ld.id
                          JOIN users u on lu.teachers_id = u.id
                          LEFT JOIN Teacher t on t.user_id=u.id
                          JOIN Kafedra k on t.kafedra_id = k.id
                 WHERE wy.year = @Year
                   AND wy.sortNumber = @SortNumber
                   AND c.day = @Day
                   AND c.classroom IS NOT NULL
                 GROUP BY k.nameUz,c.id, u.fullName,u.login,c.classroom,c.period,u.RFID) as f1
                    left OUTER join (SELECT
                                   cs.time,
                                   cs.rfid,
                                   cs.cardDB_id
                               FROM CardDbStatistics cs
                                        join users u2 on u2.RFID = cs.rfid
                               GROUP BY cs.rfid,
                                        cs.cardDB_id,cs.time
                ) as f2 on f1.cardId=f2.cardDB_id
--             where f2.cardDB_id is null
            GROUP BY f1.classroom, f1.fullName,f1.nameUz,f1.period,f1.login,f1.cardId, f1.rfid
            order by f1.classroom, f1.period
        end

    RETURN;
end
go




CREATE FUNCTION dbo.GetPassedTeachers
(
    @Year INT,
    @SortNumber INT,
    @Day VARCHAR(50)
)
    RETURNS @UsersState TABLE
                        (
                            classroom varchar(255),
                            fullName varchar(255),
                            kafedra varchar(255),
                            section int,
                            login varchar(255),
                            time datetime
                        )
AS
Begin

    if @Year=YEAR(getdate()) and @SortNumber=DATEPART(WEEK, getdate()) and @Day=DATEPART(WEEKDAY , getdate())-1
        begin
            insert into @UsersState (classroom, fullName,kafedra,section,login,time)
            select f1.classroom,f1.fullName, f1.nameUz as kafedra  ,f1.period as section,f1.login,f2.time  from
                (SELECT k.nameUz,
                        u.fullName,
                        u.login,
                        c.id as cardId,
                        c.classroom,
                        c.period
                 FROM CardDB c
                          JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                          JOIN LessonDB ld ON c.lesson_id = ld.id
                          join LessonDB_users lu on lu.LessonDB_id = ld.id
                          JOIN users u on lu.teachers_id = u.id
                          LEFT JOIN Teacher t on t.user_id=u.id
                          JOIN Kafedra k on t.kafedra_id = k.id
                 WHERE wy.year = @Year
                   AND wy.sortNumber = @SortNumber
                   AND c.day = @Day
                   AND c.period !> DATEPART(Hour, getdate()) - 8
                   AND c.classroom IS NOT NULL
                 GROUP BY k.nameUz,c.id, u.fullName,u.login,c.classroom,c.period) as f1
                    left join (SELECT
                                   cs.time,
                                   cs.rfid,
                                   cs.cardDB_id
                               FROM CardDbStatistics cs
                                        join users u2 on u2.RFID = cs.rfid
                               GROUP BY cs.rfid,
                                        cs.cardDB_id,cs.time
                ) as f2 on f1.cardId=f2.cardDB_id
            where f2.cardDB_id is null
            order by f1.classroom, f1.period,f2.time
        end
    else
        begin
            insert into @UsersState (classroom, fullName,kafedra,section,login,time)
            select f1.classroom,f1.fullName, f1.nameUz as kafedra  ,f1.period as section,f1.login,f2.time  from
                (SELECT k.nameUz,
                        u.fullName,
                        u.login,
                        c.id as cardId,
                        c.classroom,
                        c.period
                 FROM CardDB c
                          JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                          JOIN LessonDB ld ON c.lesson_id = ld.id
                          join LessonDB_users lu on lu.LessonDB_id = ld.id
                          JOIN users u on lu.teachers_id = u.id
                          LEFT JOIN Teacher t on t.user_id=u.id
                          JOIN Kafedra k on t.kafedra_id = k.id
                 WHERE wy.year = @Year
                   AND wy.sortNumber = @SortNumber
                   AND c.day = @Day
                   AND c.classroom IS NOT NULL
                 GROUP BY k.nameUz,c.id, u.fullName,u.login,c.classroom,c.period) as f1
                    left join (SELECT
                                   cs.time,
                                   cs.rfid,
                                   cs.cardDB_id
                               FROM CardDbStatistics cs
                                        join users u2 on u2.RFID = cs.rfid
                               GROUP BY cs.rfid,
                                        cs.cardDB_id,cs.time
                ) as f2 on f1.cardId=f2.cardDB_id
            where f2.cardDB_id is null
            order by f1.classroom, f1.period,f2.time
        end

    RETURN;
end
go




CREATE FUNCTION dbo.GetKafedraAttendanceById(@KafedraId varchar(255))
    RETURNS @ResultTable TABLE
                         (
                             kafedraId varchar(255),
                             comeCount INT,
                             allCount INT
                         )
AS
BEGIN
    INSERT INTO @ResultTable
    SELECT
        f2.kafedra_id AS kafedraId,
        f1.count AS comeCount,
        f2.count AS allCount
    FROM (
             SELECT
                 t.kafedra_id,
                 COUNT(card.cardNo) AS count
             FROM (
                      SELECT
                          al.card_no AS cardNo
                      FROM
                          acc_monitor_log al
                              JOIN users u ON CAST(u.RFID AS VARCHAR) = CAST(al.card_no AS VARCHAR) COLLATE Chinese_PRC_CI_AS
                      WHERE
                          al.time BETWEEN DATEADD(dd, DATEDIFF(dd, 0, GETDATE()), 0)
                              AND DATEADD(dd, DATEDIFF(dd, -1, GETDATE()), 0)
                      GROUP BY
                          al.card_no
                  ) AS card
                      JOIN users u ON CAST(card.cardNo AS VARCHAR) = CAST(u.RFID AS VARCHAR) COLLATE Chinese_PRC_CI_AS
                      JOIN Teacher t ON u.id = t.user_id
             WHERE
                 t.kafedra_id = @KafedraId
             GROUP BY
                 t.kafedra_id
         ) AS f1
             RIGHT JOIN (
        SELECT
            t.kafedra_id,
            COUNT(t.id) AS count
        FROM
            Teacher t
        WHERE
            t.kafedra_id = @KafedraId
        GROUP BY
            t.kafedra_id
    ) AS f2 ON f2.kafedra_id = f1.kafedra_id;

    RETURN;
END;
GO



CREATE FUNCTION dbo.GetUserCountByEduType(@Region VARCHAR(255))
    RETURNS @ResultTable TABLE
                         (
                             count INT,
                             eduType VARCHAR(255)
                         )
AS
BEGIN
    INSERT INTO @ResultTable
    SELECT
        COUNT(u.id) AS count,
        et.name AS eduType
    FROM
        users u
            JOIN Student s ON u.id = s.user_id
            JOIN groups g2 ON s.group_id = g2.id
            JOIN EducationType et ON g2.educationType_id = et.id
            JOIN AddressUser AU ON u.id = AU.user_id
    WHERE
        AU.region = @Region
    GROUP BY
        AU.region, et.name;

    RETURN;
END;
GO

CREATE FUNCTION dbo.GetUserCountByGender(@Region varchar(255))
    RETURNS @ResultTable TABLE
                         (
                             count INT,
                             gander VARCHAR(255)
                         )
AS
BEGIN
    INSERT INTO @ResultTable
    SELECT
        COUNT(u.id) AS count,
        G.gandername AS gander
    FROM
        users u
            JOIN AddressUser AU ON u.id = AU.user_id
            JOIN Gander G ON G.id = u.gander_id
    WHERE
        AU.region = @Region
    GROUP BY
        G.gandername, AU.region;

    RETURN;
END;
GO


CREATE FUNCTION dbo.GetKafedraAttendance()
    RETURNS @ResultTable TABLE
                         (
                             id varchar(255),
                             comeCount INT,
                             allCount INT
                         )
AS
BEGIN
    INSERT INTO @ResultTable
    SELECT
        f2.kafedra_id AS id,
        f1.count AS comeCount,
        f2.count AS allCount
    FROM (
             SELECT
                 t.kafedra_id,
                 COUNT(card.cardNo) AS count
             FROM (
                      SELECT
                          al.card_no AS cardNo
                      FROM
                          acc_monitor_log al
                              JOIN users u ON CAST(u.RFID AS VARCHAR) = CAST(al.card_no AS VARCHAR) COLLATE Chinese_PRC_CI_AS
                              JOIN users_Role ur ON u.id = ur.users_id
                              JOIN (
                              SELECT id
                              FROM Role
                              WHERE roleName = 'ROLE_TEACHER'
                          ) AS role ON ur.roles_id = role.id
                      WHERE
                          al.time BETWEEN DATEADD(dd, DATEDIFF(dd, 0, GETDATE()), 0)
                              AND DATEADD(dd, DATEDIFF(dd, -1, GETDATE()), 0)
                      GROUP BY al.card_no
                  ) AS card
                      JOIN users u ON CAST(card.cardNo AS VARCHAR) = CAST(u.RFID AS VARCHAR) COLLATE Chinese_PRC_CI_AS
                      JOIN Teacher t ON u.id = t.user_id
             GROUP BY t.kafedra_id
         ) AS f1
             RIGHT JOIN (
        SELECT
            t.kafedra_id,
            COUNT(t.id) AS count
        FROM
            Teacher t
        GROUP BY t.kafedra_id
    ) AS f2 ON f2.kafedra_id = f1.kafedra_id;

    RETURN;
END;
GO




CREATE FUNCTION dbo.GetSectionAttendance()
    RETURNS TABLE
        AS
        RETURN (
        SELECT
            f2.section_id AS id,
            f1.count AS comeCount,
            f2.count AS allCount
        FROM (
                 SELECT
                     s.section_id,
                     COUNT(card.cardNo) AS count
                 FROM (
                          SELECT
                              al.card_no AS cardNo
                          FROM
                              acc_monitor_log al
                                  JOIN users u ON CAST(u.RFID AS VARCHAR) = CAST(al.card_no AS VARCHAR) COLLATE Chinese_PRC_CI_AS
                                  JOIN users_Role ur ON u.id = ur.users_id
                                  JOIN (
                                  SELECT id
                                  FROM Role
                                  WHERE roleName <> 'ROLE_TEACHER'
                                    AND roleName <> 'ROLE_STUDENT'
                              ) AS role ON ur.roles_id = role.id
                          WHERE
                              al.time BETWEEN DATEADD(dd, DATEDIFF(dd, 0, GETDATE()), 0)
                                  AND DATEADD(dd, DATEDIFF(dd, -1, GETDATE()), 0)
                          GROUP BY al.card_no
                      ) AS card
                          JOIN users u ON CAST(card.cardNo AS VARCHAR) = CAST(u.RFID AS VARCHAR) COLLATE Chinese_PRC_CI_AS
                          JOIN Staff s ON u.id = s.user_id
                 GROUP BY s.section_id
             ) AS f1
                 RIGHT JOIN (
            SELECT
                s.section_id,
                COUNT(s.id) AS count
            FROM
                Staff s
            GROUP BY s.section_id
        ) AS f2 ON f2.section_id = f1.section_id
        );




DELETE FROM users
WHERE id IN (
    select id from users u
    join (
        select u.login, count(u.login) as count
        from users u
                 join users_Role ur on u.id = ur.users_id
                 join Role r on ur.roles_id = r.id
        where r.roleName='ROLE_STUDENT'
        group by u.login
        having count (u.login) > 1
    ) f on f.login=u.login
);




















CREATE FUNCTION dbo.GetTotalClassroomAttendanceWithWeekByEduTypeAndCourse
(
    @Year INT,
    @SortNumber INT,
    @eduType VARCHAR(255),
    @course INT
)
    RETURNS @UsersState TABLE
                        (
                            totalAllStudent int,
                            totalComeCount int
                        )
AS
Begin
    DECLARE @allStudent int;
    DECLARE @allCome int;

    if @Year=YEAR(getdate()) and @SortNumber=DATEPART(WEEK, getdate())
        begin
            SELECT TOP 1
                @allStudent = totalAllStudent,
                @allCome = totalComeCount
            FROM (
                     SELECT
                         SUM(COUNT(s.id)) OVER() AS totalAllStudent,   -- Sum of all students
                         SUM(ISNULL(cs.comeCount, 0)) OVER() AS totalComeCount  -- Sum of comeCount, replacing NULL with 0
                     FROM
                         CardDB c
                             JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                             JOIN LessonDB ld ON c.lesson_id = ld.id
                             JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                             JOIN groups g ON lg.groups_id = g.id
                             join EducationType et on g.educationType_id = et.id
                             JOIN Student s ON g.id = s.group_id
                             LEFT OUTER JOIN (
                             SELECT
                                 COUNT(cardDB_id) AS comeCount,
                                 cardDB_id
                             FROM
                                 (
                                     SELECT
                                         COUNT(rfid) AS rfid,
                                         cardDB_id
                                     FROM
                                         CardDbStatistics cs
                                     GROUP BY
                                         rfid,
                                         cardDB_id
                                 ) AS f
                             GROUP BY
                                 cardDB_id
                         ) cs ON cs.cardDB_id = c.id
                     WHERE
                         wy.year = @Year
                       AND wy.sortNumber = @SortNumber
                       AND c.day !> DATEPART(WEEKDAY , getdate())-1
                       AND et.name = @eduType
                       AND g.level = @course
                       AND c.classroom IS NOT NULL
                     GROUP BY
                         cs.comeCount
                 ) as f1;
        end
    else
        begin
            SELECT TOP 1
                @allStudent = totalAllStudent,
                @allCome = totalComeCount
            FROM (
                     SELECT
                         SUM(COUNT(s.id)) OVER() AS totalAllStudent,   -- Sum of all students
                         SUM(ISNULL(cs.comeCount, 0)) OVER() AS totalComeCount  -- Sum of comeCount, replacing NULL with 0
                     FROM
                         CardDB c
                             JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                             JOIN LessonDB ld ON c.lesson_id = ld.id
                             JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                             JOIN groups g ON lg.groups_id = g.id
                             join EducationType et on g.educationType_id = et.id
                             JOIN Student s ON g.id = s.group_id
                             LEFT OUTER JOIN (
                             SELECT
                                 COUNT(cardDB_id) AS comeCount,
                                 cardDB_id
                             FROM
                                 (
                                     SELECT
                                         COUNT(rfid) AS rfid,
                                         cardDB_id
                                     FROM
                                         CardDbStatistics cs
                                     GROUP BY
                                         rfid,
                                         cardDB_id
                                 ) AS f
                             GROUP BY
                                 cardDB_id
                         ) cs ON cs.cardDB_id = c.id
                     WHERE
                         wy.year = @Year
                       AND wy.sortNumber = @SortNumber
                       AND et.name = @eduType
                       AND g.level = @course
                       AND c.classroom IS NOT NULL
                     GROUP BY
                         cs.comeCount
                 ) as f2;
        end

    insert into @UsersState (totalAllStudent, totalComeCount)
    select @allStudent,@allCome;
    RETURN;
end
go





CREATE FUNCTION dbo.GetTotalClassroomAttendanceWithWeekByFacultyAndCourse
(
    @Year INT,
    @SortNumber INT,
    @faculty VARCHAR(255),
    @course INT
)
    RETURNS @UsersState TABLE
                        (
                            totalAllStudent int,
                            totalComeCount int
                        )
AS
Begin
    DECLARE @allStudent int;
    DECLARE @allCome int;

    if @Year=YEAR(getdate()) and @SortNumber=DATEPART(WEEK, getdate())
        begin
            SELECT TOP 1
                @allStudent = totalAllStudent,
                @allCome = totalComeCount
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount
                          from (SELECT s.id as studentId,
                                       c.id as cardId
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         join Faculty f on g.faculty_id = f.id
                                         JOIN Student s ON g.id = s.group_id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @SortNumber
                                  AND c.day !> DATEPART(WEEKDAY , getdate())-1
                                  AND f.shortName = @faculty
                                  AND g.level = @course
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id) as f
                                   LEFT JOIN (SELECT COUNT(cardDB_id) AS comeCount,
                                                     cardDB_id
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id
                                                    FROM CardDbStatistics cs
                                                             join users u2 on u2.RFID = cs.rfid
                                                             join Student s2 on u2.id = s2.user_id
                                                             JOIN groups g2 ON g2.id = s2.group_id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                        AND f2.shortName = @faculty
                                                        AND g2.level = @course
                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id) AS f
                                              GROUP BY f.cardDB_id) cs ON cs.cardDB_id = f.cardId
                          group by f.cardId, cs.comeCount) as d
                 ) as f1;
        end
    else
        begin
            SELECT TOP 1
                @allStudent = totalAllStudent,
                @allCome = totalComeCount
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount
                          from (SELECT s.id as studentId,
                                       c.id as cardId
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         join Faculty f on g.faculty_id = f.id
                                         JOIN Student s ON g.id = s.group_id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @SortNumber
                                  AND f.shortName = @faculty
                                  AND g.level = @course
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id) as f
                                   LEFT JOIN (SELECT COUNT(cardDB_id) AS comeCount,
                                                     cardDB_id
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id
                                                    FROM CardDbStatistics cs
                                                             join users u2 on u2.RFID = cs.rfid
                                                             join Student s2 on u2.id = s2.user_id
                                                             JOIN groups g2 ON g2.id = s2.group_id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                        AND f2.shortName = @faculty
                                                        AND g2.level = @course
                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id) AS f
                                              GROUP BY f.cardDB_id) cs ON cs.cardDB_id = f.cardId
                          group by f.cardId, cs.comeCount) as d
                 ) as f2;
        end

    insert into @UsersState (totalAllStudent, totalComeCount)
    select @allStudent,@allCome;
    RETURN;
end
go



CREATE FUNCTION dbo.GetTotalClassroomAttendanceWithWeekByFaculty
(
    @Year INT,
    @SortNumber INT,
    @faculty VARCHAR(255)
)
    RETURNS @UsersState TABLE
                        (
                            totalAllStudent int,
                            totalComeCount int
                        )
AS
Begin
    DECLARE @allStudent int;
    DECLARE @allCome int;

    if @Year=YEAR(getdate()) and @SortNumber=DATEPART(WEEK, getdate())
        begin
            SELECT TOP 1
                @allStudent = totalAllStudent,
                @allCome = totalComeCount
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount
                          from (SELECT s.id as studentId,
                                       c.id as cardId
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         join Faculty f on g.faculty_id = f.id
                                         JOIN Student s ON g.id = s.group_id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @SortNumber
                                  AND c.day !> DATEPART(WEEKDAY , getdate())-1
                                  AND f.shortName = @faculty
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id) as f
                                   LEFT JOIN (SELECT COUNT(cardDB_id) AS comeCount,
                                                     cardDB_id
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id
                                                    FROM CardDbStatistics cs
                                                             join users u2 on u2.RFID = cs.rfid
                                                             join Student s2 on u2.id = s2.user_id
                                                             JOIN groups g2 ON g2.id = s2.group_id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                        AND f2.shortName = @faculty
                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id) AS f
                                              GROUP BY f.cardDB_id) cs ON cs.cardDB_id = f.cardId
                          group by f.cardId, cs.comeCount) as d
                 ) as f1;
        end
    else
        begin
            SELECT TOP 1
                @allStudent = totalAllStudent,
                @allCome = totalComeCount
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount
                          from (SELECT s.id as studentId,
                                       c.id as cardId
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         join Faculty f on g.faculty_id = f.id
                                         JOIN Student s ON g.id = s.group_id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @SortNumber
                                  AND f.shortName = @faculty
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id) as f
                                   LEFT JOIN (SELECT COUNT(cardDB_id) AS comeCount,
                                                     cardDB_id
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id
                                                    FROM CardDbStatistics cs
                                                             join users u2 on u2.RFID = cs.rfid
                                                             join Student s2 on u2.id = s2.user_id
                                                             JOIN groups g2 ON g2.id = s2.group_id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                        AND f2.shortName = @faculty
                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id) AS f
                                              GROUP BY f.cardDB_id) cs ON cs.cardDB_id = f.cardId
                          group by f.cardId, cs.comeCount) as d
                 ) as f2;
        end

    insert into @UsersState (totalAllStudent, totalComeCount)
    select @allStudent,@allCome;
    RETURN;
end
go






CREATE FUNCTION dbo.GetTotalClassroomAttendanceWithWeekByCourse
(
    @Year INT,
    @SortNumber INT,
    @course INT
)
    RETURNS @UsersState TABLE
                        (
                            totalAllStudent int,
                            totalComeCount int
                        )
AS
Begin
    DECLARE @allStudent int;
    DECLARE @allCome int;

    if @Year=YEAR(getdate()) and @SortNumber=DATEPART(WEEK, getdate())
        begin
            SELECT TOP 1
                @allStudent = totalAllStudent,
                @allCome = totalComeCount
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount
                          from (SELECT s.id as studentId,
                                       c.id as cardId
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         JOIN Student s ON g.id = s.group_id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @SortNumber
                                  AND g.level = @course
                                  AND c.day !> DATEPART(WEEKDAY , getdate())-1
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id) as f
                                   LEFT JOIN (SELECT COUNT(cardDB_id) AS comeCount,
                                                     cardDB_id
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id
                                                    FROM CardDbStatistics cs
                                                             join users u2 on u2.RFID = cs.rfid
                                                             join Student s2 on u2.id = s2.user_id
                                                             JOIN groups g2 ON g2.id = s2.group_id
                                                        AND g2.level = @course
                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id) AS f
                                              GROUP BY f.cardDB_id) cs ON cs.cardDB_id = f.cardId
                          group by f.cardId, cs.comeCount) as d
                 ) as f1;
        end
    else
        begin
            SELECT TOP 1
                @allStudent = totalAllStudent,
                @allCome = totalComeCount
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount
                          from (SELECT s.id as studentId,
                                       c.id as cardId
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         JOIN Student s ON g.id = s.group_id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @SortNumber
                                  AND g.level = @course
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id) as f
                                   LEFT JOIN (SELECT COUNT(cardDB_id) AS comeCount,
                                                     cardDB_id
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id
                                                    FROM CardDbStatistics cs
                                                             join users u2 on u2.RFID = cs.rfid
                                                             join Student s2 on u2.id = s2.user_id
                                                             JOIN groups g2 ON g2.id = s2.group_id
                                                        AND g2.level = @course
                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id) AS f
                                              GROUP BY f.cardDB_id) cs ON cs.cardDB_id = f.cardId
                          group by f.cardId, cs.comeCount) as d
                 ) as f2;
        end

    insert into @UsersState (totalAllStudent, totalComeCount)
    select @allStudent,@allCome;
    RETURN;
end
go




CREATE FUNCTION dbo.GetTotalClassroomAttendanceWithByEduTypeAndFacultyAndCourse
(
    @Year INT,
    @SortNumber INT,
    @eduType VARCHAR(255),
    @faculty VARCHAR(255),
    @course INT
)
    RETURNS @UsersState TABLE
                        (
                            totalAllStudent int,
                            totalComeCount int
                        )
AS
Begin
    DECLARE @allStudent int;
    DECLARE @allCome int;

    if @Year=YEAR(getdate()) and @SortNumber=DATEPART(WEEK, getdate())
        begin
            SELECT TOP 1
                @allStudent = totalAllStudent,
                @allCome = totalComeCount
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount
                          from (SELECT s.id as studentId,
                                       c.id as cardId
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         join Faculty f on g.faculty_id = f.id
                                         join EducationType et on g.educationType_id = et.id
                                         JOIN Student s ON g.id = s.group_id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @SortNumber
                                  AND et.name = @eduType
                                  AND f.shortName = @faculty
                                  AND g.level = @course
                                  AND c.day !> DATEPART(WEEKDAY , getdate())-1
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id) as f
                                   LEFT JOIN (SELECT COUNT(cardDB_id) AS comeCount,
                                                     cardDB_id
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id
                                                    FROM CardDbStatistics cs
                                                             join users u2 on u2.RFID = cs.rfid
                                                             join Student s2 on u2.id = s2.user_id
                                                             JOIN groups g2 ON g2.id = s2.group_id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                             join EducationType et2 on g2.educationType_id = et2.id
                                                        AND et2.name = @eduType
                                                        AND f2.shortName = @faculty
                                                        AND g2.level = @course
                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id) AS f
                                              GROUP BY f.cardDB_id) cs ON cs.cardDB_id = f.cardId
                          group by f.cardId, cs.comeCount) as d
                 ) as f1;
        end
    else
        begin
            SELECT TOP 1
                @allStudent = totalAllStudent,
                @allCome = totalComeCount
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount
                          from (SELECT s.id as studentId,
                                       c.id as cardId
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         join Faculty f on g.faculty_id = f.id
                                         join EducationType et on g.educationType_id = et.id
                                         JOIN Student s ON g.id = s.group_id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @SortNumber
                                  AND et.name = @eduType
                                  AND f.shortName = @faculty
                                  AND g.level = @course
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id) as f
                                   LEFT JOIN (SELECT COUNT(cardDB_id) AS comeCount,
                                                     cardDB_id
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id
                                                    FROM CardDbStatistics cs
                                                             join users u2 on u2.RFID = cs.rfid
                                                             join Student s2 on u2.id = s2.user_id
                                                             JOIN groups g2 ON g2.id = s2.group_id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                             join EducationType et2 on g2.educationType_id = et2.id
                                                        AND et2.name = @eduType
                                                        AND f2.shortName = @faculty
                                                        AND g2.level = @course
                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id) AS f
                                              GROUP BY f.cardDB_id) cs ON cs.cardDB_id = f.cardId
                          group by f.cardId, cs.comeCount) as d
                 ) as f2;
        end

    insert into @UsersState (totalAllStudent, totalComeCount)
    select @allStudent,@allCome;
    RETURN;
end
go





CREATE FUNCTION dbo.GetTotalClassroomAttendanceWithWeekByEduTypeAndFaculty
(
    @Year INT,
    @SortNumber INT,
    @eduType VARCHAR(255),
    @faculty VARCHAR(255)
)
    RETURNS @UsersState TABLE
                        (
                            totalAllStudent int,
                            totalComeCount int
                        )
AS
Begin
    DECLARE @allStudent int;
    DECLARE @allCome int;

    if @Year=YEAR(getdate()) and @SortNumber=DATEPART(WEEK, getdate())
        begin
            SELECT TOP 1
                @allStudent = totalAllStudent,
                @allCome = totalComeCount
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount
                          from (SELECT s.id as studentId,
                                       c.id as cardId
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         join Faculty f on g.faculty_id = f.id
                                         join EducationType et on g.educationType_id = et.id
                                         JOIN Student s ON g.id = s.group_id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @SortNumber
                                  AND c.day !> DATEPART(WEEKDAY , getdate())-1
                                  AND et.name = @eduType
                                  AND f.shortName = @faculty
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id) as f
                                   LEFT JOIN (SELECT COUNT(cardDB_id) AS comeCount,
                                                     cardDB_id
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id
                                                    FROM CardDbStatistics cs
                                                             join users u2 on u2.RFID = cs.rfid
                                                             join Student s2 on u2.id = s2.user_id
                                                             JOIN groups g2 ON g2.id = s2.group_id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                             join EducationType et2 on g2.educationType_id = et2.id
                                                        AND f2.shortName = @faculty
                                                        AND et2.name = @eduType
                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id) AS f
                                              GROUP BY f.cardDB_id) cs ON cs.cardDB_id = f.cardId
                          group by f.cardId, cs.comeCount) as d
                 ) as f1;
        end
    else
        begin
            SELECT TOP 1
                @allStudent = totalAllStudent,
                @allCome = totalComeCount
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount
                          from (SELECT s.id as studentId,
                                       c.id as cardId
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         join Faculty f on g.faculty_id = f.id
                                         join EducationType et on g.educationType_id = et.id
                                         JOIN Student s ON g.id = s.group_id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @SortNumber
                                  AND et.name = @eduType
                                  AND f.shortName = @faculty
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id) as f
                                   LEFT JOIN (SELECT COUNT(cardDB_id) AS comeCount,
                                                     cardDB_id
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id
                                                    FROM CardDbStatistics cs
                                                             join users u2 on u2.RFID = cs.rfid
                                                             join Student s2 on u2.id = s2.user_id
                                                             JOIN groups g2 ON g2.id = s2.group_id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                             join EducationType et2 on g2.educationType_id = et2.id
                                                        AND f2.shortName = @faculty
                                                        AND et2.name = @eduType
                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id) AS f
                                              GROUP BY f.cardDB_id) cs ON cs.cardDB_id = f.cardId
                          group by f.cardId, cs.comeCount) as d
                 ) as f2;
        end

    insert into @UsersState (totalAllStudent, totalComeCount)
    select @allStudent,@allCome;
    RETURN;
end
go







CREATE FUNCTION dbo.GetTotalClassroomAttendanceWithWeekByEduType
(
    @Year INT,
    @SortNumber INT,
    @eduType VARCHAR(255)
)
    RETURNS @UsersState TABLE
                        (
                            totalAllStudent int,
                            totalComeCount int
                        )
AS
Begin
    DECLARE @allStudent int;
    DECLARE @allCome int;

    if @Year=YEAR(getdate()) and @SortNumber=DATEPART(WEEK, getdate())
        begin
            SELECT TOP 1
                @allStudent = totalAllStudent,
                @allCome = totalComeCount
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount
                          from (SELECT s.id as studentId,
                                       c.id as cardId
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         join EducationType et on g.educationType_id = et.id
                                         JOIN Student s ON g.id = s.group_id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @SortNumber
                                  AND c.day !> DATEPART(WEEKDAY , getdate())-1
                                  AND et.name = @eduType
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id) as f
                                   LEFT JOIN (SELECT COUNT(cardDB_id) AS comeCount,
                                                     cardDB_id
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id
                                                    FROM CardDbStatistics cs
                                                             join users u2 on u2.RFID = cs.rfid
                                                             join Student s2 on u2.id = s2.user_id
                                                             JOIN groups g2 ON g2.id = s2.group_id
                                                             join EducationType et2 on g2.educationType_id = et2.id
                                                        AND et2.name = @eduType
                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id) AS f
                                              GROUP BY f.cardDB_id) cs ON cs.cardDB_id = f.cardId
                          group by f.cardId, cs.comeCount) as d
                 ) as f1;
        end
    else
        begin
            SELECT TOP 1
                @allStudent = totalAllStudent,
                @allCome = totalComeCount
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount
                          from (SELECT s.id as studentId,
                                       c.id as cardId
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         join EducationType et on g.educationType_id = et.id
                                         JOIN Student s ON g.id = s.group_id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @SortNumber
                                  AND et.name = @eduType
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id) as f
                                   LEFT JOIN (SELECT COUNT(cardDB_id) AS comeCount,
                                                     cardDB_id
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id
                                                    FROM CardDbStatistics cs
                                                             join users u2 on u2.RFID = cs.rfid
                                                             join Student s2 on u2.id = s2.user_id
                                                             JOIN groups g2 ON g2.id = s2.group_id
                                                             join EducationType et2 on g2.educationType_id = et2.id
                                                        AND et2.name = @eduType
                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id) AS f
                                              GROUP BY f.cardDB_id) cs ON cs.cardDB_id = f.cardId
                          group by f.cardId, cs.comeCount) as d
                 ) as f2;
        end

    insert into @UsersState (totalAllStudent, totalComeCount)
    select @allStudent,@allCome;
    RETURN;
end
go






CREATE FUNCTION dbo.GetTotalClassroomAttendanceWithWeek
(
    @Year INT,
    @SortNumber INT
)
    RETURNS @UsersState TABLE
                        (
                            totalAllStudent int,
                            totalComeCount int
                        )
AS
Begin
    DECLARE @allStudent int;
    DECLARE @allCome int;

    if @Year=YEAR(getdate()) and @SortNumber=DATEPART(WEEK, getdate())
        begin
            SELECT TOP 1
                @allStudent = totalAllStudent,
                @allCome = totalComeCount
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount
                          from (SELECT s.id as studentId,
                                       c.id as cardId
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         JOIN Student s ON g.id = s.group_id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @SortNumber
                                  AND c.day !> DATEPART(WEEKDAY , getdate())-1
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id) as f
                                   LEFT JOIN (SELECT COUNT(cardDB_id) AS comeCount,
                                                     cardDB_id
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id
                                                    FROM CardDbStatistics cs
                                                             join users u2 on u2.RFID = cs.rfid
                                                             join Student s2 on u2.id = s2.user_id
                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id) AS f
                                              GROUP BY f.cardDB_id) cs ON cs.cardDB_id = f.cardId
                          group by f.cardId, cs.comeCount) as d
                  ) as f1;
        end
    else
        begin
            SELECT TOP 1
                @allStudent = totalAllStudent,
                @allCome = totalComeCount
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount
                          from (SELECT s.id as studentId,
                                       c.id as cardId
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         JOIN Student s ON g.id = s.group_id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @SortNumber
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id) as f
                                   LEFT JOIN (SELECT COUNT(cardDB_id) AS comeCount,
                                                     cardDB_id
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id
                                                    FROM CardDbStatistics cs
                                                             join users u2 on u2.RFID = cs.rfid
                                                             join Student s2 on u2.id = s2.user_id
                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id) AS f
                                              GROUP BY f.cardDB_id) cs ON cs.cardDB_id = f.cardId
                          group by f.cardId, cs.comeCount) as d
                  ) as f2;
        end

    insert into @UsersState (totalAllStudent, totalComeCount)
    select @allStudent,@allCome;
    RETURN;
end
go




//todo-------------------------------------------------


CREATE FUNCTION dbo.GetTotalClassroomAttendance
(
    @Year INT,
    @SortNumber INT,
    @Day VARCHAR(50)
)
    RETURNS @UsersState TABLE
                        (
                            totalAllStudent int,
                            totalComeCount int
                        )
        AS
    Begin
        DECLARE @allStudent int;
        DECLARE @allCome int;

        if @Year=YEAR(getdate()) and @SortNumber=DATEPART(WEEK, getdate()) and @Day=DATEPART(WEEKDAY , getdate())-1
            begin
            SELECT TOP 1
                @allStudent = totalAllStudent,
                @allCome = totalComeCount
            FROM (SELECT
                      SUM(COUNT(s.id)) OVER() AS totalAllStudent,   -- Sum of all students
                      SUM(ISNULL(cs.comeCount, 0)) OVER() AS totalComeCount  -- Sum of comeCount, replacing NULL with 0
                  FROM
                      CardDB c
                          JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                          JOIN LessonDB ld ON c.lesson_id = ld.id
                          JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                          JOIN groups g ON lg.groups_id = g.id
                          JOIN Student s ON g.id = s.group_id
                          LEFT OUTER JOIN (
                          SELECT
                              COUNT(cardDB_id) AS comeCount,
                              cardDB_id
                          FROM
                              (
                                  SELECT
                                      COUNT(rfid) AS rfid,
                                      cardDB_id
                                  FROM
                                      CardDbStatistics cs
                                  GROUP BY
                                      rfid,
                                      cardDB_id
                              ) AS f
                          GROUP BY
                              cardDB_id
                      ) cs ON cs.cardDB_id = c.id
                  WHERE
                      wy.year = @Year
                    AND wy.sortNumber = @SortNumber
                    AND c.day = @Day
                    AND c.period !> DATEPART(Hour , getdate())-8
                    AND c.classroom IS NOT NULL
                  GROUP BY
                      cs.comeCount) as f1;
            end
        else
            begin
            SELECT TOP 1
                @allStudent = totalAllStudent,
                @allCome = totalComeCount
            FROM (SELECT
                SUM(COUNT(s.id)) OVER() AS totalAllStudent,   -- Sum of all students
                SUM(ISNULL(cs.comeCount, 0)) OVER() AS totalComeCount  -- Sum of comeCount, replacing NULL with 0
            FROM
            CardDB c
              JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
              JOIN LessonDB ld ON c.lesson_id = ld.id
              JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
              JOIN groups g ON lg.groups_id = g.id
              JOIN Student s ON g.id = s.group_id
              LEFT OUTER JOIN (
              SELECT
                  COUNT(cardDB_id) AS comeCount,
                  cardDB_id
              FROM
                  (
                      SELECT
                          COUNT(rfid) AS rfid,
                          cardDB_id
                      FROM
                          CardDbStatistics cs
                      GROUP BY
                          rfid,
                          cardDB_id
                  ) AS f
                  GROUP BY
                  cardDB_id
                ) cs ON cs.cardDB_id = c.id
                 WHERE
                     wy.year = @Year
                    AND wy.sortNumber = @SortNumber
                     AND c.day = @Day
                     AND c.classroom IS NOT NULL
                GROUP BY
                  cs.comeCount) as f2;
            end

        insert into @UsersState (totalAllStudent, totalComeCount)
        select @allStudent,@allCome;
        RETURN;
    end

go


CREATE FUNCTION dbo.GetTotalClassroomAttendanceByEduTypeAndCourse
(
    @Year INT,
    @SortNumber INT,
    @Day VARCHAR(50),
    @eduType VARCHAR(255),
    @course INT
)
    RETURNS @UsersState TABLE
                        (
                            totalAllStudent int,
                            totalComeCount int
                        )
        AS
    Begin
        DECLARE @allStudent int;
        DECLARE @allCome int;

        if @Year=YEAR(getdate()) and @SortNumber=DATEPART(WEEK, getdate()) and @Day=DATEPART(WEEKDAY , getdate())-1
            begin
            SELECT TOP 1
                @allStudent = totalAllStudent,
                @allCome = totalComeCount
            FROM (
                     SELECT
                         SUM(COUNT(s.id)) OVER() AS totalAllStudent,   -- Sum of all students
                         SUM(ISNULL(cs.comeCount, 0)) OVER() AS totalComeCount  -- Sum of comeCount, replacing NULL with 0
                     FROM
                         CardDB c
                             JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                             JOIN LessonDB ld ON c.lesson_id = ld.id
                             JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                             JOIN groups g ON lg.groups_id = g.id
                             join EducationType et on g.educationType_id = et.id
                             JOIN Student s ON g.id = s.group_id
                             LEFT OUTER JOIN (
                             SELECT
                                 COUNT(cardDB_id) AS comeCount,
                                 cardDB_id
                             FROM
                                 (
                                     SELECT
                                         COUNT(rfid) AS rfid,
                                         cardDB_id
                                     FROM
                                         CardDbStatistics cs
                                     GROUP BY
                                         rfid,
                                         cardDB_id
                                 ) AS f
                             GROUP BY
                                 cardDB_id
                         ) cs ON cs.cardDB_id = c.id
                     WHERE
                         wy.year = @Year
                       AND wy.sortNumber = @SortNumber
                       AND c.day = @Day
                       AND et.name = @eduType
                       AND g.level = @course
                       AND c.period !> DATEPART(Hour , getdate())-8
                       AND c.classroom IS NOT NULL
                     GROUP BY
                         cs.comeCount
                 ) as f1;
            end
        else
            begin
            SELECT TOP 1
                @allStudent = totalAllStudent,
                @allCome = totalComeCount
            FROM (
                     SELECT
                         SUM(COUNT(s.id)) OVER() AS totalAllStudent,   -- Sum of all students
                         SUM(ISNULL(cs.comeCount, 0)) OVER() AS totalComeCount  -- Sum of comeCount, replacing NULL with 0
                     FROM
                         CardDB c
                             JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                             JOIN LessonDB ld ON c.lesson_id = ld.id
                             JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                             JOIN groups g ON lg.groups_id = g.id
                             join EducationType et on g.educationType_id = et.id
                             JOIN Student s ON g.id = s.group_id
                             LEFT OUTER JOIN (
                             SELECT
                                 COUNT(cardDB_id) AS comeCount,
                                 cardDB_id
                             FROM
                                 (
                                     SELECT
                                         COUNT(rfid) AS rfid,
                                         cardDB_id
                                     FROM
                                         CardDbStatistics cs
                                     GROUP BY
                                         rfid,
                                         cardDB_id
                                 ) AS f
                             GROUP BY
                                 cardDB_id
                         ) cs ON cs.cardDB_id = c.id
                     WHERE
                         wy.year = @Year
                       AND wy.sortNumber = @SortNumber
                       AND c.day = @Day
                       AND et.name = @eduType
                       AND g.level = @course
                       AND c.classroom IS NOT NULL
                     GROUP BY
                         cs.comeCount
                 ) as f2;
            end

        insert into @UsersState (totalAllStudent, totalComeCount)
        select @allStudent,@allCome;
        RETURN;
    end






CREATE FUNCTION dbo.GetTotalClassroomAttendanceByFacultyAndCourse
(
    @Year INT,
    @SortNumber INT,
    @Day VARCHAR(50),
    @faculty VARCHAR(255),
    @course INT
)
    RETURNS @UsersState TABLE
                        (
                            totalAllStudent int,
                            totalComeCount int
                        )
        AS
    Begin
        DECLARE @allStudent int;
        DECLARE @allCome int;

        if @Year=YEAR(getdate()) and @SortNumber=DATEPART(WEEK, getdate()) and @Day=DATEPART(WEEKDAY , getdate())-1
            begin
            SELECT TOP 1
                @allStudent = totalAllStudent,
                @allCome = totalComeCount
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount
                          from (SELECT s.id as studentId,
                                       c.id as cardId
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         join Faculty f on g.faculty_id = f.id
                                         JOIN Student s ON g.id = s.group_id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @SortNumber
                                  AND c.day = @Day
                                  AND f.shortName = @faculty
                                  AND g.level = @course
                                  AND c.period !> DATEPART(Hour, getdate()) - 8
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id) as f
                                   LEFT JOIN (SELECT COUNT(cardDB_id) AS comeCount,
                                                     cardDB_id
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id
                                                    FROM CardDbStatistics cs
                                                             join users u2 on u2.RFID = cs.rfid
                                                             join Student s2 on u2.id = s2.user_id
                                                             JOIN groups g2 ON g2.id = s2.group_id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                        AND f2.shortName = @faculty
                                                        AND g2.level = @course
                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id) AS f
                                              GROUP BY f.cardDB_id) cs ON cs.cardDB_id = f.cardId
                          group by f.cardId, cs.comeCount) as d
                 ) as f1;
            end
        else
            begin
            SELECT TOP 1
                @allStudent = totalAllStudent,
                @allCome = totalComeCount
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount
                          from (SELECT s.id as studentId,
                                       c.id as cardId
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         join Faculty f on g.faculty_id = f.id
                                         JOIN Student s ON g.id = s.group_id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @SortNumber
                                  AND c.day = @Day
                                  AND f.shortName = @faculty
                                  AND g.level = @course
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id) as f
                                   LEFT JOIN (SELECT COUNT(cardDB_id) AS comeCount,
                                                     cardDB_id
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id
                                                    FROM CardDbStatistics cs
                                                             join users u2 on u2.RFID = cs.rfid
                                                             join Student s2 on u2.id = s2.user_id
                                                             JOIN groups g2 ON g2.id = s2.group_id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                        AND f2.shortName = @faculty
                                                        AND g2.level = @course
                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id) AS f
                                              GROUP BY f.cardDB_id) cs ON cs.cardDB_id = f.cardId
                          group by f.cardId, cs.comeCount) as d
                 ) as f2;
            end

        insert into @UsersState (totalAllStudent, totalComeCount)
        select @allStudent,@allCome;
        RETURN;
    end
go



CREATE FUNCTION dbo.GetTotalClassroomAttendanceByFaculty
(
    @Year INT,
    @SortNumber INT,
    @Day VARCHAR(50),
    @faculty VARCHAR(255)
)
    RETURNS @UsersState TABLE
                        (
                            totalAllStudent int,
                            totalComeCount int
                        )
        AS
    Begin
        DECLARE @allStudent int;
        DECLARE @allCome int;

        if @Year=YEAR(getdate()) and @SortNumber=DATEPART(WEEK, getdate()) and @Day=DATEPART(WEEKDAY , getdate())-1
            begin
            SELECT TOP 1
                @allStudent = totalAllStudent,
                @allCome = totalComeCount
            FROM (
                     SELECT
                         SUM(COUNT(s.id)) OVER() AS totalAllStudent,   -- Sum of all students
                         SUM(ISNULL(cs.comeCount, 0)) OVER() AS totalComeCount  -- Sum of comeCount, replacing NULL with 0
                     FROM
                         CardDB c
                             JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                             JOIN LessonDB ld ON c.lesson_id = ld.id
                             JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                             JOIN groups g ON lg.groups_id = g.id
                             join Faculty f on g.faculty_id = f.id
                             JOIN Student s ON g.id = s.group_id
                             LEFT OUTER JOIN (
                             SELECT
                                 COUNT(cardDB_id) AS comeCount,
                                 cardDB_id
                             FROM
                                 (
                                     SELECT
                                         COUNT(rfid) AS rfid,
                                         cardDB_id
                                     FROM
                                         CardDbStatistics cs
                                     GROUP BY
                                         rfid,
                                         cardDB_id
                                 ) AS f
                             GROUP BY
                                 cardDB_id
                         ) cs ON cs.cardDB_id = c.id
                     WHERE
                         wy.year = @Year
                       AND wy.sortNumber = @SortNumber
                       AND c.day = @Day
                       AND f.shortName = @faculty
                       AND c.period !> DATEPART(Hour , getdate())-8
                       AND c.classroom IS NOT NULL
                     GROUP BY
                         cs.comeCount
                 ) as f1;
            end
        else
            begin
            SELECT TOP 1
                @allStudent = totalAllStudent,
                @allCome = totalComeCount
            FROM (
                     SELECT
                         SUM(COUNT(s.id)) OVER() AS totalAllStudent,   -- Sum of all students
                         SUM(ISNULL(cs.comeCount, 0)) OVER() AS totalComeCount  -- Sum of comeCount, replacing NULL with 0
                     FROM
                         CardDB c
                             JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                             JOIN LessonDB ld ON c.lesson_id = ld.id
                             JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                             JOIN groups g ON lg.groups_id = g.id
                             join Faculty f on g.faculty_id = f.id
                             JOIN Student s ON g.id = s.group_id
                             LEFT OUTER JOIN (
                             SELECT
                                 COUNT(cardDB_id) AS comeCount,
                                 cardDB_id
                             FROM
                                 (
                                     SELECT
                                         COUNT(rfid) AS rfid,
                                         cardDB_id
                                     FROM
                                         CardDbStatistics cs
                                     GROUP BY
                                         rfid,
                                         cardDB_id
                                 ) AS f
                             GROUP BY
                                 cardDB_id
                         ) cs ON cs.cardDB_id = c.id
                     WHERE
                         wy.year = @Year
                       AND wy.sortNumber = @SortNumber
                       AND c.day = @Day
                       AND f.shortName = @faculty
                       AND c.classroom IS NOT NULL
                     GROUP BY
                         cs.comeCount
                 ) as f2;
            end

        insert into @UsersState (totalAllStudent, totalComeCount)
        select @allStudent,@allCome;
        RETURN;
    end





CREATE FUNCTION dbo.GetTotalClassroomAttendanceByCourse
(
    @Year INT,
    @SortNumber INT,
    @Day VARCHAR(50),
    @course INT
)
    RETURNS @UsersState TABLE
                        (
                            totalAllStudent int,
                            totalComeCount int
                        )
        AS
    Begin
        DECLARE @allStudent int;
        DECLARE @allCome int;

        if @Year=YEAR(getdate()) and @SortNumber=DATEPART(WEEK, getdate()) and @Day=DATEPART(WEEKDAY , getdate())-1
            begin
            SELECT TOP 1
                @allStudent = totalAllStudent,
                @allCome = totalComeCount
            FROM (
                     SELECT
                         SUM(COUNT(s.id)) OVER() AS totalAllStudent,   -- Sum of all students
                         SUM(ISNULL(cs.comeCount, 0)) OVER() AS totalComeCount  -- Sum of comeCount, replacing NULL with 0
                     FROM
                         CardDB c
                             JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                             JOIN LessonDB ld ON c.lesson_id = ld.id
                             JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                             JOIN groups g ON lg.groups_id = g.id
                             JOIN Student s ON g.id = s.group_id
                             LEFT OUTER JOIN (
                             SELECT
                                 COUNT(cardDB_id) AS comeCount,
                                 cardDB_id
                             FROM
                                 (
                                     SELECT
                                         COUNT(rfid) AS rfid,
                                         cardDB_id
                                     FROM
                                         CardDbStatistics cs
                                     GROUP BY
                                         rfid,
                                         cardDB_id
                                 ) AS f
                             GROUP BY
                                 cardDB_id
                         ) cs ON cs.cardDB_id = c.id
                     WHERE
                         wy.year = @Year
                       AND wy.sortNumber = @SortNumber
                       AND c.day = @Day
                       AND g.level = @course
                       AND c.period !> DATEPART(Hour , getdate())-8
                       AND c.classroom IS NOT NULL
                     GROUP BY
                         cs.comeCount
                 ) as f1;
            end
        else
            begin
            SELECT TOP 1
                @allStudent = totalAllStudent,
                @allCome = totalComeCount
            FROM (
                     SELECT
                         SUM(COUNT(s.id)) OVER() AS totalAllStudent,   -- Sum of all students
                         SUM(ISNULL(cs.comeCount, 0)) OVER() AS totalComeCount  -- Sum of comeCount, replacing NULL with 0
                     FROM
                         CardDB c
                             JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                             JOIN LessonDB ld ON c.lesson_id = ld.id
                             JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                             JOIN groups g ON lg.groups_id = g.id
                             JOIN Student s ON g.id = s.group_id
                             LEFT OUTER JOIN (
                             SELECT
                                 COUNT(cardDB_id) AS comeCount,
                                 cardDB_id
                             FROM
                                 (
                                     SELECT
                                         COUNT(rfid) AS rfid,
                                         cardDB_id
                                     FROM
                                         CardDbStatistics cs
                                     GROUP BY
                                         rfid,
                                         cardDB_id
                                 ) AS f
                             GROUP BY
                                 cardDB_id
                         ) cs ON cs.cardDB_id = c.id
                     WHERE
                         wy.year = @Year
                       AND wy.sortNumber = @SortNumber
                       AND c.day = @Day
                       AND g.level = @course
                       AND c.classroom IS NOT NULL
                     GROUP BY
                         cs.comeCount
                 ) as f2;
            end

        insert into @UsersState (totalAllStudent, totalComeCount)
        select @allStudent,@allCome;
        RETURN;
    end

go







CREATE FUNCTION dbo.GetTotalClassroomAttendanceByEduTypeAndFacultyAndCourse
(
    @Year INT,
    @SortNumber INT,
    @Day VARCHAR(50),
    @eduType VARCHAR(255),
    @faculty VARCHAR(255),
    @course INT
)
    RETURNS @UsersState TABLE
                        (
                            totalAllStudent int,
                            totalComeCount int
                        )
        AS
    Begin
        DECLARE @allStudent int;
        DECLARE @allCome int;

        if @Year=YEAR(getdate()) and @SortNumber=DATEPART(WEEK, getdate()) and @Day=DATEPART(WEEKDAY , getdate())-1
            begin
            SELECT TOP 1
                @allStudent = totalAllStudent,
                @allCome = totalComeCount
            FROM (
             select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount from
                  (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount
                    from (SELECT s.id as studentId,
                                 c.id as cardId
                          FROM CardDB c
                                   JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                   JOIN LessonDB ld ON c.lesson_id = ld.id
                                   JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                   JOIN groups g ON lg.groups_id = g.id
                                   join Faculty f on g.faculty_id = f.id
                                   join EducationType et on g.educationType_id = et.id
                                   JOIN Student s ON g.id = s.group_id
                          WHERE wy.year = @Year
                            AND wy.sortNumber = @SortNumber
                            AND c.day = @Day
                            AND et.name = @eduType
                            AND f.shortName = @faculty
                            AND g.level = @course
                            AND c.period !> DATEPART(Hour, getdate()) - 8
                            AND c.classroom IS NOT NULL
                          GROUP BY c.id, s.id) as f
                             LEFT JOIN (SELECT COUNT(cardDB_id) AS comeCount,
                                               cardDB_id
                                        FROM (SELECT cs.rfid,
                                                     cs.cardDB_id
                                              FROM CardDbStatistics cs
                                                       join users u2 on u2.RFID = cs.rfid
                                                       join Student s2 on u2.id = s2.user_id
                                                       JOIN groups g2 ON g2.id = s2.group_id
                                                       join Faculty f2 on g2.faculty_id = f2.id
                                                       join EducationType et2 on g2.educationType_id = et2.id
                                                  AND et2.name = @eduType
                                                  AND f2.shortName = @faculty
                                                  AND g2.level = @course
                                              GROUP BY cs.rfid,
                                                       cs.cardDB_id) AS f
                                        GROUP BY f.cardDB_id) cs ON cs.cardDB_id = f.cardId
                    group by f.cardId, cs.comeCount) as d
                 ) as f1;
            end
        else
            begin
            SELECT TOP 1
                @allStudent = totalAllStudent,
                @allCome = totalComeCount
            FROM (
                     select SUM(allStudent) as totalAllStudent,SUM(comeCount) as totalComeCount from
                         (select count(studentId) as allStudent, cardId, ISNULL(cs.comeCount, 0) as comeCount
                          from (SELECT s.id as studentId,
                                       c.id as cardId
                                FROM CardDB c
                                         JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                                         JOIN LessonDB ld ON c.lesson_id = ld.id
                                         JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                                         JOIN groups g ON lg.groups_id = g.id
                                         join Faculty f on g.faculty_id = f.id
                                         join EducationType et on g.educationType_id = et.id
                                         JOIN Student s ON g.id = s.group_id
                                WHERE wy.year = @Year
                                  AND wy.sortNumber = @SortNumber
                                  AND c.day = @Day
                                  AND et.name = @eduType
                                  AND f.shortName = @faculty
                                  AND g.level = @course
                                  AND c.classroom IS NOT NULL
                                GROUP BY c.id, s.id) as f
                                   LEFT JOIN (SELECT COUNT(cardDB_id) AS comeCount,
                                                     cardDB_id
                                              FROM (SELECT cs.rfid,
                                                           cs.cardDB_id
                                                    FROM CardDbStatistics cs
                                                             join users u2 on u2.RFID = cs.rfid
                                                             join Student s2 on u2.id = s2.user_id
                                                             JOIN groups g2 ON g2.id = s2.group_id
                                                             join Faculty f2 on g2.faculty_id = f2.id
                                                             join EducationType et2 on g2.educationType_id = et2.id
                                                        AND et2.name = @eduType
                                                        AND f2.shortName = @faculty
                                                        AND g2.level = @course
                                                    GROUP BY cs.rfid,
                                                             cs.cardDB_id) AS f
                                              GROUP BY f.cardDB_id) cs ON cs.cardDB_id = f.cardId
                          group by f.cardId, cs.comeCount) as d
                 ) as f2;
            end

        insert into @UsersState (totalAllStudent, totalComeCount)
        select @allStudent,@allCome;
        RETURN;
    end
go







CREATE FUNCTION dbo.GetTotalClassroomAttendanceByEduTypeAndFaculty
(
    @Year INT,
    @SortNumber INT,
    @Day VARCHAR(50),
    @eduType VARCHAR(255),
    @faculty VARCHAR(255)
)
    RETURNS @UsersState TABLE
                        (
                            totalAllStudent int,
                            totalComeCount int
                        )
        AS
    Begin
        DECLARE @allStudent int;
        DECLARE @allCome int;

        if @Year=YEAR(getdate()) and @SortNumber=DATEPART(WEEK, getdate()) and @Day=DATEPART(WEEKDAY , getdate())-1
            begin
            SELECT TOP 1
                @allStudent = totalAllStudent,
                @allCome = totalComeCount
            FROM (
                     SELECT
                         SUM(COUNT(s.id)) OVER() AS totalAllStudent,   -- Sum of all students
                         SUM(ISNULL(cs.comeCount, 0)) OVER() AS totalComeCount  -- Sum of comeCount, replacing NULL with 0
                     FROM
                         CardDB c
                             JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                             JOIN LessonDB ld ON c.lesson_id = ld.id
                             JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                             JOIN groups g ON lg.groups_id = g.id
                             join Faculty f on g.faculty_id = f.id
                             join EducationType et on g.educationType_id = et.id
                             JOIN Student s ON g.id = s.group_id
                             LEFT OUTER JOIN (
                             SELECT
                                 COUNT(cardDB_id) AS comeCount,
                                 cardDB_id
                             FROM
                                 (
                                     SELECT
                                         COUNT(rfid) AS rfid,
                                         cardDB_id
                                     FROM
                                         CardDbStatistics cs
                                     GROUP BY
                                         rfid,
                                         cardDB_id
                                 ) AS f
                             GROUP BY
                                 cardDB_id
                         ) cs ON cs.cardDB_id = c.id
                     WHERE
                         wy.year = @Year
                       AND wy.sortNumber = @SortNumber
                       AND c.day = @Day
                       AND et.name = @eduType
                       AND f.shortName = @faculty
                       AND c.period !> DATEPART(Hour , getdate())-8
                       AND c.classroom IS NOT NULL
                     GROUP BY
                         cs.comeCount
                 ) as f1;
            end
        else
            begin
            SELECT TOP 1
                @allStudent = totalAllStudent,
                @allCome = totalComeCount
            FROM (
                     SELECT
                         SUM(COUNT(s.id)) OVER() AS totalAllStudent,   -- Sum of all students
                         SUM(ISNULL(cs.comeCount, 0)) OVER() AS totalComeCount  -- Sum of comeCount, replacing NULL with 0
                     FROM
                         CardDB c
                             JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                             JOIN LessonDB ld ON c.lesson_id = ld.id
                             JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                             JOIN groups g ON lg.groups_id = g.id
                             join Faculty f on g.faculty_id = f.id
                             join EducationType et on g.educationType_id = et.id
                             JOIN Student s ON g.id = s.group_id
                             LEFT OUTER JOIN (
                             SELECT
                                 COUNT(cardDB_id) AS comeCount,
                                 cardDB_id
                             FROM
                                 (
                                     SELECT
                                         COUNT(rfid) AS rfid,
                                         cardDB_id
                                     FROM
                                         CardDbStatistics cs
                                     GROUP BY
                                         rfid,
                                         cardDB_id
                                 ) AS f
                             GROUP BY
                                 cardDB_id
                         ) cs ON cs.cardDB_id = c.id
                     WHERE
                         wy.year = @Year
                       AND wy.sortNumber = @SortNumber
                       AND c.day = @Day
                       AND et.name = @eduType
                       AND f.shortName = @faculty
                       AND c.classroom IS NOT NULL
                     GROUP BY
                         cs.comeCount
                 ) as f2;
            end

        insert into @UsersState (totalAllStudent, totalComeCount)
        select @allStudent,@allCome;
        RETURN;
    end





CREATE FUNCTION dbo.GetTotalClassroomAttendanceByEduType
(
    @Year INT,
    @SortNumber INT,
    @Day VARCHAR(50),
    @eduType VARCHAR(255)
)
    RETURNS @UsersState TABLE
                        (
                            totalAllStudent int,
                            totalComeCount int
                        )
        AS
    Begin
        DECLARE @allStudent int;
        DECLARE @allCome int;

        if @Year=YEAR(getdate()) and @SortNumber=DATEPART(WEEK, getdate()) and @Day=DATEPART(WEEKDAY , getdate())-1
            begin
            SELECT TOP 1
                @allStudent = totalAllStudent,
                @allCome = totalComeCount
            FROM (
                     SELECT
                         SUM(COUNT(s.id)) OVER() AS totalAllStudent,   -- Sum of all students
                         SUM(ISNULL(cs.comeCount, 0)) OVER() AS totalComeCount  -- Sum of comeCount, replacing NULL with 0
                     FROM
                         CardDB c
                             JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                             JOIN LessonDB ld ON c.lesson_id = ld.id
                             JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                             JOIN groups g ON lg.groups_id = g.id
                             join EducationType et on g.educationType_id = et.id
                             JOIN Student s ON g.id = s.group_id
                             LEFT OUTER JOIN (
                             SELECT
                                 COUNT(cardDB_id) AS comeCount,
                                 cardDB_id
                             FROM
                                 (
                                     SELECT
                                         COUNT(rfid) AS rfid,
                                         cardDB_id
                                     FROM
                                         CardDbStatistics cs
                                     GROUP BY
                                         rfid,
                                         cardDB_id
                                 ) AS f
                             GROUP BY
                                 cardDB_id
                         ) cs ON cs.cardDB_id = c.id
                     WHERE
                         wy.year = @Year
                       AND wy.sortNumber = @SortNumber
                       AND c.day = @Day
                       AND et.name = @eduType
                       AND c.period !> DATEPART(Hour , getdate())-8
                       AND c.classroom IS NOT NULL
                     GROUP BY
                         cs.comeCount
                 ) as f1;
            end
        else
            begin
            SELECT TOP 1
                @allStudent = totalAllStudent,
                @allCome = totalComeCount
            FROM (
                     SELECT
                         SUM(COUNT(s.id)) OVER() AS totalAllStudent,   -- Sum of all students
                         SUM(ISNULL(cs.comeCount, 0)) OVER() AS totalComeCount  -- Sum of comeCount, replacing NULL with 0
                     FROM
                         CardDB c
                             JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                             JOIN LessonDB ld ON c.lesson_id = ld.id
                             JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                             JOIN groups g ON lg.groups_id = g.id
                             join EducationType et on g.educationType_id = et.id
                             JOIN Student s ON g.id = s.group_id
                             LEFT OUTER JOIN (
                             SELECT
                                 COUNT(cardDB_id) AS comeCount,
                                 cardDB_id
                             FROM
                                 (
                                     SELECT
                                         COUNT(rfid) AS rfid,
                                         cardDB_id
                                     FROM
                                         CardDbStatistics cs
                                     GROUP BY
                                         rfid,
                                         cardDB_id
                                 ) AS f
                             GROUP BY
                                 cardDB_id
                         ) cs ON cs.cardDB_id = c.id
                     WHERE
                         wy.year = @Year
                       AND wy.sortNumber = @SortNumber
                       AND c.day = @Day
                       AND et.name = @eduType
                       AND c.classroom IS NOT NULL
                     GROUP BY
                         cs.comeCount
                 ) as f2;
            end

        insert into @UsersState (totalAllStudent, totalComeCount)
        select @allStudent,@allCome;
        RETURN;
    end





CREATE FUNCTION dbo.GetClassroomAttendance
(
    @Year INT,
    @SortNumber INT,
    @Day VARCHAR(50)
)
    RETURNS TABLE
        AS
        RETURN
        (
        SELECT
            c.classroom,
            c.period,
            COUNT(s.id) AS allStudent,
            ISNULL(cs.comeCount, 0) AS comeCount
        FROM
            CardDB c
                JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
                JOIN LessonDB ld ON c.lesson_id = ld.id
                JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
                JOIN groups g ON lg.groups_id = g.id
                JOIN Student s ON g.id = s.group_id
                LEFT OUTER JOIN (
                SELECT
                    COUNT(cardDB_id) AS comeCount,
                    cardDB_id
                FROM
                    (
                        SELECT
                            COUNT(rfid) AS rfid,
                            cardDB_id
                        FROM
                            CardDbStatistics cs
                        GROUP BY
                            rfid,
                            cardDB_id
                    ) AS f
                GROUP BY
                    cardDB_id
            ) cs ON cs.cardDB_id = c.id
        WHERE
            wy.year = @Year
          AND wy.sortNumber = @SortNumber
          AND c.day = @Day
          AND c.classroom IS NOT NULL
        GROUP BY
            c.classroom,
            c.period,
            cs.comeCount
        );






CREATE FUNCTION dbo.myTestCounter(
    @year varchar(255),
    @week varchar(255),
    @day varchar(255)
) RETURNS @UserStats TABLE
                     (
                         groupId varchar(255),
                         allStudent int,
                         come1 int
                     )
AS
BEGIN
    DECLARE @allCards TABLE (
                                classroom varchar(255),
                                section int,
                                groupId varchar(255),
                                allStudent int
                            );

    -- Insert into @allCards
    INSERT INTO @allCards
    SELECT
        c.classroom,
        c.period AS section,
        g.id AS groupId,
        COUNT(s.id) AS allStudent
    FROM CardDB c
             JOIN WeekOfEducationYear wy ON c.weekOfEducationYear_id = wy.id
             JOIN LessonDB ld ON c.lesson_id = ld.id
             JOIN LessonDB_groups lg ON ld.id = lg.LessonDB_id
             JOIN groups g ON lg.groups_id = g.id
             JOIN Student s ON g.id = s.group_id
    WHERE wy.year = @year
      AND wy.sortNumber = @week
      AND c.day = @day
      AND c.classroom IS NOT NULL
    GROUP BY g.id, c.classroom, c.period;

    -- Process each row
    DECLARE @countOfAllCards int;
    set @countOfAllCards = (select count(*) from @allCards);

    while 0 < @countOfAllCards
        BEGIN
            DECLARE @classroom varchar(255);
            DECLARE @section int;
            DECLARE @groupId varchar(255);
            DECLARE @allStudent int;
            DECLARE @allCome int;

            -- Get the top 1 row to process
            SELECT TOP 1
                @classroom = classroom,
                @section = section,
                @groupId = groupId,
                @allStudent = allStudent
            FROM @allCards;

            -- Call your function to calculate the number of students who came
            SET @allCome = (SELECT dbo.getCountOfComeStudents(@year, @week, @day, @section, @classroom, @groupId));

            -- Insert the data into @UserStats
            INSERT INTO @UserStats (groupId, allStudent, come1)
            SELECT @groupId, @allStudent, @allCome;

            -- Delete the processed row from @allCards
            DELETE FROM @allCards
            WHERE classroom = @classroom
              AND section = @section
              AND groupId = @groupId;

            set @countOfAllCards = (select count(*) from @allCards);
        END

    RETURN;
END;









CREATE FUNCTION dbo.getCountOfComeStudents(
    @year varchar(255),
    @week varchar(255),
    @day varchar(255),
    @section varchar(255),
    @room varchar(255),
    @groupId varchar(255)
)
    RETURNS FLOAT
AS
BEGIN
    DECLARE @allCount int;

    set @allCount=(select (select count(counter)
                           from (select count(u.id) as counter
                                 from acc_monitor_log al
                                          join acc_door ad on ad.device_id = al.device_id
                                          join users u on cast(u.RFID as varchar) =
                                                          cast(al.card_no as varchar) COLLATE Chinese_PRC_CI_AS
                                          join Student s on u.id = s.user_id
                                 where al.time between DATETIMEFROMPARTS(
                                         DATEPART(YEAR, DATEADD(DAY, + (@day - 1), DATEADD(DAY,
                                                                                         -DATEPART(DW, CAST('1/1/' + cast(@year as varchar) AS Date)) +
                                                                                         2,
                                                                                         DATEADD(WK, @week - 1, CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                         DATEPART(MONTH, DATEADD(DAY, + (@day - 1), DATEADD(DAY,
                                                                                          -DATEPART(DW, CAST('1/1/' + cast(@year as varchar) AS Date)) +
                                                                                          2,
                                                                                          DATEADD(WK, @week - 1, CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                         DATEPART(DAY, DATEADD(DAY, + (@day - 1), DATEADD(DAY,
                                                                                        -DATEPART(DW, CAST('1/1/' + cast(@year as varchar) AS Date)) +
                                                                                        2,
                                                                                        DATEADD(WK, @week - 1, CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                         8 + @section - 1,
                                         50,
                                         00,
                                         0) and
                                     DATETIMEFROMPARTS(
                                             DATEPART(YEAR, DATEADD(DAY, + (@day - 1), DATEADD(DAY,
                                                                                             -DATEPART(DW, CAST('1/1/' + cast(@year as varchar) AS Date)) +
                                                                                             2,
                                                                                             DATEADD(WK, @week - 1, CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                             DATEPART(MONTH, DATEADD(DAY, + (@day - 1), DATEADD(DAY,
                                                                                              -DATEPART(DW, CAST('1/1/' + cast(@year as varchar) AS Date)) +
                                                                                              2,
                                                                                              DATEADD(WK, @week - 1, CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                             DATEPART(DAY, DATEADD(DAY, + (@day - 1), DATEADD(DAY,
                                                                                            -DATEPART(DW, CAST('1/1/' + cast(@year as varchar) AS Date)) +
                                                                                            2,
                                                                                            DATEADD(WK, @week - 1, CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                             8 + @section,
                                             50,
                                             00,
                                             0)
                                   and ad.door_name LIKE @room
                                   and s.group_id = @groupId
                                 group by u.id) as f1)
                              +
                          (
                              select count(counter)
                              from (select count(s2.id) as counter
                                    from DynamicAttendance d
                                             join users u4 on d.student_id = u4.id
                                             join Student s2 on u4.id = s2.user_id
                                    where d.room LIKE @room
                                      and s2.group_id = @groupId
                                      and d.weekday = @day
                                      and d.week = @week
                                      and d.section = @section
                                      and d.year = @year
                                    group by s2.id) as f2))


    RETURN @allCount;
END;



#delete #carddb
DELETE FROM CardDB
WHERE lesson_id IN (
    SELECT id
    FROM LessonDB
    WHERE createdAt BETWEEN '2024-10-14' AND '2024-10-15'
);



CREATE FUNCTION dbo.GetFirstOfEntering2(
    @rfid varchar(255),
    @year varchar(255),
    @week varchar(255),
    @weekday varchar(255)
)
    RETURNS datetime
AS
begin
    RETURN (
        select
            TOP 1 al.time
        from acc_monitor_log al
        where al.time between
            DATETIMEFROMPARTS(
                    DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                    DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                    DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                    5,
                    00,
                    00,
                    0)
            and
            DATETIMEFROMPARTS(
                    DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                    DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                    DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                    23,
                    50,
                    00,
                    0)
          and al.card_no=@rfid
        order by al.time
    )
end;








CREATE FUNCTION dbo.countOfAllStudents(
)
    RETURNS INT
AS
BEGIN

    DECLARE @countStep INT

    set @countStep = (
    SELECT COUNT(s.id)
    FROM Student s
             JOIN AddressUser a ON s.user_id = a.user_id
    WHERE s.teachStatus = 'TEACHING')

    RETURN @countStep;
END;


CREATE FUNCTION dbo.GetAllFinalGradesOfVedimost(
    @vedimostId varchar(255)
) RETURNS TABLE
    AS
    RETURN
    (
    select u.login, u.id as studentId,u.fullName as student,f.grade,f.extraGrade from FinalGradeOfStudent f join users u on f.student_id = u.id
    where f.vedimost_id=@vedimostId
    )
go

CREATE FUNCTION dbo.CheckVedimostDeadlineIsEnable(
    @vedimostId varchar(255)
)
    RETURNS BIT
AS
BEGIN
    DECLARE @boolReturn BIT;
    DECLARE @value int;

    set @value = (select TOP 1 count(v1.id) from ( select * from Vedimost where id=@vedimostId and deadline>getdate()) as v1);

    IF @value > 0
        SET @boolReturn = 1;
    ELSE
        SET @boolReturn = 0;

    RETURN @boolReturn;

END
go


CREATE FUNCTION dbo.GetStudentMonitoringByDay(
    @studentId varchar(255),
    @groupId varchar(255),
    @year varchar(255),
    @week varchar(255),
    @day varchar(255)
)
    RETURNS varchar(255)
AS
BEGIN
    DECLARE @allGrade TABLE (
                                id varchar(255),
                                studentId varchar(255),
                                room varchar(255),
                                day varchar(255),
                                section varchar(255),
                                groupName varchar(255),
                                [year] varchar(255),
                                week varchar(255),
                                subject varchar(255)
                            );

    DECLARE @counter1 int;
    DECLARE @allLessonCounts int;
    DECLARE @Id varchar(255);

    INSERT INTO @allGrade
    SELECT * from dbo.GetAllSubjectsByDayAndGroupAndStudentId(@studentId,@groupId,@year,@week,@day);

    set @counter1 = (select count(*) from @allGrade);
    set @allLessonCounts = @counter1;

    Declare @dynamicCounter int = 0;
    Declare @missCounter int = 0;

    WHILE 0 < @counter1
        BEGIN
            Select Top 1 @Id = id From @allGrade;

            Declare @studentId2 varchar(255);
            DECLARE @room2 varchar(255);
            DECLARE @year2 int;
            DECLARE @week2 int;
            DECLARE @day2 int;
            DECLARE @section2 int;

            Select Top 1
                @studentId2=studentId,
                @room2=room,
                @year2=year,
                @week2=week,
                @day2=day,
                @section2=section
            From @allGrade where id=@Id;

            DECLARE @statistics TABLE (
                                          nameId varchar(255),
                                          time datetime,
                                          week int,
                                          weekday int,
                                          section int,
                                          type varchar(255),
                                          isCome bit,
                                          createdBy varchar(255)
                                      );

            INSERT INTO @statistics
            SELECT * from dbo.GetTimesForRoomStatisticsByUserIdUnion2(@studentId2,@room2,@year2,@week2,@day2,@section2);

            Declare @statisticsCounter int;

            set @statisticsCounter = (select count(*) from @statistics);

            IF (@statisticsCounter>0)
                begin
                    Declare @attendanceCounter int = 0;
                    set @attendanceCounter = (select count(*) from @statistics where type='DYNAMIC' and isCome=0);

                    if (@attendanceCounter=0)
                        begin
                            set @dynamicCounter = @dynamicCounter + 1;
                        end
                    else
                        begin
                            set @missCounter = @missCounter + 1;
                        end
                end
            else
                begin
                    set @missCounter = @missCounter + 1;
                end


            DELETE @statistics
            Delete @allGrade Where id = @Id
            SET @counter1 =  (select count(*) from @allGrade);

        END;

    RETURN CAST(@allLessonCounts as varchar)+'/'+cast(@dynamicCounter as varchar)+'/'+cast(@missCounter as varchar); -- Return your desired value here
END
go

CREATE FUNCTION dbo.GetAllSubjectsByDayAndGroupAndStudentId(
    @studentId varchar(255),
    @groupId varchar(255),
    @year varchar(255),
    @week varchar(255),
    @day varchar(255)
) RETURNS TABLE
    AS
    RETURN
    (
    SELECT c.id, @studentId as studentId, c.classroom as room, c.day, c.period as section, g.name as groupName, w.year, w.sortNumber as week, l.name as subject
    FROM CardDB c
             JOIN LessonDB ld on c.lesson_id = ld.id
             JOIN Lesson l on ld.subject_id = l.id
             JOIN LessonDB_groups LDg on ld.id = LDg.LessonDB_id
             JOIN groups g on LDg.groups_id = g.id
             JOIN WeekOfEducationYear w on c.weekOfEducationYear_id = w.id
    WHERE g.id = @groupId AND w.year=@year and w.sortNumber=@week and c.day=@day
    )
go


CREATE FUNCTION dbo.GetStudentMonitoringByWeek(
    @studentId varchar(255),
    @groupId varchar(255),
    @year varchar(255),
    @week varchar(255)
)
    RETURNS varchar(255)
AS
BEGIN
    DECLARE @allGrade TABLE (
                                id varchar(255),
                                studentId varchar(255),
                                room varchar(255),
                                day varchar(255),
                                section varchar(255),
                                groupName varchar(255),
                                [year] varchar(255),
                                week varchar(255),
                                subject varchar(255)
                            );

    DECLARE @counter1 int;
    DECLARE @allLessonCounts int;
    DECLARE @Id varchar(255);

    INSERT INTO @allGrade
    SELECT * from dbo.GetAllSubjectsByWeekAndGroupAndStudentId(@studentId,@groupId,@year,@week);

    set @counter1 = (select count(*) from @allGrade);
    set @allLessonCounts = @counter1;

    Declare @dynamicCounter int = 0;
    Declare @missCounter int = 0;

    WHILE 0 < @counter1
        BEGIN
            Select Top 1 @Id = id From @allGrade;

            Declare @studentId2 varchar(255);
            DECLARE @room2 varchar(255);
            DECLARE @year2 int;
            DECLARE @week2 int;
            DECLARE @day2 int;
            DECLARE @section2 int;

            Select Top 1
                @studentId2=studentId,
                @room2=room,
                @year2=year,
                @week2=week,
                @day2=day,
                @section2=section
            From @allGrade where id=@Id;

            DECLARE @statistics TABLE (
                                          nameId varchar(255),
                                          time datetime,
                                          week int,
                                          weekday int,
                                          section int,
                                          type varchar(255),
                                          isCome bit,
                                          createdBy varchar(255)
                                      );

            INSERT INTO @statistics
            SELECT * from dbo.GetTimesForRoomStatisticsByUserIdUnion2(@studentId2,@room2,@year2,@week2,@day2,@section2);

            Declare @statisticsCounter int;

            set @statisticsCounter = (select count(*) from @statistics);

            IF (@statisticsCounter>0)
                begin
                    Declare @attendanceCounter int = 0;
                    set @attendanceCounter = (select count(*) from @statistics where type='DYNAMIC' and isCome=0);

                    if (@attendanceCounter=0)
                        begin
                            set @dynamicCounter = @dynamicCounter + 1;
                        end
                    else
                        begin
                            set @missCounter = @missCounter + 1;
                        end
                end
            else
                begin
                    set @missCounter = @missCounter + 1;
                end


            DELETE @statistics
            Delete @allGrade Where id = @Id
            SET @counter1 =  (select count(*) from @allGrade);

        END;

    RETURN CAST(@allLessonCounts as varchar)+'/'+cast(@dynamicCounter as varchar)+'/'+cast(@missCounter as varchar); -- Return your desired value here
END
go

CREATE FUNCTION dbo.GetStudentMonitoringByEducationYear(
    @studentId varchar(255),
    @groupId varchar(255),
    @educationYearId varchar(255)
)
    RETURNS varchar(255)
AS
BEGIN
    DECLARE @allGrade TABLE (
                                id varchar(255),
                                studentId varchar(255),
                                room varchar(255),
                                day varchar(255),
                                section varchar(255),
                                groupName varchar(255),
                                [year] varchar(255),
                                week varchar(255),
                                subject varchar(255)
                            );

    DECLARE @counter1 int;
    DECLARE @allLessonCounts int;
    DECLARE @Id varchar(255);

    INSERT INTO @allGrade
    SELECT * from dbo.GetAllSubjectsByEduYearIdAndGroupAndStudentId(@studentId,@groupId,@educationYearId);

    set @counter1 = (select count(*) from @allGrade);
    set @allLessonCounts = @counter1;

    Declare @dynamicCounter int = 0;
    Declare @missCounter int = 0;

    WHILE 0 < @counter1
        BEGIN
            Select Top 1 @Id = id From @allGrade;

            Declare @studentId2 varchar(255);
            DECLARE @room2 varchar(255);
            DECLARE @year2 int;
            DECLARE @week2 int;
            DECLARE @day2 int;
            DECLARE @section2 int;

            Select Top 1
                @studentId2=studentId,
                @room2=room,
                @year2=year,
                @week2=week,
                @day2=day,
                @section2=section
            From @allGrade where id=@Id;

            DECLARE @statistics TABLE (
                                          nameId varchar(255),
                                          time datetime,
                                          week int,
                                          weekday int,
                                          section int,
                                          type varchar(255),
                                          isCome bit,
                                          createdBy varchar(255)
                                      );

            INSERT INTO @statistics
            SELECT * from dbo.GetTimesForRoomStatisticsByUserIdUnion2(@studentId2,@room2,@year2,@week2,@day2,@section2);

            Declare @statisticsCounter int;

            set @statisticsCounter = (select count(*) from @statistics);

            IF (@statisticsCounter>0)
                begin
                    Declare @attendanceCounter int = 0;
                    set @attendanceCounter = (select count(*) from @statistics where type='DYNAMIC' and isCome=0);

                    if (@attendanceCounter=0)
                        begin
                            set @dynamicCounter = @dynamicCounter + 1;
                        end
                    else
                        begin
                            set @missCounter = @missCounter + 1;
                        end
                end
            else
                begin
                    set @missCounter = @missCounter + 1;
                end


            DELETE @statistics
            Delete @allGrade Where id = @Id
            SET @counter1 =  (select count(*) from @allGrade);

        END;

    RETURN CAST(@allLessonCounts as varchar)+'/'+cast(@dynamicCounter as varchar)+'/'+cast(@missCounter as varchar); -- Return your desired value here
END
go

CREATE FUNCTION dbo.GetAllSubjectsByWeekAndGroupAndStudentId(
    @studentId varchar(255),
    @groupId varchar(255),
    @year varchar(255),
    @week varchar(255)
) RETURNS TABLE
    AS
    RETURN
    (
    SELECT c.id, @studentId as studentId, c.classroom as room, c.day, c.period as section, g.name as groupName, w.year, w.sortNumber as week, l.name as subject
    FROM CardDB c
             JOIN LessonDB ld on c.lesson_id = ld.id
             JOIN Lesson l on ld.subject_id = l.id
             JOIN LessonDB_groups LDg on ld.id = LDg.LessonDB_id
             JOIN groups g on LDg.groups_id = g.id
             JOIN WeekOfEducationYear w on c.weekOfEducationYear_id = w.id
    WHERE g.id = @groupId AND w.year=@year and w.sortNumber=@week
    )
go
CREATE FUNCTION dbo.GetAllSubjectsByEduYearIdAndGroupAndStudentId(
    @studentId varchar(255),
    @groupId varchar(255),
    @educationYearId varchar(255)
) RETURNS TABLE
    AS
    RETURN
    (
    SELECT c.id, @studentId as studentId, c.classroom as room, c.day, c.period as section, g.name as groupName, w.year, w.sortNumber as week, l.name as subject
    FROM CardDB c
             JOIN LessonDB ld on c.lesson_id = ld.id
             JOIN Lesson l on ld.subject_id = l.id
             JOIN LessonDB_groups LDg on ld.id = LDg.LessonDB_id
             JOIN groups g on LDg.groups_id = g.id
             JOIN WeekOfEducationYear w on c.weekOfEducationYear_id = w.id
             JOIN EducationYear_WeekOfEducationYear EYWOEY on w.id = EYWOEY.weeks_id
    WHERE g.id = @groupId AND EYWOEY.EducationYear_id = @educationYearId
    )
go



CREATE FUNCTION dbo.GetThemes(
    @groupId varchar(255),
    @lessonId varchar(255),
    @educationYearId varchar(255),
    @teacherId varchar(255)
) RETURNS TABLE
    AS
    RETURN
    (
    select th.id, th.name, th.maxGrade, th.group_id as groupId, th.lesson_id as lessonId, th.educationYear_id as educationYearId,th.createdBy,th.createdAt from ThemeOfSubjectForGradeByTeacher th
    where th.group_id=@groupId and th.lesson_id=@lessonId and th.createdBy=@teacherId and th.educationYear_id=@educationYearId
    );



CREATE FUNCTION dbo.GetListStudentsForGetGradesByThemeIdAndGroupIdAndSubjectIdAndTeacherIdAndEducationId(
    @themeId varchar(255),
    @groupId varchar(255),
    @lessonId varchar(255),
    @educationYearId varchar(255),
    @teacherId varchar(255)
) RETURNS TABLE
    AS
    RETURN
    (
    select th.id, th.name, th.maxGrade, th.group_id as groupId, th.lesson_id as lessonId, th.educationYear_id as educationYearId,th.createdAt, u.id as studentId, u.fullName as studentName from ThemeOfSubjectForGradeByTeacher th
     join groups g on th.group_id = g.id join Student s on g.id = s.group_id join users u on s.user_id = u.id
    where th.id=@themeId and th.group_id=@groupId and th.lesson_id=@lessonId and th.createdBy=@teacherId and th.educationYear_id=@educationYearId
    );



CREATE FUNCTION dbo.GetListStudentsForGetGradesByGroupIdAndSubjectIdAndTeacherIdAndEducationId(
    @groupId varchar(255),
    @lessonId varchar(255),
    @educationYearId varchar(255),
    @teacherId varchar(255)
) RETURNS TABLE
    AS
    RETURN
    (
    select th.id, th.name, th.group_id, th.lesson_id, th.educationYear_id,th.createdAt, u.id as studentId, u.fullName as studentName from ThemeOfSubjectForGradeByTeacher th
     join groups g on th.group_id = g.id join Student s on g.id = s.group_id join users u on s.user_id = u.id
    where th.group_id=@groupId and th.lesson_id=@lessonId and th.createdBy=@teacherId and th.educationYear_id=@educationYearId
    );



CREATE FUNCTION dbo.GetAllGradesForAttendance2(
    @studentId varchar(255),
    @groupId varchar(255),
    @educationYearId varchar(255),
    @lessonId varchar(255)
)
    RETURNS varchar(255)
AS
BEGIN
    DECLARE @allGrade TABLE (
                                id varchar(255),
                                studentId varchar(255),
                                room varchar(255),
                                day varchar(255),
                                section varchar(255),
                                groupName varchar(255),
                                [year] varchar(255),
                                week varchar(255),
                                subject varchar(255)
                            );

    DECLARE @counter1 int;
    DECLARE @gradeForAttendance float = 0;
    DECLARE @Id varchar(255);

    INSERT INTO @allGrade
    SELECT * from dbo.GetSubjectsByEduYearIdAndGroupAndStudentId(@studentId,@groupId,@educationYearId,@lessonId);

    set @counter1 = (select count(*) from @allGrade);

    set @gradeForAttendance = (select dbo.GetValueOfGradeForAttendance(@groupId,@educationYearId,@lessonId));

    Declare @dynamicCounter int = 0;

    WHILE 0 < @counter1
        BEGIN
            Select Top 1 @Id = id From @allGrade;

            Declare @studentId2 varchar(255);
            DECLARE @room2 varchar(255);
            DECLARE @year2 int;
            DECLARE @week2 int;
            DECLARE @day2 int;
            DECLARE @section2 int;

            Select Top 1
                    @studentId2=studentId,
                    @room2=room,
                    @year2=year,
                    @week2=week,
                    @day2=day,
                    @section2=section
            From @allGrade where id=@Id;

            DECLARE @statistics TABLE (
                                          nameId varchar(255),
                                          time datetime,
                                          week int,
                                          weekday int,
                                          section int,
                                          type varchar(255),
                                          isCome bit,
                                          createdBy varchar(255)
                                      );

            INSERT INTO @statistics
            SELECT * from dbo.GetTimesForRoomStatisticsByUserIdUnion2(@studentId2,@room2,@year2,@week2,@day2,@section2);

            Declare @statisticsCounter int;

            set @statisticsCounter = (select count(*) from @statistics);

            IF (@statisticsCounter>0)
                begin
                    Declare @attendanceCounter int = 0;
                    set @attendanceCounter = (select count(*) from @statistics where type='DYNAMIC' and (isCome=0 or isCome is not null));

                    if (@attendanceCounter=0)
                        begin
                            set @dynamicCounter = @dynamicCounter + 1;
                        end
                end


            DELETE @statistics
            Delete @allGrade Where id = @Id
            SET @counter1 =  (select count(*) from @allGrade);

        END;

    RETURN @dynamicCounter*@gradeForAttendance; -- Return your desired value here
END;


CREATE FUNCTION dbo.GetAllGradesForAttendance(
    @studentId varchar(255),
    @groupId varchar(255),
    @educationYearId varchar(255),
    @lessonId varchar(255)
)
    RETURNS varchar(255)
AS
BEGIN
    DECLARE @allGrade TABLE (
                                id varchar(255),
                                studentId varchar(255),
                                room varchar(255),
                                day varchar(255),
                                section varchar(255),
                                groupName varchar(255),
                                [year] varchar(255),
                                week varchar(255),
                                subject varchar(255)
                            );

    DECLARE @counter1 int;
    DECLARE @gradeForAttendance float = 0;
    DECLARE @Id varchar(255);

    INSERT INTO @allGrade
    SELECT * from dbo.GetSubjectsByEduYearIdAndGroupAndStudentId(@studentId,@groupId,@educationYearId,@lessonId);

    set @counter1 = (select count(*) from @allGrade);

    set @gradeForAttendance = (select dbo.GetValueOfGradeForAttendance(@groupId,@educationYearId,@lessonId));

    Declare @dynamicCounter int = 0;

    WHILE 0 < @counter1
    BEGIN
        Select Top 1 @Id = id From @allGrade;

        Declare @studentId2 varchar(255);
        DECLARE @room2 varchar(255);
        DECLARE @year2 int;
        DECLARE @week2 int;
        DECLARE @day2 int;
        DECLARE @section2 int;

        Select Top 1
            @studentId2=studentId,
            @room2=room,
            @year2=year,
            @week2=week,
            @day2=day,
            @section2=section
        From @allGrade where id=@Id;

        DECLARE @statistics TABLE (
                                      nameId varchar(255),
                                      time datetime,
                                      week int,
                                      weekday int,
                                      section int,
                                      type varchar(255),
                                      isCome bit,
                                      createdBy varchar(255)
                                  );

        INSERT INTO @statistics
        SELECT * from dbo.GetTimesForRoomStatisticsByUserIdUnion2(@studentId2,@room2,@year2,@week2,@day2,@section2);

        Declare @statisticsCounter int;

        set @statisticsCounter = (select count(*) from @statistics);

        IF (@statisticsCounter>0)
            begin
                Declare @attendanceCounter int = 0;
                set @attendanceCounter = (select count(*) from @statistics where type='DYNAMIC' and isCome=0);

                if (@attendanceCounter=0)
                    begin
                        set @dynamicCounter = @dynamicCounter + 1;
                    end
            end


        DELETE @statistics
        Delete @allGrade Where id = @Id
        SET @counter1 =  (select count(*) from @allGrade);

    END;

    RETURN @dynamicCounter*@gradeForAttendance; -- Return your desired value here
END;







CREATE FUNCTION dbo.GetSubjectsByEduYearIdAndGroupAndStudentId(
    @studentId varchar(255),
    @groupId varchar(255),
    @educationYearId varchar(255),
    @lessonId varchar(255)
) RETURNS TABLE
    AS
    RETURN
          (
              SELECT  c.id, @studentId as studentId, c.classroom as room, c.day, c.period as section, g.name as groupName, w.year, w.sortNumber as week, l.name as subject
              FROM CardDB c
                       JOIN LessonDB ld on c.lesson_id = ld.id
                       JOIN Lesson l on ld.subject_id = l.id
                       JOIN LessonDB_groups LDg on ld.id = LDg.LessonDB_id
                       JOIN groups g on LDg.groups_id = g.id
                       JOIN WeekOfEducationYear w on c.weekOfEducationYear_id = w.id
                       JOIN EducationYear_WeekOfEducationYear EYWOEY on w.id = EYWOEY.weeks_id
              WHERE g.id = @groupId AND EYWOEY.EducationYear_id = @educationYearId AND l.id = @lessonId
          );



CREATE FUNCTION dbo.GetMaxEnableGrade(
    @studentId varchar(255),
    @groupId varchar(255),
    @educationYearId varchar(255),
    @lessonId varchar(255)
)
    RETURNS FLOAT
AS
BEGIN
    DECLARE @allGrade FLOAT
    DECLARE @maxGradeForAttendance FLOAT
    DECLARE @valueOfGradeForAttendance FLOAT
    DECLARE @value FLOAT

    SET @allGrade = (select dbo.GetSumOfAllGrades(@studentId,@educationYearId,@lessonId));
    SET @valueOfGradeForAttendance = (select dbo.GetMaxGradeForAttendance(@groupId,@educationYearId,@lessonId));

    if @valueOfGradeForAttendance > 0
        SET @maxGradeForAttendance = (select dbo.GetMaxGradeForAttendance(@groupId,@educationYearId,@lessonId));

    SET @value = 30 - @allGrade - @maxGradeForAttendance;

    RETURN @value;
END;


CREATE FUNCTION dbo.IsEnableGrade(
    @studentId varchar(255),
    @groupId varchar(255),
    @educationYearId varchar(255),
    @lessonId varchar(255),
    @grade float
)
    RETURNS BIT
AS
BEGIN
    DECLARE @boolReturn BIT
    DECLARE @allGrade FLOAT
    DECLARE @maxGradeForAttendance FLOAT
    DECLARE @valueOfGradeForAttendance FLOAT
    DECLARE @value FLOAT

    SET @maxGradeForAttendance = 0;
    SET @allGrade = 0;

    SET @allGrade = (select dbo.GetSumOfAllGrades(@studentId,@educationYearId,@lessonId));
    SET @valueOfGradeForAttendance = (select dbo.GetMaxGradeForAttendance(@groupId,@educationYearId,@lessonId));

    if @valueOfGradeForAttendance > 0
        SET @maxGradeForAttendance = (select dbo.GetMaxGradeForAttendance(@groupId,@educationYearId,@lessonId));

    IF (@allGrade is not null )
       SET @value = 30 - @allGrade - @maxGradeForAttendance - @grade;
    ELSE
       SET @value = 30 - @maxGradeForAttendance - @grade;

    IF @value >= 0
        SET @boolReturn = 1;
    ELSE
        SET @boolReturn = 0;

    RETURN @boolReturn;
END;



CREATE FUNCTION dbo.GetSumOfAllGrades(
    @studentId varchar(255),
    @educationYearId varchar(255),
    @lessonId varchar(255)
)
    RETURNS FLOAT
AS
BEGIN
    DECLARE @countStep FLOAT

    SET @countStep = (
        select sum(grade) as middle from GradeOfStudentByTeacher where active=1 and student_id=@studentId and educationYear_id=@educationYearId and lesson_id=@lessonId
        group by student_id,educationYear_id,lesson_id);
    RETURN @countStep ;
END;


CREATE FUNCTION dbo.GetValueOfGradeForAttendance(
    @groupId varchar(255),
    @educationYearId varchar(255),
    @lessonId varchar(255)
)
    RETURNS FLOAT
AS
BEGIN
    DECLARE @countStep FLOAT

    SET @countStep = (
        select ga.grade from GradeForAttendance ga join GradeForAttendance_groups GFAg on ga.id = GFAg.GradeForAttendance_id
        where ga.educationYear_id=@educationYearId and ga.lesson_id=@lessonId and GFAg.groups_id=@groupId)

    RETURN @countStep;
END;



CREATE FUNCTION dbo.GetMaxGradeForAttendance(
    @groupId varchar(255),
    @educationYearId varchar(255),
    @lessonId varchar(255)
)
    RETURNS FLOAT
AS
BEGIN
    DECLARE @countStep FLOAT
    DECLARE @credit int

    SET @countStep = (
        select ga.grade from GradeForAttendance ga join GradeForAttendance_groups GFAg on ga.id = GFAg.GradeForAttendance_id
        where ga.educationYear_id=@educationYearId and ga.lesson_id=@lessonId and GFAg.groups_id=@groupId);

    SET @credit = (
        select ga.credit from GradeForAttendance ga join GradeForAttendance_groups GFAg on ga.id = GFAg.GradeForAttendance_id
        where ga.educationYear_id=@educationYearId and ga.lesson_id=@lessonId and GFAg.groups_id=@groupId)

    RETURN @countStep * @credit * 15;
END;


CREATE FUNCTION dbo.GetGradeForAttendance(
    @groupId varchar(255),
    @educationYearId varchar(255),
    @lessonId varchar(255)
)
    RETURNS FLOAT
AS
BEGIN
    DECLARE @countStep FLOAT
    DECLARE @credit int

    SET @countStep = (
        select ga.grade from GradeForAttendance ga join GradeForAttendance_groups GFAg on ga.id = GFAg.GradeForAttendance_id
        where ga.educationYear_id=@educationYearId and ga.lesson_id=@lessonId and GFAg.groups_id=@groupId);

    SET @credit = (
        select ga.credit from GradeForAttendance ga join GradeForAttendance_groups GFAg on ga.id = GFAg.GradeForAttendance_id
        where ga.educationYear_id=@educationYearId and ga.lesson_id=@lessonId and GFAg.groups_id=@groupId)

    RETURN @countStep * @credit;
END;



CREATE FUNCTION dbo.existGradeForAttendance(
    @groupId varchar(255),
    @educationYearId varchar(255),
    @lessonId varchar(255)
)
    RETURNS BIT
AS
BEGIN
    DECLARE @boolReturn BIT
    DECLARE @countStep FLOAT

    SET @countStep = (
        select ga.grade from GradeForAttendance ga join GradeForAttendance_groups GFAg on ga.id = GFAg.GradeForAttendance_id
        where ga.educationYear_id=@educationYearId and ga.lesson_id=@lessonId and GFAg.groups_id=@groupId)

    IF @countStep > 0
        SET @boolReturn = 1;
    ELSE
        SET @boolReturn = 0;

    RETURN @boolReturn;
END;





CREATE FUNCTION dbo.existTeachersLesson(
    @userId varchar(255),
    @groupId varchar(255),
    @educationYearId varchar(255),
    @lessonId varchar(255)
)
    RETURNS BIT
AS
BEGIN
    DECLARE @boolReturn BIT
    DECLARE @countStep INT

    SET @countStep = (select count(tcs.id) from TeacherConnectSubject tcs
                        join TeacherConnectSubject_groups TCSg on tcs.id = TCSg.TeacherConnectSubject_id
                        join WeekOfEducationYear WOEY on tcs.weeks_id = WOEY.id
                        join EducationYear_WeekOfEducationYear EYWOEY on WOEY.id = EYWOEY.weeks_id
                        join EducationYear EY on EYWOEY.EducationYear_id = EY.id
                        join users u on tcs.user_id = u.id
                      where u.id=@userId and TCSg.groups_id=@groupId and ey.id=@educationYearId and tcs.lesson_id=@lessonId)

    IF @countStep > 0
        SET @boolReturn = 1;
    ELSE
        SET @boolReturn = 0;

    RETURN @boolReturn;
END;

select dbo.existQueueForToday(?1)



CREATE FUNCTION dbo.GetTimesForRoomStatisticsByUserIdUnion2
(
    @userId varchar(255),
    @room varchar(255),
    @year int,
    @week int,
    @weekday int,
    @section int
)
    RETURNS TABLE
        AS
        RETURN
            (
                select 'id'+cast(al.id as varchar) as nameId, al.time, @week as week, @weekday as weekday, @section as section,'MACHINE' as type, null as isCome,null as createdBy
                from acc_monitor_log al join acc_door ad on ad.device_id=al.device_id
                                        join users u on cast(u.RFID as varchar) = cast(al.card_no as varchar) COLLATE Chinese_PRC_CI_AS
                where al.time between
                    case
                        when @section=1 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                8,
                                00,
                                00,
                                0)
                        when @section=2 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                9,
                                50,
                                00,
                                0)
                        when @section=3 then DATETIMEFROMPARTS(
                                DATEPART(YEAR,dateadd(dd,DATEDIFF(dd, DATEPART(dw, GETDATE())-1-@weekday, getdate()),0)),
                                DATEPART(MONTH,dateadd(dd,DATEDIFF(dd, DATEPART(dw, GETDATE())-1-@weekday, getdate()),0)),
                                DATEPART(DAY, dateadd(dd, DATEDIFF(dd, DATEPART(dw, GETDATE())-1-@weekday, getdate()),0)),
                                10,
                                50,
                                00,
                                0)
                        when @section=4 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                11,
                                50,
                                00,
                                0)
                        when @section=5 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                12,
                                50,
                                00,
                                0)
                        when @section=6 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                13,
                                50,
                                00,
                                0)
                        when @section=7 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                14,
                                50,
                                00,
                                0)
                        when @section=8 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                15,
                                50,
                                00,
                                0)
                        when @section=9 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                16,
                                50,
                                00,
                                0)
                        when @section=10 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                17,
                                50,
                                00,
                                0)
                        when @section=11 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                18,
                                50,
                                00,
                                0)
                        when @section=12 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                19,
                                50,
                                00,
                                0)
                        ELSE 0
                        END
                    and
                    case
                        when @section=1 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                9,
                                54,
                                00,
                                0)
                        when @section=2 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                10,
                                54,
                                00,
                                0)
                        when @section=3 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                11,
                                54,
                                00,
                                0)
                        when @section=4 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                12,
                                54,
                                00,
                                0)
                        when @section=5 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                13,
                                54,
                                00,
                                0)
                        when @section=6 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                14,
                                54,
                                00,
                                0)
                        when @section=7 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                15,
                                54,
                                00,
                                0)
                        when @section=8 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                16,
                                54,
                                00,
                                0)
                        when @section=9 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                17,
                                54,
                                00,
                                0)
                        when @section=10 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                18,
                                54,
                                00,
                                0)
                        when @section=11 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                19,
                                54,
                                00,
                                0)
                        when @section=12 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                21,
                                00,
                                00,
                                0)
                        ELSE 0
                        END
                  and ((ad.door_name LIKE '%'+@room+'%') or (@room LIKE '%'+ad.door_name+'%')) and u.id=@userId
                union
                select d.id as nameId,d.createdAt as time, d.week, d.weekday,  d.section,'DYNAMIC' as type,d.isCome,u3.fullName as createdBy from DynamicAttendance d
                join users u3 on d.createdBy=u3.id
                where ((d.room LIKE '%'+@room+'%') or (@room LIKE '%'+d.room+'%')) and d.student_id=@userId and d.weekday=@weekday and d.week=@week and d.section=@section and d.year=@year
            )
go




CREATE FUNCTION dbo.GetTimesForRoomStatisticsByUserIdUnion1
(
    @userId varchar(255),
    @room varchar(255),
    @year int,
    @week int,
    @weekday int,
    @section int
)
    RETURNS TABLE
        AS
        RETURN
            (
                select al.time, @week as week, @weekday as weekday, @section as section,'MACHINE' as type, null as isCome,null as createdBy
                from acc_monitor_log al join acc_door ad on ad.device_id=al.device_id
                                        join users u on cast(u.RFID as varchar) = cast(al.card_no as varchar) COLLATE Chinese_PRC_CI_AS
                where al.time between
                    case
                        when @section=1 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                8,
                                00,
                                00,
                                0)
                        when @section=2 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                9,
                                50,
                                00,
                                0)
                        when @section=3 then DATETIMEFROMPARTS(
                                DATEPART(YEAR,dateadd(dd,DATEDIFF(dd, DATEPART(dw, GETDATE())-1-@weekday, getdate()),0)),
                                DATEPART(MONTH,dateadd(dd,DATEDIFF(dd, DATEPART(dw, GETDATE())-1-@weekday, getdate()),0)),
                                DATEPART(DAY, dateadd(dd, DATEDIFF(dd, DATEPART(dw, GETDATE())-1-@weekday, getdate()),0)),
                                10,
                                50,
                                00,
                                0)
                        when @section=4 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                11,
                                50,
                                00,
                                0)
                        when @section=5 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                12,
                                50,
                                00,
                                0)
                        when @section=6 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                13,
                                50,
                                00,
                                0)
                        when @section=7 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                14,
                                50,
                                00,
                                0)
                        when @section=8 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                15,
                                50,
                                00,
                                0)
                        when @section=9 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                16,
                                50,
                                00,
                                0)
                        when @section=10 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                17,
                                50,
                                00,
                                0)
                        when @section=11 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                18,
                                50,
                                00,
                                0)
                        when @section=12 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                19,
                                50,
                                00,
                                0)
                        ELSE 0
                        END
                    and
                    case
                        when @section=1 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                9,
                                54,
                                00,
                                0)
                        when @section=2 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                10,
                                54,
                                00,
                                0)
                        when @section=3 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                11,
                                54,
                                00,
                                0)
                        when @section=4 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                12,
                                54,
                                00,
                                0)
                        when @section=5 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                13,
                                54,
                                00,
                                0)
                        when @section=6 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                14,
                                54,
                                00,
                                0)
                        when @section=7 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                15,
                                54,
                                00,
                                0)
                        when @section=8 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                16,
                                54,
                                00,
                                0)
                        when @section=9 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                17,
                                54,
                                00,
                                0)
                        when @section=10 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                18,
                                54,
                                00,
                                0)
                        when @section=11 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                19,
                                54,
                                00,
                                0)
                        when @section=12 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                21,
                                00,
                                00,
                                0)
                        ELSE 0
                        END
                  and ad.door_name LIKE @room and u.id=@userId
                union
                select d.createdAt as time, d.week, d.weekday,  d.section,'DYNAMIC' as type,d.isCome,u3.fullName as createdBy from DynamicAttendance d
                join users u3 on d.createdBy=u3.id
                where d.room LIKE @room and d.student_id=@userId and d.weekday=@weekday and d.week=@week and d.section=@section and d.year=@year
            );




CREATE FUNCTION dbo.GetFirstOfEntering(
    @rfid varchar(255)
)
    RETURNS datetime
AS
begin
    RETURN (
        select
            TOP 1 al.time
        from acc_monitor_log al
        where al.time between DATEADD(dd, DATEDIFF(dd, 0, getdate()), 0) and DATEADD(dd, DATEDIFF(dd, -1, getdate()), 0) and al.card_no=@rfid
        order by al.time
        )
end;

select dbo.GetFirstOfEntering('1390364171')



CREATE FUNCTION dbo.GetStudentStatisticsForDeanOneWeek
(
    @educationYearId varchar(255),
    @groupId varchar(255),
    @year int,
    @week int,
    @weekday int
)
    RETURNS TABLE
        AS
        RETURN
            (
                select
                    u.rfid,
                    g.id as groupId,
                    u.id as studentId,
                    u.fullName,
                    @educationYearId as educationYearId,
                    @year as year,
                    @week as week,
                    @weekday as weekday
                from groups g
                    join Student S on g.id = S.group_id
                    join users u on S.user_id = u.id
                where g.id=@groupId
            );


CREATE FUNCTION dbo.GetStudentStatisticsForDeanOneWeekSection
(
    @educationYearId varchar(255),
    @groupId varchar(255),
    @year int,
    @week int,
    @weekday int,
    @studentId varchar(255)
)
    RETURNS TABLE
        AS
        RETURN
            (
                select
                    @studentId as studentId,
                    c.betweenDuringDate,
                    c.classroom as room,
                    c.day as weekday,
                    c.period as section,
                    l.name as lesson,
                    w.weekNumber,
                    w.sortNumber as week,
                    w.year
                from CardDB c
                 join WeekOfEducationYear w on c.weekOfEducationYear_id = w.id
                 join EducationYear_WeekOfEducationYear ew on w.id = ew.weeks_id
                 join LessonDB LD on c.lesson_id = LD.id
                 join LessonDB_groups LDg on LD.id = LDg.LessonDB_id
                 join Lesson l on LD.subject_id = l.id
                where
                    ew.EducationYear_id=@educationYearId and
                    LDg.groups_id=@groupId and
                    w.year=@year and
                    w.sortNumber=@week and
                    c.day=@weekday
                group by c.period, c.betweenDuringDate, c.classroom, c.day, l.name, w.weekNumber, w.sortNumber, w.year
            );



CREATE FUNCTION dbo.GetTimesForRoomStatisticsByUserIdAndWeek
(
    @userId varchar(255),
    @room varchar(255),
    @year int,
    @week int,
    @weekday int,
    @section int
)
    RETURNS TABLE
        AS
        RETURN
            (
                select u.id,u.fullName,al.time, @weekday as weekday,  @section as section
                from acc_monitor_log al join acc_door ad on ad.device_id=al.device_id
                                        join users u on cast(u.RFID as varchar) = cast(al.card_no as varchar) COLLATE Chinese_PRC_CI_AS
                where al.time between
                    case
                        when @section=1 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                8,
                                50,
                                00,
                                0)
                        when @section=2 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                9,
                                50,
                                00,
                                0)
                        when @section=3 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                10,
                                50,
                                00,
                                0)
                        when @section=4 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                11,
                                50,
                                00,
                                0)
                        when @section=5 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                12,
                                50,
                                00,
                                0)
                        when @section=6 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                13,
                                50,
                                00,
                                0)
                        when @section=7 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                14,
                                50,
                                00,
                                0)
                        when @section=8 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                15,
                                50,
                                00,
                                0)
                        when @section=9 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                16,
                                50,
                                00,
                                0)
                        when @section=10 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                17,
                                50,
                                00,
                                0)
                        when @section=11 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                18,
                                50,
                                00,
                                0)
                        when @section=12 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                19,
                                50,
                                00,
                                0)
                        ELSE 0
                        END
                    and
                    case
                        when @section=1 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                9,
                                54,
                                00,
                                0)
                        when @section=2 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                10,
                                54,
                                00,
                                0)
                        when @section=3 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                11,
                                54,
                                00,
                                0)
                        when @section=4 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                12,
                                54,
                                00,
                                0)
                        when @section=5 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                13,
                                54,
                                00,
                                0)
                        when @section=6 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                14,
                                54,
                                00,
                                0)
                        when @section=7 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                15,
                                54,
                                00,
                                0)
                        when @section=8 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                16,
                                54,
                                00,
                                0)
                        when @section=9 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                17,
                                54,
                                00,
                                0)
                        when @section=10 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                18,
                                54,
                                00,
                                0)
                        when @section=11 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                19,
                                54,
                                00,
                                0)
                        when @section=12 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                21,
                                00,
                                00,
                                0)
                        ELSE 0
                        END
                  and ad.door_name=@room and u.id=@userId
            );


CREATE FUNCTION dbo.loginCounter(
    @login varchar(255)
)
    RETURNS int
AS
begin
    Declare @countStep int

    set @countStep = (select count(login) from users where login=@login group by login);
    return @countStep;
end;



CREATE FUNCTION dbo.getAllQueuesOfTodayForDean()
    RETURNS TABLE
AS
Return (
        select
            id,
            number,
            createdAt,
            createdBy as ownerId,
            waitingAt,
            startedAt,
            calledAt,
            finishedAt,
            status
        from Queue
        where createdAt between DATEADD(dd, DATEDIFF(dd, 0, GETDATE()), 0) AND DATEADD(dd, DATEDIFF(dd, -1, GETDATE()), 0)
    );


select * from dbo.getAllQueuesOfTodayForDean();


//bool boolean
CREATE FUNCTION dbo.existQueueForToday(
    @userId varchar(255)
)
    RETURNS BIT
AS
BEGIN
    DECLARE @boolReturn BIT
    DECLARE @countStep INT

    -- Corrected syntax: Added parentheses around the SELECT statement
    SET @countStep = (SELECT COUNT(number)
                      FROM Queue
                      WHERE createdBy = @userId
                        AND createdAt BETWEEN DATEADD(dd, DATEDIFF(dd, 0, GETDATE()), 0)
                          AND DATEADD(dd, DATEDIFF(dd, -1, GETDATE()), 0))

    IF @countStep > 0
        SET @boolReturn = 1;
    ELSE
        SET @boolReturn = 0;

    RETURN @boolReturn;
END;

select dbo.existQueueForToday(?1)




CREATE FUNCTION dbo.GetMaxQueueOfToday()
    RETURNS INT
    AS
    begin
    RETURN (select MAX(number)
            from Queue
            where createdAt between DATEADD(dd, DATEDIFF(dd, 0, getdate()), 0) and DATEADD(dd, DATEDIFF(dd, -1, getdate()), 0))
    end;

select dbo.GetMaxQueueOfToday()




CREATE FUNCTION dbo.GetTimesForRoomStatisticsByUserIdTime
(
    @userId varchar(255)
)
    RETURNS TABLE
        AS
        RETURN
            (
                select Top 1 al.time as cardNo
                from acc_monitor_log al
                         join users u
                              on cast(u.RFID as varchar) =
                                 cast(al.card_no as varchar) COLLATE Chinese_PRC_CI_AS
                where u.id=@userId and al.time between DATEADD(dd, DATEDIFF(dd, 0, getdate()), 0) and DATEADD(dd, DATEDIFF(dd, -1, getdate()), 0)
);


CREATE FUNCTION dbo.GetTimesForRoomStatisticsByUserId
(
    @userId varchar(255),
    @room varchar(255),
    @year int,
    @week int,
    @weekday int,
    @section int
)
    RETURNS TABLE
        AS
        RETURN
            (
                select al.time, @week as week, @weekday as weekday, @section as section
                from acc_monitor_log al join acc_door ad on ad.device_id=al.device_id
                                        join users u on cast(u.RFID as varchar) = cast(al.card_no as varchar) COLLATE Chinese_PRC_CI_AS
                where al.time between
                    case
                        when @section=1 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                8,
                                00,
                                00,
                                0)
                        when @section=2 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                9,
                                50,
                                00,
                                0)
                        when @section=3 then DATETIMEFROMPARTS(
                                DATEPART(YEAR,dateadd(dd,DATEDIFF(dd, DATEPART(dw, GETDATE())-1-@weekday, getdate()),0)),
                                DATEPART(MONTH,dateadd(dd,DATEDIFF(dd, DATEPART(dw, GETDATE())-1-@weekday, getdate()),0)),
                                DATEPART(DAY, dateadd(dd, DATEDIFF(dd, DATEPART(dw, GETDATE())-1-@weekday, getdate()),0)),
                                10,
                                50,
                                00,
                                0)
                        when @section=4 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                11,
                                50,
                                00,
                                0)
                        when @section=5 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                12,
                                50,
                                00,
                                0)
                        when @section=6 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                13,
                                50,
                                00,
                                0)
                        when @section=7 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                14,
                                50,
                                00,
                                0)
                        when @section=8 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                15,
                                50,
                                00,
                                0)
                        when @section=9 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                16,
                                50,
                                00,
                                0)
                        when @section=10 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                17,
                                50,
                                00,
                                0)
                        when @section=11 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                18,
                                50,
                                00,
                                0)
                        when @section=12 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                19,
                                50,
                                00,
                                0)
                        ELSE 0
                        END
                    and
                    case
                        when @section=1 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                9,
                                54,
                                00,
                                0)
                        when @section=2 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                10,
                                54,
                                00,
                                0)
                        when @section=3 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                11,
                                54,
                                00,
                                0)
                        when @section=4 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                12,
                                54,
                                00,
                                0)
                        when @section=5 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                13,
                                54,
                                00,
                                0)
                        when @section=6 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                14,
                                54,
                                00,
                                0)
                        when @section=7 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                15,
                                54,
                                00,
                                0)
                        when @section=8 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                16,
                                54,
                                00,
                                0)
                        when @section=9 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                17,
                                54,
                                00,
                                0)
                        when @section=10 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                18,
                                54,
                                00,
                                0)
                        when @section=11 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                19,
                                54,
                                00,
                                0)
                        when @section=12 then DATETIMEFROMPARTS(
                                DATEPART( YEAR, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( MONTH, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                DATEPART( DAY, DATEADD( DAY, + (@weekday-1), DATEADD(DAY,-DATEPART(DW,CAST('1/1/' + cast(@year as varchar) AS Date))+2,DATEADD(WK,@week-1,CAST('1/1/' + cast(@year as varchar) AS Date))))),
                                21,
                                00,
                                00,
                                0)
                        ELSE 0
                        END
                  and ad.door_name LIKE @room and u.id=@userId
);



CREATE FUNCTION dbo.GetStudentDataByWeekDay
(
    @start datetime,
    @groupsArr varchar(255)
)
    RETURNS TABLE
        AS
        RETURN
            (
                SELECT
                    t2.id,
                    t2.fullName,
                    t2.groupName,
                    t2.level
                FROM
                    (
                        SELECT
                            al.card_no AS cardNo,
                            al.time AS timeAsc
                        FROM
                            acc_monitor_log al
                                JOIN users u ON CAST(u.RFID AS varchar) = CAST(al.card_no AS varchar) COLLATE Chinese_PRC_CI_AS
                                JOIN Student s ON u.id = s.user_id
                                JOIN groups g ON g.id = s.group_id
                        WHERE
                            al.time BETWEEN @start AND DATEADD(d, 1, @start)
                          AND g.name IN (SELECT value FROM STRING_SPLIT(@groupsArr, ','))
                          AND s.teachStatus = 'TEACHING'
                    ) AS t1
                        RIGHT JOIN
                    (
                        SELECT
                            u.id,
                            u.fullName,
                            g.name AS groupName,
                            u.RFID AS cardNo,
                            g.level
                        FROM
                            users u
                                JOIN Student s ON u.id = s.user_id
                                JOIN groups g ON g.id = s.group_id
                        WHERE
                                g.name IN (SELECT value FROM STRING_SPLIT(@groupsArr, ','))
                          AND s.teachStatus = 'TEACHING'
                    ) AS t2
                    ON
                            CAST(t1.cardNo AS varchar) = CAST(t2.cardNo AS varchar) COLLATE Chinese_PRC_CI_AS
                WHERE
                    t1.cardNo IS NULL
);


CREATE FUNCTION dbo.GetCourseStatisticsForDekan
(
    @id varchar(255),
    @dateFrom datetime,
    @dateTo datetime
)
    RETURNS TABLE
        AS
        RETURN
            (
                SELECT
                    g2.level,
                    g2.name,
                    ISNULL(g1.comeCount, 0) AS comeCount, -- Use ISNULL to handle null comeCount
                    g2.allCount
                FROM
                    (
                        -- Subquery for come count
                        SELECT
                            g.level,
                            g.name,
                            COUNT(card.cardNo) AS comeCount
                        FROM
                            (
                                SELECT
                                    al.card_no AS cardNo
                                FROM
                                    acc_monitor_log al
                                        JOIN users u ON CAST(u.RFID AS varchar) = CAST(al.card_no AS varchar) COLLATE Chinese_PRC_CI_AS
                                        JOIN users_Role ur ON u.id = ur.users_id
                                        JOIN Role R2 ON ur.roles_id = R2.id
                                WHERE
                                    al.time BETWEEN @dateFrom AND @dateTo
                                  AND R2.roleName = 'ROLE_STUDENT'
                                GROUP BY
                                    al.card_no
                            ) AS card
                                JOIN users u ON CAST(card.cardNo AS varchar) = CAST(u.RFID AS varchar) COLLATE Chinese_PRC_CI_AS
                                JOIN Student S ON u.id = S.user_id
                                JOIN groups g ON g.id = S.group_id
                                JOIN Faculty F ON F.id = g.faculty_id
                                JOIN Dekanat_Faculty DF ON F.id = DF.faculties_id
                                JOIN Dekanat D ON DF.Dekanat_id = D.id
                                JOIN Dekan D2 ON D.id = D2.dekanat_id
                        WHERE
                                D2.user_id = @id
                          AND g.educationType_id = D2.educationType_id
                          AND g.active = 1
                        GROUP BY
                            g.name,
                            g.level
                    ) AS g1
                        RIGHT JOIN
                    (
                        -- Subquery for all count
                        SELECT
                            g.name AS name,
                            g.level AS level,
                            COUNT(s.id) AS allCount
                        FROM
                            Student s
                                JOIN groups g ON s.group_id = g.id
                                JOIN Faculty F ON F.id = g.faculty_id
                                JOIN Dekanat_Faculty DF ON F.id = DF.faculties_id
                                JOIN Dekanat D ON DF.Dekanat_id = D.id
                                JOIN Dekan D2 ON D.id = D2.dekanat_id
                        WHERE
                                D2.user_id = @id
                          AND g.educationType_id = D2.educationType_id
                          AND g.active = 1
                        GROUP BY
                            g.name,
                            g.level
                    ) AS g2 ON g2.name = g1.name

);


CREATE FUNCTION dbo.getStudentsData(
    @userId varchar(255)
)
    RETURNS TABLE
        AS
        Return (
        select
            u.id,
            u.login,
            u.fullName,
            u.bornYear,
            u.citizenship,
            u.nationality,
            u.passportNum,
            s.rektororder,
            s.lengthOfStudying,
            s.teachStatus
        from users u
                 join Student S on u.id = S.user_id
        where u.id=@userId
               )
go


CREATE FUNCTION dbo.GetGroupsStatisticForDekan
(
    @id varchar(255),
    @dateFrom datetime,
    @dateTo datetime
)
    RETURNS TABLE
        AS
        RETURN
            (
                SELECT
                    g2.level,
                    g2.name,
                    g1.comeCount,
                    g2.allCount
                FROM
                    (
                        -- Subquery for come count
                        SELECT
                            g.level,
                            g.name,
                            COUNT(card.cardNo) AS comeCount
                        FROM
                            (
                                SELECT
                                    al.card_no AS cardNo
                                FROM
                                    acc_monitor_log al
                                        JOIN users u ON CAST(u.RFID AS varchar) = CAST(al.card_no AS varchar) COLLATE Chinese_PRC_CI_AS
                                        JOIN users_Role ur ON u.id = ur.users_id
                                        JOIN Role R2 ON ur.roles_id = R2.id
                                WHERE
                                    al.time BETWEEN @dateFrom AND @dateTo
                                  AND R2.roleName = 'ROLE_STUDENT'
                                GROUP BY
                                    al.card_no
                            ) AS card
                                JOIN users u ON CAST(card.cardNo AS varchar) = CAST(u.RFID AS varchar) COLLATE Chinese_PRC_CI_AS
                                JOIN Student S ON u.id = S.user_id
                                JOIN groups g ON g.id = S.group_id
                                JOIN Faculty F ON F.id = g.faculty_id
                                JOIN Dekanat_Faculty DF ON F.id = DF.faculties_id
                                JOIN Dekanat D ON DF.Dekanat_id = D.id
                                JOIN Dekan D2 ON D.id = D2.dekanat_id
                        WHERE
                                D2.user_id = @id
                          AND g.educationType_id = D2.educationType_id
                          AND g.active = 1
                        GROUP BY
                            g.name,
                            g.level
                    ) AS g1
                        RIGHT JOIN
                    (
                        -- Subquery for all count
                        SELECT
                            g.name AS name,
                            COUNT(s.id) AS allCount,
                            g.level AS level
                        FROM
                            Student s
                                JOIN groups g ON s.group_id = g.id
                                JOIN Faculty F ON F.id = g.faculty_id
                                JOIN Dekanat_Faculty DF ON F.id = DF.faculties_id
                                JOIN Dekanat D ON DF.Dekanat_id = D.id
                                JOIN Dekan D2 ON D.id = D2.dekanat_id
                        WHERE
                                D2.user_id = @id
                          AND g.educationType_id = D2.educationType_id
                          AND g.active = 1
                        GROUP BY
                            g.name,
                            g.level
                    ) AS g2 ON g2.name = g1.name


)
go


-- Create a table-valued function
CREATE FUNCTION dbo.GetCardTimeInfo
(
    @date varchar(255),
    @day varchar(255),
    @id varchar(255)
)
    RETURNS TABLE
        AS
        RETURN
            (
                SELECT
                    t1.cardNo,
                    t1.timeAsc,
                    t2.timeDesc
                FROM
                    (
                        SELECT TOP 1
                            u.RFID as cardNo,
                            al.time as timeAsc
                        FROM
                            acc_monitor_log al
                                JOIN
                            users u ON CAST(u.RFID as varchar) = CAST(al.card_no as varchar) COLLATE Chinese_PRC_CI_AS
                        WHERE
                            al.time BETWEEN
                                DATEADD(DAY, 0, CAST(CAST(YEAR(@date) AS VARCHAR(4)) + '/' + CAST(MONTH(@date) AS VARCHAR(2)) + @day AS DATETIME))
                                AND
                                DATEADD(DAY, 1, CAST(CAST(YEAR(@date) AS VARCHAR(4)) + '/' + CAST(MONTH(@date) AS VARCHAR(2)) + @day AS DATETIME))
                          AND u.id = @id
                        ORDER BY
                            al.time ASC
                    ) AS t1
                        JOIN
                    (
                        SELECT TOP 1
                            u.RFID as cardNo,
                            al.time as timeDesc
                        FROM
                            acc_monitor_log al
                                JOIN
                            users u ON CAST(u.RFID as varchar) = CAST(al.card_no as varchar) COLLATE Chinese_PRC_CI_AS
                        WHERE
                            al.time BETWEEN
                                DATEADD(DAY, 0, CAST(CAST(YEAR(@date) AS VARCHAR(4)) + '/' + CAST(MONTH(@date) AS VARCHAR(2)) + @day AS DATETIME))
                                AND
                                DATEADD(DAY, 1, CAST(CAST(YEAR(@date) AS VARCHAR(4)) + '/' + CAST(MONTH(@date) AS VARCHAR(2)) + @day AS DATETIME))
                          AND u.id = @id
                        ORDER BY
                            al.time DESC
                    ) AS t2 ON t1.cardNo = t2.cardNo
            )
go